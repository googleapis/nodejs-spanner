// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("protobufjs/minimal"));

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots._google_cloud_spanner_5_0_0_protos || ($protobuf.roots._google_cloud_spanner_5_0_0_protos = {});
    
    $root.google = (function() {
    
        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        var google = {};
    
        google.protobuf = (function() {
    
            /**
             * Namespace protobuf.
             * @memberof google
             * @namespace
             */
            var protobuf = {};
    
            protobuf.Duration = (function() {
    
                /**
                 * Properties of a Duration.
                 * @memberof google.protobuf
                 * @interface IDuration
                 * @property {number|Long|null} [seconds] Duration seconds
                 * @property {number|null} [nanos] Duration nanos
                 */
    
                /**
                 * Constructs a new Duration.
                 * @memberof google.protobuf
                 * @classdesc Represents a Duration.
                 * @implements IDuration
                 * @constructor
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 */
                function Duration(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Duration seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Duration nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.nanos = 0;
    
                /**
                 * Creates a new Duration instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 * @returns {google.protobuf.Duration} Duration instance
                 */
                Duration.create = function create(properties) {
                    return new Duration(properties);
                };
    
                /**
                 * Encodes the specified Duration message. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Duration message, length delimited. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Duration();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.seconds = reader.int64();
                            break;
                        case 2:
                            message.nanos = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Duration message.
                 * @function verify
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Duration.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Duration message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Duration} Duration
                 */
                Duration.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Duration)
                        return object;
                    var message = new $root.google.protobuf.Duration();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Duration message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.Duration} message Duration
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Duration.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Duration to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Duration
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Duration.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Duration;
            })();
    
            protobuf.FileDescriptorSet = (function() {
    
                /**
                 * Properties of a FileDescriptorSet.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorSet
                 * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
                 */
    
                /**
                 * Constructs a new FileDescriptorSet.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorSet.
                 * @implements IFileDescriptorSet
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 */
                function FileDescriptorSet(properties) {
                    this.file = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorSet file.
                 * @member {Array.<google.protobuf.IFileDescriptorProto>} file
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 */
                FileDescriptorSet.prototype.file = $util.emptyArray;
    
                /**
                 * Creates a new FileDescriptorSet instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
                 */
                FileDescriptorSet.create = function create(properties) {
                    return new FileDescriptorSet(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.file != null && message.file.length)
                        for (var i = 0; i < message.file.length; ++i)
                            $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.file && message.file.length))
                                message.file = [];
                            message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorSet message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.file != null && message.hasOwnProperty("file")) {
                        if (!Array.isArray(message.file))
                            return "file: array expected";
                        for (var i = 0; i < message.file.length; ++i) {
                            var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                            if (error)
                                return "file." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 */
                FileDescriptorSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorSet)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorSet();
                    if (object.file) {
                        if (!Array.isArray(object.file))
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                        message.file = [];
                        for (var i = 0; i < object.file.length; ++i) {
                            if (typeof object.file[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                            message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorSet.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.file = [];
                    if (message.file && message.file.length) {
                        object.file = [];
                        for (var j = 0; j < message.file.length; ++j)
                            object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorSet to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FileDescriptorSet;
            })();
    
            protobuf.FileDescriptorProto = (function() {
    
                /**
                 * Properties of a FileDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorProto
                 * @property {string|null} [name] FileDescriptorProto name
                 * @property {string|null} ["package"] FileDescriptorProto package
                 * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
                 * @property {Array.<number>|null} [publicDependency] FileDescriptorProto publicDependency
                 * @property {Array.<number>|null} [weakDependency] FileDescriptorProto weakDependency
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [messageType] FileDescriptorProto messageType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] FileDescriptorProto enumType
                 * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
                 * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
                 * @property {google.protobuf.ISourceCodeInfo|null} [sourceCodeInfo] FileDescriptorProto sourceCodeInfo
                 * @property {string|null} [syntax] FileDescriptorProto syntax
                 */
    
                /**
                 * Constructs a new FileDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorProto.
                 * @implements IFileDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 */
                function FileDescriptorProto(properties) {
                    this.dependency = [];
                    this.publicDependency = [];
                    this.weakDependency = [];
                    this.messageType = [];
                    this.enumType = [];
                    this.service = [];
                    this.extension = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.name = "";
    
                /**
                 * FileDescriptorProto package.
                 * @member {string} package
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype["package"] = "";
    
                /**
                 * FileDescriptorProto dependency.
                 * @member {Array.<string>} dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto publicDependency.
                 * @member {Array.<number>} publicDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.publicDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto weakDependency.
                 * @member {Array.<number>} weakDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.weakDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto messageType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} messageType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.messageType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto service.
                 * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.service = $util.emptyArray;
    
                /**
                 * FileDescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * FileDescriptorProto options.
                 * @member {google.protobuf.IFileOptions|null|undefined} options
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.options = null;
    
                /**
                 * FileDescriptorProto sourceCodeInfo.
                 * @member {google.protobuf.ISourceCodeInfo|null|undefined} sourceCodeInfo
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.sourceCodeInfo = null;
    
                /**
                 * FileDescriptorProto syntax.
                 * @member {string} syntax
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.syntax = "";
    
                /**
                 * Creates a new FileDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
                 */
                FileDescriptorProto.create = function create(properties) {
                    return new FileDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                    if (message.dependency != null && message.dependency.length)
                        for (var i = 0; i < message.dependency.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                    if (message.messageType != null && message.messageType.length)
                        for (var i = 0; i < message.messageType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.messageType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.service != null && message.service.length)
                        for (var i = 0; i < message.service.length; ++i)
                            $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.sourceCodeInfo != null && Object.hasOwnProperty.call(message, "sourceCodeInfo"))
                        $root.google.protobuf.SourceCodeInfo.encode(message.sourceCodeInfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.publicDependency != null && message.publicDependency.length)
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.publicDependency[i]);
                    if (message.weakDependency != null && message.weakDependency.length)
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weakDependency[i]);
                    if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message["package"] = reader.string();
                            break;
                        case 3:
                            if (!(message.dependency && message.dependency.length))
                                message.dependency = [];
                            message.dependency.push(reader.string());
                            break;
                        case 10:
                            if (!(message.publicDependency && message.publicDependency.length))
                                message.publicDependency = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.publicDependency.push(reader.int32());
                            } else
                                message.publicDependency.push(reader.int32());
                            break;
                        case 11:
                            if (!(message.weakDependency && message.weakDependency.length))
                                message.weakDependency = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.weakDependency.push(reader.int32());
                            } else
                                message.weakDependency.push(reader.int32());
                            break;
                        case 4:
                            if (!(message.messageType && message.messageType.length))
                                message.messageType = [];
                            message.messageType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.enumType && message.enumType.length))
                                message.enumType = [];
                            message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.service && message.service.length))
                                message.service = [];
                            message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                            break;
                        case 9:
                            message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                            break;
                        case 12:
                            message.syntax = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        if (!$util.isString(message["package"]))
                            return "package: string expected";
                    if (message.dependency != null && message.hasOwnProperty("dependency")) {
                        if (!Array.isArray(message.dependency))
                            return "dependency: array expected";
                        for (var i = 0; i < message.dependency.length; ++i)
                            if (!$util.isString(message.dependency[i]))
                                return "dependency: string[] expected";
                    }
                    if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                        if (!Array.isArray(message.publicDependency))
                            return "publicDependency: array expected";
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            if (!$util.isInteger(message.publicDependency[i]))
                                return "publicDependency: integer[] expected";
                    }
                    if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                        if (!Array.isArray(message.weakDependency))
                            return "weakDependency: array expected";
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            if (!$util.isInteger(message.weakDependency[i]))
                                return "weakDependency: integer[] expected";
                    }
                    if (message.messageType != null && message.hasOwnProperty("messageType")) {
                        if (!Array.isArray(message.messageType))
                            return "messageType: array expected";
                        for (var i = 0; i < message.messageType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                            if (error)
                                return "messageType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.service != null && message.hasOwnProperty("service")) {
                        if (!Array.isArray(message.service))
                            return "service: array expected";
                        for (var i = 0; i < message.service.length; ++i) {
                            var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                            if (error)
                                return "service." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FileOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                        var error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                        if (error)
                            return "sourceCodeInfo." + error;
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        if (!$util.isString(message.syntax))
                            return "syntax: string expected";
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 */
                FileDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object["package"] != null)
                        message["package"] = String(object["package"]);
                    if (object.dependency) {
                        if (!Array.isArray(object.dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                        message.dependency = [];
                        for (var i = 0; i < object.dependency.length; ++i)
                            message.dependency[i] = String(object.dependency[i]);
                    }
                    if (object.publicDependency) {
                        if (!Array.isArray(object.publicDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                        message.publicDependency = [];
                        for (var i = 0; i < object.publicDependency.length; ++i)
                            message.publicDependency[i] = object.publicDependency[i] | 0;
                    }
                    if (object.weakDependency) {
                        if (!Array.isArray(object.weakDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                        message.weakDependency = [];
                        for (var i = 0; i < object.weakDependency.length; ++i)
                            message.weakDependency[i] = object.weakDependency[i] | 0;
                    }
                    if (object.messageType) {
                        if (!Array.isArray(object.messageType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                        message.messageType = [];
                        for (var i = 0; i < object.messageType.length; ++i) {
                            if (typeof object.messageType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                            message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.service) {
                        if (!Array.isArray(object.service))
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                        message.service = [];
                        for (var i = 0; i < object.service.length; ++i) {
                            if (typeof object.service[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                            message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                    }
                    if (object.sourceCodeInfo != null) {
                        if (typeof object.sourceCodeInfo !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                        message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
                    }
                    if (object.syntax != null)
                        message.syntax = String(object.syntax);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.dependency = [];
                        object.messageType = [];
                        object.enumType = [];
                        object.service = [];
                        object.extension = [];
                        object.publicDependency = [];
                        object.weakDependency = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object["package"] = "";
                        object.options = null;
                        object.sourceCodeInfo = null;
                        object.syntax = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        object["package"] = message["package"];
                    if (message.dependency && message.dependency.length) {
                        object.dependency = [];
                        for (var j = 0; j < message.dependency.length; ++j)
                            object.dependency[j] = message.dependency[j];
                    }
                    if (message.messageType && message.messageType.length) {
                        object.messageType = [];
                        for (var j = 0; j < message.messageType.length; ++j)
                            object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.service && message.service.length) {
                        object.service = [];
                        for (var j = 0; j < message.service.length; ++j)
                            object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                        object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
                    if (message.publicDependency && message.publicDependency.length) {
                        object.publicDependency = [];
                        for (var j = 0; j < message.publicDependency.length; ++j)
                            object.publicDependency[j] = message.publicDependency[j];
                    }
                    if (message.weakDependency && message.weakDependency.length) {
                        object.weakDependency = [];
                        for (var j = 0; j < message.weakDependency.length; ++j)
                            object.weakDependency[j] = message.weakDependency[j];
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        object.syntax = message.syntax;
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FileDescriptorProto;
            })();
    
            protobuf.DescriptorProto = (function() {
    
                /**
                 * Properties of a DescriptorProto.
                 * @memberof google.protobuf
                 * @interface IDescriptorProto
                 * @property {string|null} [name] DescriptorProto name
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [nestedType] DescriptorProto nestedType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] DescriptorProto enumType
                 * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extensionRange] DescriptorProto extensionRange
                 * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneofDecl] DescriptorProto oneofDecl
                 * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
                 * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reservedRange] DescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] DescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new DescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a DescriptorProto.
                 * @implements IDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 */
                function DescriptorProto(properties) {
                    this.field = [];
                    this.extension = [];
                    this.nestedType = [];
                    this.enumType = [];
                    this.extensionRange = [];
                    this.oneofDecl = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.name = "";
    
                /**
                 * DescriptorProto field.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.field = $util.emptyArray;
    
                /**
                 * DescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * DescriptorProto nestedType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} nestedType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.nestedType = $util.emptyArray;
    
                /**
                 * DescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * DescriptorProto extensionRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extensionRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extensionRange = $util.emptyArray;
    
                /**
                 * DescriptorProto oneofDecl.
                 * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneofDecl
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.oneofDecl = $util.emptyArray;
    
                /**
                 * DescriptorProto options.
                 * @member {google.protobuf.IMessageOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.options = null;
    
                /**
                 * DescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reservedRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * DescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new DescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
                 */
                DescriptorProto.create = function create(properties) {
                    return new DescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.field != null && message.field.length)
                        for (var i = 0; i < message.field.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.nestedType != null && message.nestedType.length)
                        for (var i = 0; i < message.nestedType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.nestedType[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.extensionRange != null && message.extensionRange.length)
                        for (var i = 0; i < message.extensionRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extensionRange[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.oneofDecl != null && message.oneofDecl.length)
                        for (var i = 0; i < message.oneofDecl.length; ++i)
                            $root.google.protobuf.OneofDescriptorProto.encode(message.oneofDecl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.field && message.field.length))
                                message.field = [];
                            message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            if (!(message.nestedType && message.nestedType.length))
                                message.nestedType = [];
                            message.nestedType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 4:
                            if (!(message.enumType && message.enumType.length))
                                message.enumType = [];
                            message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.extensionRange && message.extensionRange.length))
                                message.extensionRange = [];
                            message.extensionRange.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            if (!(message.oneofDecl && message.oneofDecl.length))
                                message.oneofDecl = [];
                            message.oneofDecl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                            break;
                        case 9:
                            if (!(message.reservedRange && message.reservedRange.length))
                                message.reservedRange = [];
                            message.reservedRange.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                            break;
                        case 10:
                            if (!(message.reservedName && message.reservedName.length))
                                message.reservedName = [];
                            message.reservedName.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.field != null && message.hasOwnProperty("field")) {
                        if (!Array.isArray(message.field))
                            return "field: array expected";
                        for (var i = 0; i < message.field.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                            if (error)
                                return "field." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                        if (!Array.isArray(message.nestedType))
                            return "nestedType: array expected";
                        for (var i = 0; i < message.nestedType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                            if (error)
                                return "nestedType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                        if (!Array.isArray(message.extensionRange))
                            return "extensionRange: array expected";
                        for (var i = 0; i < message.extensionRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                            if (error)
                                return "extensionRange." + error;
                        }
                    }
                    if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                        if (!Array.isArray(message.oneofDecl))
                            return "oneofDecl: array expected";
                        for (var i = 0; i < message.oneofDecl.length; ++i) {
                            var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                            if (error)
                                return "oneofDecl." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MessageOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 */
                DescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.field) {
                        if (!Array.isArray(object.field))
                            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                        message.field = [];
                        for (var i = 0; i < object.field.length; ++i) {
                            if (typeof object.field[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                            message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.nestedType) {
                        if (!Array.isArray(object.nestedType))
                            throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                        message.nestedType = [];
                        for (var i = 0; i < object.nestedType.length; ++i) {
                            if (typeof object.nestedType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                            message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.extensionRange) {
                        if (!Array.isArray(object.extensionRange))
                            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                        message.extensionRange = [];
                        for (var i = 0; i < object.extensionRange.length; ++i) {
                            if (typeof object.extensionRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                            message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                        }
                    }
                    if (object.oneofDecl) {
                        if (!Array.isArray(object.oneofDecl))
                            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                        message.oneofDecl = [];
                        for (var i = 0; i < object.oneofDecl.length; ++i) {
                            if (typeof object.oneofDecl[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                            message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.DescriptorProto} message DescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.field = [];
                        object.nestedType = [];
                        object.enumType = [];
                        object.extensionRange = [];
                        object.extension = [];
                        object.oneofDecl = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.field && message.field.length) {
                        object.field = [];
                        for (var j = 0; j < message.field.length; ++j)
                            object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                    }
                    if (message.nestedType && message.nestedType.length) {
                        object.nestedType = [];
                        for (var j = 0; j < message.nestedType.length; ++j)
                            object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.extensionRange && message.extensionRange.length) {
                        object.extensionRange = [];
                        for (var j = 0; j < message.extensionRange.length; ++j)
                            object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                    if (message.oneofDecl && message.oneofDecl.length) {
                        object.oneofDecl = [];
                        for (var j = 0; j < message.oneofDecl.length; ++j)
                            object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
                    }
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this DescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                DescriptorProto.ExtensionRange = (function() {
    
                    /**
                     * Properties of an ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IExtensionRange
                     * @property {number|null} [start] ExtensionRange start
                     * @property {number|null} [end] ExtensionRange end
                     * @property {google.protobuf.IExtensionRangeOptions|null} [options] ExtensionRange options
                     */
    
                    /**
                     * Constructs a new ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents an ExtensionRange.
                     * @implements IExtensionRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     */
                    function ExtensionRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExtensionRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.start = 0;
    
                    /**
                     * ExtensionRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.end = 0;
    
                    /**
                     * ExtensionRange options.
                     * @member {google.protobuf.IExtensionRangeOptions|null|undefined} options
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.options = null;
    
                    /**
                     * Creates a new ExtensionRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                     */
                    ExtensionRange.create = function create(properties) {
                        return new ExtensionRange(properties);
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                            $root.google.protobuf.ExtensionRangeOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            case 3:
                                message.options = $root.google.protobuf.ExtensionRangeOptions.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExtensionRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExtensionRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        if (message.options != null && message.hasOwnProperty("options")) {
                            var error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                            if (error)
                                return "options." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     */
                    ExtensionRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        if (object.options != null) {
                            if (typeof object.options !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                            message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExtensionRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                            object.options = null;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        if (message.options != null && message.hasOwnProperty("options"))
                            object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                        return object;
                    };
    
                    /**
                     * Converts this ExtensionRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExtensionRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ExtensionRange;
                })();
    
                DescriptorProto.ReservedRange = (function() {
    
                    /**
                     * Properties of a ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IReservedRange
                     * @property {number|null} [start] ReservedRange start
                     * @property {number|null} [end] ReservedRange end
                     */
    
                    /**
                     * Constructs a new ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents a ReservedRange.
                     * @implements IReservedRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     */
                    function ReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.start = 0;
    
                    /**
                     * ReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new ReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange instance
                     */
                    ReservedRange.create = function create(properties) {
                        return new ReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     */
                    ReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this ReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ReservedRange;
                })();
    
                return DescriptorProto;
            })();
    
            protobuf.ExtensionRangeOptions = (function() {
    
                /**
                 * Properties of an ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @interface IExtensionRangeOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ExtensionRangeOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an ExtensionRangeOptions.
                 * @implements IExtensionRangeOptions
                 * @constructor
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 */
                function ExtensionRangeOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ExtensionRangeOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 */
                ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new ExtensionRangeOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions instance
                 */
                ExtensionRangeOptions.create = function create(properties) {
                    return new ExtensionRangeOptions(properties);
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message, length delimited. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an ExtensionRangeOptions message.
                 * @function verify
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRangeOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an ExtensionRangeOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 */
                ExtensionRangeOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                        return object;
                    var message = new $root.google.protobuf.ExtensionRangeOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an ExtensionRangeOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.ExtensionRangeOptions} message ExtensionRangeOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRangeOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ExtensionRangeOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRangeOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ExtensionRangeOptions;
            })();
    
            protobuf.FieldDescriptorProto = (function() {
    
                /**
                 * Properties of a FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFieldDescriptorProto
                 * @property {string|null} [name] FieldDescriptorProto name
                 * @property {number|null} [number] FieldDescriptorProto number
                 * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
                 * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
                 * @property {string|null} [typeName] FieldDescriptorProto typeName
                 * @property {string|null} [extendee] FieldDescriptorProto extendee
                 * @property {string|null} [defaultValue] FieldDescriptorProto defaultValue
                 * @property {number|null} [oneofIndex] FieldDescriptorProto oneofIndex
                 * @property {string|null} [jsonName] FieldDescriptorProto jsonName
                 * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
                 * @property {boolean|null} [proto3Optional] FieldDescriptorProto proto3Optional
                 */
    
                /**
                 * Constructs a new FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldDescriptorProto.
                 * @implements IFieldDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 */
                function FieldDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.name = "";
    
                /**
                 * FieldDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.number = 0;
    
                /**
                 * FieldDescriptorProto label.
                 * @member {google.protobuf.FieldDescriptorProto.Label} label
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.label = 1;
    
                /**
                 * FieldDescriptorProto type.
                 * @member {google.protobuf.FieldDescriptorProto.Type} type
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type = 1;
    
                /**
                 * FieldDescriptorProto typeName.
                 * @member {string} typeName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.typeName = "";
    
                /**
                 * FieldDescriptorProto extendee.
                 * @member {string} extendee
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.extendee = "";
    
                /**
                 * FieldDescriptorProto defaultValue.
                 * @member {string} defaultValue
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.defaultValue = "";
    
                /**
                 * FieldDescriptorProto oneofIndex.
                 * @member {number} oneofIndex
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.oneofIndex = 0;
    
                /**
                 * FieldDescriptorProto jsonName.
                 * @member {string} jsonName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.jsonName = "";
    
                /**
                 * FieldDescriptorProto options.
                 * @member {google.protobuf.IFieldOptions|null|undefined} options
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.options = null;
    
                /**
                 * FieldDescriptorProto proto3Optional.
                 * @member {boolean} proto3Optional
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.proto3Optional = false;
    
                /**
                 * Creates a new FieldDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
                 */
                FieldDescriptorProto.create = function create(properties) {
                    return new FieldDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                    if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                    if (message.typeName != null && Object.hasOwnProperty.call(message, "typeName"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.typeName);
                    if (message.defaultValue != null && Object.hasOwnProperty.call(message, "defaultValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.defaultValue);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.oneofIndex != null && Object.hasOwnProperty.call(message, "oneofIndex"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneofIndex);
                    if (message.jsonName != null && Object.hasOwnProperty.call(message, "jsonName"))
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.jsonName);
                    if (message.proto3Optional != null && Object.hasOwnProperty.call(message, "proto3Optional"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.proto3Optional);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 3:
                            message.number = reader.int32();
                            break;
                        case 4:
                            message.label = reader.int32();
                            break;
                        case 5:
                            message.type = reader.int32();
                            break;
                        case 6:
                            message.typeName = reader.string();
                            break;
                        case 2:
                            message.extendee = reader.string();
                            break;
                        case 7:
                            message.defaultValue = reader.string();
                            break;
                        case 9:
                            message.oneofIndex = reader.int32();
                            break;
                        case 10:
                            message.jsonName = reader.string();
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                            break;
                        case 17:
                            message.proto3Optional = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        switch (message.label) {
                        default:
                            return "label: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                            break;
                        }
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        if (!$util.isString(message.typeName))
                            return "typeName: string expected";
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        if (!$util.isString(message.extendee))
                            return "extendee: string expected";
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        if (!$util.isString(message.defaultValue))
                            return "defaultValue: string expected";
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        if (!$util.isInteger(message.oneofIndex))
                            return "oneofIndex: integer expected";
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        if (!$util.isString(message.jsonName))
                            return "jsonName: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FieldOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        if (typeof message.proto3Optional !== "boolean")
                            return "proto3Optional: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 */
                FieldDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FieldDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    switch (object.label) {
                    case "LABEL_OPTIONAL":
                    case 1:
                        message.label = 1;
                        break;
                    case "LABEL_REQUIRED":
                    case 2:
                        message.label = 2;
                        break;
                    case "LABEL_REPEATED":
                    case 3:
                        message.label = 3;
                        break;
                    }
                    switch (object.type) {
                    case "TYPE_DOUBLE":
                    case 1:
                        message.type = 1;
                        break;
                    case "TYPE_FLOAT":
                    case 2:
                        message.type = 2;
                        break;
                    case "TYPE_INT64":
                    case 3:
                        message.type = 3;
                        break;
                    case "TYPE_UINT64":
                    case 4:
                        message.type = 4;
                        break;
                    case "TYPE_INT32":
                    case 5:
                        message.type = 5;
                        break;
                    case "TYPE_FIXED64":
                    case 6:
                        message.type = 6;
                        break;
                    case "TYPE_FIXED32":
                    case 7:
                        message.type = 7;
                        break;
                    case "TYPE_BOOL":
                    case 8:
                        message.type = 8;
                        break;
                    case "TYPE_STRING":
                    case 9:
                        message.type = 9;
                        break;
                    case "TYPE_GROUP":
                    case 10:
                        message.type = 10;
                        break;
                    case "TYPE_MESSAGE":
                    case 11:
                        message.type = 11;
                        break;
                    case "TYPE_BYTES":
                    case 12:
                        message.type = 12;
                        break;
                    case "TYPE_UINT32":
                    case 13:
                        message.type = 13;
                        break;
                    case "TYPE_ENUM":
                    case 14:
                        message.type = 14;
                        break;
                    case "TYPE_SFIXED32":
                    case 15:
                        message.type = 15;
                        break;
                    case "TYPE_SFIXED64":
                    case 16:
                        message.type = 16;
                        break;
                    case "TYPE_SINT32":
                    case 17:
                        message.type = 17;
                        break;
                    case "TYPE_SINT64":
                    case 18:
                        message.type = 18;
                        break;
                    }
                    if (object.typeName != null)
                        message.typeName = String(object.typeName);
                    if (object.extendee != null)
                        message.extendee = String(object.extendee);
                    if (object.defaultValue != null)
                        message.defaultValue = String(object.defaultValue);
                    if (object.oneofIndex != null)
                        message.oneofIndex = object.oneofIndex | 0;
                    if (object.jsonName != null)
                        message.jsonName = String(object.jsonName);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                    }
                    if (object.proto3Optional != null)
                        message.proto3Optional = Boolean(object.proto3Optional);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.extendee = "";
                        object.number = 0;
                        object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                        object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                        object.typeName = "";
                        object.defaultValue = "";
                        object.options = null;
                        object.oneofIndex = 0;
                        object.jsonName = "";
                        object.proto3Optional = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        object.extendee = message.extendee;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        object.typeName = message.typeName;
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        object.defaultValue = message.defaultValue;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        object.oneofIndex = message.oneofIndex;
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        object.jsonName = message.jsonName;
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        object.proto3Optional = message.proto3Optional;
                    return object;
                };
    
                /**
                 * Converts this FieldDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Type enum.
                 * @name google.protobuf.FieldDescriptorProto.Type
                 * @enum {number}
                 * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
                 * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
                 * @property {number} TYPE_INT64=3 TYPE_INT64 value
                 * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
                 * @property {number} TYPE_INT32=5 TYPE_INT32 value
                 * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
                 * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
                 * @property {number} TYPE_BOOL=8 TYPE_BOOL value
                 * @property {number} TYPE_STRING=9 TYPE_STRING value
                 * @property {number} TYPE_GROUP=10 TYPE_GROUP value
                 * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
                 * @property {number} TYPE_BYTES=12 TYPE_BYTES value
                 * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
                 * @property {number} TYPE_ENUM=14 TYPE_ENUM value
                 * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
                 * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
                 * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
                 * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
                 */
                FieldDescriptorProto.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                    values[valuesById[2] = "TYPE_FLOAT"] = 2;
                    values[valuesById[3] = "TYPE_INT64"] = 3;
                    values[valuesById[4] = "TYPE_UINT64"] = 4;
                    values[valuesById[5] = "TYPE_INT32"] = 5;
                    values[valuesById[6] = "TYPE_FIXED64"] = 6;
                    values[valuesById[7] = "TYPE_FIXED32"] = 7;
                    values[valuesById[8] = "TYPE_BOOL"] = 8;
                    values[valuesById[9] = "TYPE_STRING"] = 9;
                    values[valuesById[10] = "TYPE_GROUP"] = 10;
                    values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                    values[valuesById[12] = "TYPE_BYTES"] = 12;
                    values[valuesById[13] = "TYPE_UINT32"] = 13;
                    values[valuesById[14] = "TYPE_ENUM"] = 14;
                    values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                    values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                    values[valuesById[17] = "TYPE_SINT32"] = 17;
                    values[valuesById[18] = "TYPE_SINT64"] = 18;
                    return values;
                })();
    
                /**
                 * Label enum.
                 * @name google.protobuf.FieldDescriptorProto.Label
                 * @enum {number}
                 * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
                 * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
                 * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
                 */
                FieldDescriptorProto.Label = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                    values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                    values[valuesById[3] = "LABEL_REPEATED"] = 3;
                    return values;
                })();
    
                return FieldDescriptorProto;
            })();
    
            protobuf.OneofDescriptorProto = (function() {
    
                /**
                 * Properties of an OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IOneofDescriptorProto
                 * @property {string|null} [name] OneofDescriptorProto name
                 * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
                 */
    
                /**
                 * Constructs a new OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofDescriptorProto.
                 * @implements IOneofDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 */
                function OneofDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.name = "";
    
                /**
                 * OneofDescriptorProto options.
                 * @member {google.protobuf.IOneofOptions|null|undefined} options
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new OneofDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance
                 */
                OneofDescriptorProto.create = function create(properties) {
                    return new OneofDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.OneofOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 */
                OneofDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.OneofDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this OneofDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OneofDescriptorProto;
            })();
    
            protobuf.EnumDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumDescriptorProto
                 * @property {string|null} [name] EnumDescriptorProto name
                 * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
                 * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
                 * @property {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>|null} [reservedRange] EnumDescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] EnumDescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumDescriptorProto.
                 * @implements IEnumDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 */
                function EnumDescriptorProto(properties) {
                    this.value = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.name = "";
    
                /**
                 * EnumDescriptorProto value.
                 * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.value = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto options.
                 * @member {google.protobuf.IEnumOptions|null|undefined} options
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.options = null;
    
                /**
                 * EnumDescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>} reservedRange
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new EnumDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
                 */
                EnumDescriptorProto.create = function create(properties) {
                    return new EnumDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.value != null && message.value.length)
                        for (var i = 0; i < message.value.length; ++i)
                            $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.value && message.value.length))
                                message.value = [];
                            message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                            break;
                        case 4:
                            if (!(message.reservedRange && message.reservedRange.length))
                                message.reservedRange = [];
                            message.reservedRange.push($root.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.reservedName && message.reservedName.length))
                                message.reservedName = [];
                            message.reservedName.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.value != null && message.hasOwnProperty("value")) {
                        if (!Array.isArray(message.value))
                            return "value: array expected";
                        for (var i = 0; i < message.value.length; ++i) {
                            var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                            if (error)
                                return "value." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 */
                EnumDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.value) {
                        if (!Array.isArray(object.value))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                        message.value = [];
                        for (var i = 0; i < object.value.length; ++i) {
                            if (typeof object.value[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                            message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.value = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.value && message.value.length) {
                        object.value = [];
                        for (var j = 0; j < message.value.length; ++j)
                            object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                EnumDescriptorProto.EnumReservedRange = (function() {
    
                    /**
                     * Properties of an EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @interface IEnumReservedRange
                     * @property {number|null} [start] EnumReservedRange start
                     * @property {number|null} [end] EnumReservedRange end
                     */
    
                    /**
                     * Constructs a new EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @classdesc Represents an EnumReservedRange.
                     * @implements IEnumReservedRange
                     * @constructor
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     */
                    function EnumReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * EnumReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.start = 0;
    
                    /**
                     * EnumReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new EnumReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange instance
                     */
                    EnumReservedRange.create = function create(properties) {
                        return new EnumReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an EnumReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EnumReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an EnumReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     */
                    EnumReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                            return object;
                        var message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an EnumReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.EnumReservedRange} message EnumReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EnumReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this EnumReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EnumReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return EnumReservedRange;
                })();
    
                return EnumDescriptorProto;
            })();
    
            protobuf.EnumValueDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumValueDescriptorProto
                 * @property {string|null} [name] EnumValueDescriptorProto name
                 * @property {number|null} [number] EnumValueDescriptorProto number
                 * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueDescriptorProto.
                 * @implements IEnumValueDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 */
                function EnumValueDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.name = "";
    
                /**
                 * EnumValueDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.number = 0;
    
                /**
                 * EnumValueDescriptorProto options.
                 * @member {google.protobuf.IEnumValueOptions|null|undefined} options
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new EnumValueDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
                 */
                EnumValueDescriptorProto.create = function create(properties) {
                    return new EnumValueDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.number = reader.int32();
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 */
                EnumValueDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumValueDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.number = 0;
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumValueDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumValueDescriptorProto;
            })();
    
            protobuf.ServiceDescriptorProto = (function() {
    
                /**
                 * Properties of a ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IServiceDescriptorProto
                 * @property {string|null} [name] ServiceDescriptorProto name
                 * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
                 * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
                 */
    
                /**
                 * Constructs a new ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceDescriptorProto.
                 * @implements IServiceDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 */
                function ServiceDescriptorProto(properties) {
                    this.method = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.name = "";
    
                /**
                 * ServiceDescriptorProto method.
                 * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.method = $util.emptyArray;
    
                /**
                 * ServiceDescriptorProto options.
                 * @member {google.protobuf.IServiceOptions|null|undefined} options
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new ServiceDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
                 */
                ServiceDescriptorProto.create = function create(properties) {
                    return new ServiceDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.method != null && message.method.length)
                        for (var i = 0; i < message.method.length; ++i)
                            $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.method && message.method.length))
                                message.method = [];
                            message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.method != null && message.hasOwnProperty("method")) {
                        if (!Array.isArray(message.method))
                            return "method: array expected";
                        for (var i = 0; i < message.method.length; ++i) {
                            var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                            if (error)
                                return "method." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 */
                ServiceDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.ServiceDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.method) {
                        if (!Array.isArray(object.method))
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                        message.method = [];
                        for (var i = 0; i < object.method.length; ++i) {
                            if (typeof object.method[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                            message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.method = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.method && message.method.length) {
                        object.method = [];
                        for (var j = 0; j < message.method.length; ++j)
                            object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this ServiceDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ServiceDescriptorProto;
            })();
    
            protobuf.MethodDescriptorProto = (function() {
    
                /**
                 * Properties of a MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IMethodDescriptorProto
                 * @property {string|null} [name] MethodDescriptorProto name
                 * @property {string|null} [inputType] MethodDescriptorProto inputType
                 * @property {string|null} [outputType] MethodDescriptorProto outputType
                 * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
                 * @property {boolean|null} [clientStreaming] MethodDescriptorProto clientStreaming
                 * @property {boolean|null} [serverStreaming] MethodDescriptorProto serverStreaming
                 */
    
                /**
                 * Constructs a new MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodDescriptorProto.
                 * @implements IMethodDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 */
                function MethodDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.name = "";
    
                /**
                 * MethodDescriptorProto inputType.
                 * @member {string} inputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.inputType = "";
    
                /**
                 * MethodDescriptorProto outputType.
                 * @member {string} outputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.outputType = "";
    
                /**
                 * MethodDescriptorProto options.
                 * @member {google.protobuf.IMethodOptions|null|undefined} options
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.options = null;
    
                /**
                 * MethodDescriptorProto clientStreaming.
                 * @member {boolean} clientStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.clientStreaming = false;
    
                /**
                 * MethodDescriptorProto serverStreaming.
                 * @member {boolean} serverStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.serverStreaming = false;
    
                /**
                 * Creates a new MethodDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
                 */
                MethodDescriptorProto.create = function create(properties) {
                    return new MethodDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.inputType != null && Object.hasOwnProperty.call(message, "inputType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.inputType);
                    if (message.outputType != null && Object.hasOwnProperty.call(message, "outputType"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.outputType);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.clientStreaming != null && Object.hasOwnProperty.call(message, "clientStreaming"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.clientStreaming);
                    if (message.serverStreaming != null && Object.hasOwnProperty.call(message, "serverStreaming"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.serverStreaming);
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.inputType = reader.string();
                            break;
                        case 3:
                            message.outputType = reader.string();
                            break;
                        case 4:
                            message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.clientStreaming = reader.bool();
                            break;
                        case 6:
                            message.serverStreaming = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        if (!$util.isString(message.inputType))
                            return "inputType: string expected";
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        if (!$util.isString(message.outputType))
                            return "outputType: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MethodOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        if (typeof message.clientStreaming !== "boolean")
                            return "clientStreaming: boolean expected";
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        if (typeof message.serverStreaming !== "boolean")
                            return "serverStreaming: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 */
                MethodDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.MethodDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.inputType != null)
                        message.inputType = String(object.inputType);
                    if (object.outputType != null)
                        message.outputType = String(object.outputType);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                    }
                    if (object.clientStreaming != null)
                        message.clientStreaming = Boolean(object.clientStreaming);
                    if (object.serverStreaming != null)
                        message.serverStreaming = Boolean(object.serverStreaming);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.inputType = "";
                        object.outputType = "";
                        object.options = null;
                        object.clientStreaming = false;
                        object.serverStreaming = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        object.inputType = message.inputType;
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        object.outputType = message.outputType;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        object.clientStreaming = message.clientStreaming;
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        object.serverStreaming = message.serverStreaming;
                    return object;
                };
    
                /**
                 * Converts this MethodDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MethodDescriptorProto;
            })();
    
            protobuf.FileOptions = (function() {
    
                /**
                 * Properties of a FileOptions.
                 * @memberof google.protobuf
                 * @interface IFileOptions
                 * @property {string|null} [javaPackage] FileOptions javaPackage
                 * @property {string|null} [javaOuterClassname] FileOptions javaOuterClassname
                 * @property {boolean|null} [javaMultipleFiles] FileOptions javaMultipleFiles
                 * @property {boolean|null} [javaGenerateEqualsAndHash] FileOptions javaGenerateEqualsAndHash
                 * @property {boolean|null} [javaStringCheckUtf8] FileOptions javaStringCheckUtf8
                 * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimizeFor] FileOptions optimizeFor
                 * @property {string|null} [goPackage] FileOptions goPackage
                 * @property {boolean|null} [ccGenericServices] FileOptions ccGenericServices
                 * @property {boolean|null} [javaGenericServices] FileOptions javaGenericServices
                 * @property {boolean|null} [pyGenericServices] FileOptions pyGenericServices
                 * @property {boolean|null} [phpGenericServices] FileOptions phpGenericServices
                 * @property {boolean|null} [deprecated] FileOptions deprecated
                 * @property {boolean|null} [ccEnableArenas] FileOptions ccEnableArenas
                 * @property {string|null} [objcClassPrefix] FileOptions objcClassPrefix
                 * @property {string|null} [csharpNamespace] FileOptions csharpNamespace
                 * @property {string|null} [swiftPrefix] FileOptions swiftPrefix
                 * @property {string|null} [phpClassPrefix] FileOptions phpClassPrefix
                 * @property {string|null} [phpNamespace] FileOptions phpNamespace
                 * @property {string|null} [phpMetadataNamespace] FileOptions phpMetadataNamespace
                 * @property {string|null} [rubyPackage] FileOptions rubyPackage
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FileOptions uninterpretedOption
                 * @property {Array.<google.api.IResourceDescriptor>|null} [".google.api.resourceDefinition"] FileOptions .google.api.resourceDefinition
                 */
    
                /**
                 * Constructs a new FileOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileOptions.
                 * @implements IFileOptions
                 * @constructor
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 */
                function FileOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.resourceDefinition"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileOptions javaPackage.
                 * @member {string} javaPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaPackage = "";
    
                /**
                 * FileOptions javaOuterClassname.
                 * @member {string} javaOuterClassname
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaOuterClassname = "";
    
                /**
                 * FileOptions javaMultipleFiles.
                 * @member {boolean} javaMultipleFiles
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaMultipleFiles = false;
    
                /**
                 * FileOptions javaGenerateEqualsAndHash.
                 * @member {boolean} javaGenerateEqualsAndHash
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenerateEqualsAndHash = false;
    
                /**
                 * FileOptions javaStringCheckUtf8.
                 * @member {boolean} javaStringCheckUtf8
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaStringCheckUtf8 = false;
    
                /**
                 * FileOptions optimizeFor.
                 * @member {google.protobuf.FileOptions.OptimizeMode} optimizeFor
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.optimizeFor = 1;
    
                /**
                 * FileOptions goPackage.
                 * @member {string} goPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.goPackage = "";
    
                /**
                 * FileOptions ccGenericServices.
                 * @member {boolean} ccGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccGenericServices = false;
    
                /**
                 * FileOptions javaGenericServices.
                 * @member {boolean} javaGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenericServices = false;
    
                /**
                 * FileOptions pyGenericServices.
                 * @member {boolean} pyGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.pyGenericServices = false;
    
                /**
                 * FileOptions phpGenericServices.
                 * @member {boolean} phpGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpGenericServices = false;
    
                /**
                 * FileOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.deprecated = false;
    
                /**
                 * FileOptions ccEnableArenas.
                 * @member {boolean} ccEnableArenas
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccEnableArenas = true;
    
                /**
                 * FileOptions objcClassPrefix.
                 * @member {string} objcClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.objcClassPrefix = "";
    
                /**
                 * FileOptions csharpNamespace.
                 * @member {string} csharpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.csharpNamespace = "";
    
                /**
                 * FileOptions swiftPrefix.
                 * @member {string} swiftPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.swiftPrefix = "";
    
                /**
                 * FileOptions phpClassPrefix.
                 * @member {string} phpClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpClassPrefix = "";
    
                /**
                 * FileOptions phpNamespace.
                 * @member {string} phpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpNamespace = "";
    
                /**
                 * FileOptions phpMetadataNamespace.
                 * @member {string} phpMetadataNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpMetadataNamespace = "";
    
                /**
                 * FileOptions rubyPackage.
                 * @member {string} rubyPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.rubyPackage = "";
    
                /**
                 * FileOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * FileOptions .google.api.resourceDefinition.
                 * @member {Array.<google.api.IResourceDescriptor>} .google.api.resourceDefinition
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".google.api.resourceDefinition"] = $util.emptyArray;
    
                /**
                 * Creates a new FileOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FileOptions} FileOptions instance
                 */
                FileOptions.create = function create(properties) {
                    return new FileOptions(properties);
                };
    
                /**
                 * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.javaPackage != null && Object.hasOwnProperty.call(message, "javaPackage"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.javaPackage);
                    if (message.javaOuterClassname != null && Object.hasOwnProperty.call(message, "javaOuterClassname"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.javaOuterClassname);
                    if (message.optimizeFor != null && Object.hasOwnProperty.call(message, "optimizeFor"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimizeFor);
                    if (message.javaMultipleFiles != null && Object.hasOwnProperty.call(message, "javaMultipleFiles"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.javaMultipleFiles);
                    if (message.goPackage != null && Object.hasOwnProperty.call(message, "goPackage"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.goPackage);
                    if (message.ccGenericServices != null && Object.hasOwnProperty.call(message, "ccGenericServices"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.ccGenericServices);
                    if (message.javaGenericServices != null && Object.hasOwnProperty.call(message, "javaGenericServices"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.javaGenericServices);
                    if (message.pyGenericServices != null && Object.hasOwnProperty.call(message, "pyGenericServices"))
                        writer.uint32(/* id 18, wireType 0 =*/144).bool(message.pyGenericServices);
                    if (message.javaGenerateEqualsAndHash != null && Object.hasOwnProperty.call(message, "javaGenerateEqualsAndHash"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.javaGenerateEqualsAndHash);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                    if (message.javaStringCheckUtf8 != null && Object.hasOwnProperty.call(message, "javaStringCheckUtf8"))
                        writer.uint32(/* id 27, wireType 0 =*/216).bool(message.javaStringCheckUtf8);
                    if (message.ccEnableArenas != null && Object.hasOwnProperty.call(message, "ccEnableArenas"))
                        writer.uint32(/* id 31, wireType 0 =*/248).bool(message.ccEnableArenas);
                    if (message.objcClassPrefix != null && Object.hasOwnProperty.call(message, "objcClassPrefix"))
                        writer.uint32(/* id 36, wireType 2 =*/290).string(message.objcClassPrefix);
                    if (message.csharpNamespace != null && Object.hasOwnProperty.call(message, "csharpNamespace"))
                        writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharpNamespace);
                    if (message.swiftPrefix != null && Object.hasOwnProperty.call(message, "swiftPrefix"))
                        writer.uint32(/* id 39, wireType 2 =*/314).string(message.swiftPrefix);
                    if (message.phpClassPrefix != null && Object.hasOwnProperty.call(message, "phpClassPrefix"))
                        writer.uint32(/* id 40, wireType 2 =*/322).string(message.phpClassPrefix);
                    if (message.phpNamespace != null && Object.hasOwnProperty.call(message, "phpNamespace"))
                        writer.uint32(/* id 41, wireType 2 =*/330).string(message.phpNamespace);
                    if (message.phpGenericServices != null && Object.hasOwnProperty.call(message, "phpGenericServices"))
                        writer.uint32(/* id 42, wireType 0 =*/336).bool(message.phpGenericServices);
                    if (message.phpMetadataNamespace != null && Object.hasOwnProperty.call(message, "phpMetadataNamespace"))
                        writer.uint32(/* id 44, wireType 2 =*/354).string(message.phpMetadataNamespace);
                    if (message.rubyPackage != null && Object.hasOwnProperty.call(message, "rubyPackage"))
                        writer.uint32(/* id 45, wireType 2 =*/362).string(message.rubyPackage);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.resourceDefinition"] != null && message[".google.api.resourceDefinition"].length)
                        for (var i = 0; i < message[".google.api.resourceDefinition"].length; ++i)
                            $root.google.api.ResourceDescriptor.encode(message[".google.api.resourceDefinition"][i], writer.uint32(/* id 1053, wireType 2 =*/8426).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.javaPackage = reader.string();
                            break;
                        case 8:
                            message.javaOuterClassname = reader.string();
                            break;
                        case 10:
                            message.javaMultipleFiles = reader.bool();
                            break;
                        case 20:
                            message.javaGenerateEqualsAndHash = reader.bool();
                            break;
                        case 27:
                            message.javaStringCheckUtf8 = reader.bool();
                            break;
                        case 9:
                            message.optimizeFor = reader.int32();
                            break;
                        case 11:
                            message.goPackage = reader.string();
                            break;
                        case 16:
                            message.ccGenericServices = reader.bool();
                            break;
                        case 17:
                            message.javaGenericServices = reader.bool();
                            break;
                        case 18:
                            message.pyGenericServices = reader.bool();
                            break;
                        case 42:
                            message.phpGenericServices = reader.bool();
                            break;
                        case 23:
                            message.deprecated = reader.bool();
                            break;
                        case 31:
                            message.ccEnableArenas = reader.bool();
                            break;
                        case 36:
                            message.objcClassPrefix = reader.string();
                            break;
                        case 37:
                            message.csharpNamespace = reader.string();
                            break;
                        case 39:
                            message.swiftPrefix = reader.string();
                            break;
                        case 40:
                            message.phpClassPrefix = reader.string();
                            break;
                        case 41:
                            message.phpNamespace = reader.string();
                            break;
                        case 44:
                            message.phpMetadataNamespace = reader.string();
                            break;
                        case 45:
                            message.rubyPackage = reader.string();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1053:
                            if (!(message[".google.api.resourceDefinition"] && message[".google.api.resourceDefinition"].length))
                                message[".google.api.resourceDefinition"] = [];
                            message[".google.api.resourceDefinition"].push($root.google.api.ResourceDescriptor.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileOptions message.
                 * @function verify
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        if (!$util.isString(message.javaPackage))
                            return "javaPackage: string expected";
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        if (!$util.isString(message.javaOuterClassname))
                            return "javaOuterClassname: string expected";
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        if (typeof message.javaMultipleFiles !== "boolean")
                            return "javaMultipleFiles: boolean expected";
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                            return "javaGenerateEqualsAndHash: boolean expected";
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        if (typeof message.javaStringCheckUtf8 !== "boolean")
                            return "javaStringCheckUtf8: boolean expected";
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        switch (message.optimizeFor) {
                        default:
                            return "optimizeFor: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        if (!$util.isString(message.goPackage))
                            return "goPackage: string expected";
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        if (typeof message.ccGenericServices !== "boolean")
                            return "ccGenericServices: boolean expected";
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        if (typeof message.javaGenericServices !== "boolean")
                            return "javaGenericServices: boolean expected";
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        if (typeof message.pyGenericServices !== "boolean")
                            return "pyGenericServices: boolean expected";
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        if (typeof message.phpGenericServices !== "boolean")
                            return "phpGenericServices: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        if (typeof message.ccEnableArenas !== "boolean")
                            return "ccEnableArenas: boolean expected";
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        if (!$util.isString(message.objcClassPrefix))
                            return "objcClassPrefix: string expected";
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        if (!$util.isString(message.csharpNamespace))
                            return "csharpNamespace: string expected";
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        if (!$util.isString(message.swiftPrefix))
                            return "swiftPrefix: string expected";
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        if (!$util.isString(message.phpClassPrefix))
                            return "phpClassPrefix: string expected";
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        if (!$util.isString(message.phpNamespace))
                            return "phpNamespace: string expected";
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        if (!$util.isString(message.phpMetadataNamespace))
                            return "phpMetadataNamespace: string expected";
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        if (!$util.isString(message.rubyPackage))
                            return "rubyPackage: string expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.resourceDefinition"] != null && message.hasOwnProperty(".google.api.resourceDefinition")) {
                        if (!Array.isArray(message[".google.api.resourceDefinition"]))
                            return ".google.api.resourceDefinition: array expected";
                        for (var i = 0; i < message[".google.api.resourceDefinition"].length; ++i) {
                            var error = $root.google.api.ResourceDescriptor.verify(message[".google.api.resourceDefinition"][i]);
                            if (error)
                                return ".google.api.resourceDefinition." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileOptions} FileOptions
                 */
                FileOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileOptions)
                        return object;
                    var message = new $root.google.protobuf.FileOptions();
                    if (object.javaPackage != null)
                        message.javaPackage = String(object.javaPackage);
                    if (object.javaOuterClassname != null)
                        message.javaOuterClassname = String(object.javaOuterClassname);
                    if (object.javaMultipleFiles != null)
                        message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
                    if (object.javaGenerateEqualsAndHash != null)
                        message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
                    if (object.javaStringCheckUtf8 != null)
                        message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
                    switch (object.optimizeFor) {
                    case "SPEED":
                    case 1:
                        message.optimizeFor = 1;
                        break;
                    case "CODE_SIZE":
                    case 2:
                        message.optimizeFor = 2;
                        break;
                    case "LITE_RUNTIME":
                    case 3:
                        message.optimizeFor = 3;
                        break;
                    }
                    if (object.goPackage != null)
                        message.goPackage = String(object.goPackage);
                    if (object.ccGenericServices != null)
                        message.ccGenericServices = Boolean(object.ccGenericServices);
                    if (object.javaGenericServices != null)
                        message.javaGenericServices = Boolean(object.javaGenericServices);
                    if (object.pyGenericServices != null)
                        message.pyGenericServices = Boolean(object.pyGenericServices);
                    if (object.phpGenericServices != null)
                        message.phpGenericServices = Boolean(object.phpGenericServices);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.ccEnableArenas != null)
                        message.ccEnableArenas = Boolean(object.ccEnableArenas);
                    if (object.objcClassPrefix != null)
                        message.objcClassPrefix = String(object.objcClassPrefix);
                    if (object.csharpNamespace != null)
                        message.csharpNamespace = String(object.csharpNamespace);
                    if (object.swiftPrefix != null)
                        message.swiftPrefix = String(object.swiftPrefix);
                    if (object.phpClassPrefix != null)
                        message.phpClassPrefix = String(object.phpClassPrefix);
                    if (object.phpNamespace != null)
                        message.phpNamespace = String(object.phpNamespace);
                    if (object.phpMetadataNamespace != null)
                        message.phpMetadataNamespace = String(object.phpMetadataNamespace);
                    if (object.rubyPackage != null)
                        message.rubyPackage = String(object.rubyPackage);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.resourceDefinition"]) {
                        if (!Array.isArray(object[".google.api.resourceDefinition"]))
                            throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: array expected");
                        message[".google.api.resourceDefinition"] = [];
                        for (var i = 0; i < object[".google.api.resourceDefinition"].length; ++i) {
                            if (typeof object[".google.api.resourceDefinition"][i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: object expected");
                            message[".google.api.resourceDefinition"][i] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resourceDefinition"][i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.FileOptions} message FileOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.resourceDefinition"] = [];
                    }
                    if (options.defaults) {
                        object.javaPackage = "";
                        object.javaOuterClassname = "";
                        object.optimizeFor = options.enums === String ? "SPEED" : 1;
                        object.javaMultipleFiles = false;
                        object.goPackage = "";
                        object.ccGenericServices = false;
                        object.javaGenericServices = false;
                        object.pyGenericServices = false;
                        object.javaGenerateEqualsAndHash = false;
                        object.deprecated = false;
                        object.javaStringCheckUtf8 = false;
                        object.ccEnableArenas = true;
                        object.objcClassPrefix = "";
                        object.csharpNamespace = "";
                        object.swiftPrefix = "";
                        object.phpClassPrefix = "";
                        object.phpNamespace = "";
                        object.phpGenericServices = false;
                        object.phpMetadataNamespace = "";
                        object.rubyPackage = "";
                    }
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        object.javaPackage = message.javaPackage;
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        object.javaOuterClassname = message.javaOuterClassname;
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        object.javaMultipleFiles = message.javaMultipleFiles;
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        object.goPackage = message.goPackage;
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        object.ccGenericServices = message.ccGenericServices;
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        object.javaGenericServices = message.javaGenericServices;
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        object.pyGenericServices = message.pyGenericServices;
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        object.ccEnableArenas = message.ccEnableArenas;
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        object.objcClassPrefix = message.objcClassPrefix;
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        object.csharpNamespace = message.csharpNamespace;
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        object.swiftPrefix = message.swiftPrefix;
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        object.phpClassPrefix = message.phpClassPrefix;
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        object.phpNamespace = message.phpNamespace;
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        object.phpGenericServices = message.phpGenericServices;
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        object.phpMetadataNamespace = message.phpMetadataNamespace;
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        object.rubyPackage = message.rubyPackage;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.resourceDefinition"] && message[".google.api.resourceDefinition"].length) {
                        object[".google.api.resourceDefinition"] = [];
                        for (var j = 0; j < message[".google.api.resourceDefinition"].length; ++j)
                            object[".google.api.resourceDefinition"][j] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resourceDefinition"][j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * OptimizeMode enum.
                 * @name google.protobuf.FileOptions.OptimizeMode
                 * @enum {number}
                 * @property {number} SPEED=1 SPEED value
                 * @property {number} CODE_SIZE=2 CODE_SIZE value
                 * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
                 */
                FileOptions.OptimizeMode = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "SPEED"] = 1;
                    values[valuesById[2] = "CODE_SIZE"] = 2;
                    values[valuesById[3] = "LITE_RUNTIME"] = 3;
                    return values;
                })();
    
                return FileOptions;
            })();
    
            protobuf.MessageOptions = (function() {
    
                /**
                 * Properties of a MessageOptions.
                 * @memberof google.protobuf
                 * @interface IMessageOptions
                 * @property {boolean|null} [messageSetWireFormat] MessageOptions messageSetWireFormat
                 * @property {boolean|null} [noStandardDescriptorAccessor] MessageOptions noStandardDescriptorAccessor
                 * @property {boolean|null} [deprecated] MessageOptions deprecated
                 * @property {boolean|null} [mapEntry] MessageOptions mapEntry
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MessageOptions uninterpretedOption
                 * @property {google.api.IResourceDescriptor|null} [".google.api.resource"] MessageOptions .google.api.resource
                 */
    
                /**
                 * Constructs a new MessageOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MessageOptions.
                 * @implements IMessageOptions
                 * @constructor
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 */
                function MessageOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MessageOptions messageSetWireFormat.
                 * @member {boolean} messageSetWireFormat
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.messageSetWireFormat = false;
    
                /**
                 * MessageOptions noStandardDescriptorAccessor.
                 * @member {boolean} noStandardDescriptorAccessor
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.noStandardDescriptorAccessor = false;
    
                /**
                 * MessageOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecated = false;
    
                /**
                 * MessageOptions mapEntry.
                 * @member {boolean} mapEntry
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.mapEntry = false;
    
                /**
                 * MessageOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * MessageOptions .google.api.resource.
                 * @member {google.api.IResourceDescriptor|null|undefined} .google.api.resource
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".google.api.resource"] = null;
    
                /**
                 * Creates a new MessageOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MessageOptions} MessageOptions instance
                 */
                MessageOptions.create = function create(properties) {
                    return new MessageOptions(properties);
                };
    
                /**
                 * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.messageSetWireFormat != null && Object.hasOwnProperty.call(message, "messageSetWireFormat"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.messageSetWireFormat);
                    if (message.noStandardDescriptorAccessor != null && Object.hasOwnProperty.call(message, "noStandardDescriptorAccessor"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.noStandardDescriptorAccessor);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.mapEntry != null && Object.hasOwnProperty.call(message, "mapEntry"))
                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.mapEntry);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.resource"] != null && Object.hasOwnProperty.call(message, ".google.api.resource"))
                        $root.google.api.ResourceDescriptor.encode(message[".google.api.resource"], writer.uint32(/* id 1053, wireType 2 =*/8426).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.messageSetWireFormat = reader.bool();
                            break;
                        case 2:
                            message.noStandardDescriptorAccessor = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 7:
                            message.mapEntry = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1053:
                            message[".google.api.resource"] = $root.google.api.ResourceDescriptor.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MessageOptions message.
                 * @function verify
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MessageOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        if (typeof message.messageSetWireFormat !== "boolean")
                            return "messageSetWireFormat: boolean expected";
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        if (typeof message.noStandardDescriptorAccessor !== "boolean")
                            return "noStandardDescriptorAccessor: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        if (typeof message.mapEntry !== "boolean")
                            return "mapEntry: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource")) {
                        var error = $root.google.api.ResourceDescriptor.verify(message[".google.api.resource"]);
                        if (error)
                            return ".google.api.resource." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 */
                MessageOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MessageOptions)
                        return object;
                    var message = new $root.google.protobuf.MessageOptions();
                    if (object.messageSetWireFormat != null)
                        message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
                    if (object.noStandardDescriptorAccessor != null)
                        message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.mapEntry != null)
                        message.mapEntry = Boolean(object.mapEntry);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.resource"] != null) {
                        if (typeof object[".google.api.resource"] !== "object")
                            throw TypeError(".google.protobuf.MessageOptions..google.api.resource: object expected");
                        message[".google.api.resource"] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resource"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.MessageOptions} message MessageOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MessageOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.messageSetWireFormat = false;
                        object.noStandardDescriptorAccessor = false;
                        object.deprecated = false;
                        object.mapEntry = false;
                        object[".google.api.resource"] = null;
                    }
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        object.messageSetWireFormat = message.messageSetWireFormat;
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        object.mapEntry = message.mapEntry;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource"))
                        object[".google.api.resource"] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resource"], options);
                    return object;
                };
    
                /**
                 * Converts this MessageOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MessageOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MessageOptions;
            })();
    
            protobuf.FieldOptions = (function() {
    
                /**
                 * Properties of a FieldOptions.
                 * @memberof google.protobuf
                 * @interface IFieldOptions
                 * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
                 * @property {boolean|null} [packed] FieldOptions packed
                 * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
                 * @property {boolean|null} [lazy] FieldOptions lazy
                 * @property {boolean|null} [deprecated] FieldOptions deprecated
                 * @property {boolean|null} [weak] FieldOptions weak
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FieldOptions uninterpretedOption
                 * @property {Array.<google.api.FieldBehavior>|null} [".google.api.fieldBehavior"] FieldOptions .google.api.fieldBehavior
                 * @property {google.api.IResourceReference|null} [".google.api.resourceReference"] FieldOptions .google.api.resourceReference
                 */
    
                /**
                 * Constructs a new FieldOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldOptions.
                 * @implements IFieldOptions
                 * @constructor
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 */
                function FieldOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.fieldBehavior"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldOptions ctype.
                 * @member {google.protobuf.FieldOptions.CType} ctype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.ctype = 0;
    
                /**
                 * FieldOptions packed.
                 * @member {boolean} packed
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.packed = false;
    
                /**
                 * FieldOptions jstype.
                 * @member {google.protobuf.FieldOptions.JSType} jstype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.jstype = 0;
    
                /**
                 * FieldOptions lazy.
                 * @member {boolean} lazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.lazy = false;
    
                /**
                 * FieldOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.deprecated = false;
    
                /**
                 * FieldOptions weak.
                 * @member {boolean} weak
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.weak = false;
    
                /**
                 * FieldOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * FieldOptions .google.api.fieldBehavior.
                 * @member {Array.<google.api.FieldBehavior>} .google.api.fieldBehavior
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".google.api.fieldBehavior"] = $util.emptyArray;
    
                /**
                 * FieldOptions .google.api.resourceReference.
                 * @member {google.api.IResourceReference|null|undefined} .google.api.resourceReference
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".google.api.resourceReference"] = null;
    
                /**
                 * Creates a new FieldOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FieldOptions} FieldOptions instance
                 */
                FieldOptions.create = function create(properties) {
                    return new FieldOptions(properties);
                };
    
                /**
                 * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                    if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                    if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                    if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.fieldBehavior"] != null && message[".google.api.fieldBehavior"].length) {
                        writer.uint32(/* id 1052, wireType 2 =*/8418).fork();
                        for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                            writer.int32(message[".google.api.fieldBehavior"][i]);
                        writer.ldelim();
                    }
                    if (message[".google.api.resourceReference"] != null && Object.hasOwnProperty.call(message, ".google.api.resourceReference"))
                        $root.google.api.ResourceReference.encode(message[".google.api.resourceReference"], writer.uint32(/* id 1055, wireType 2 =*/8442).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.ctype = reader.int32();
                            break;
                        case 2:
                            message.packed = reader.bool();
                            break;
                        case 6:
                            message.jstype = reader.int32();
                            break;
                        case 5:
                            message.lazy = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 10:
                            message.weak = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1052:
                            if (!(message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length))
                                message[".google.api.fieldBehavior"] = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message[".google.api.fieldBehavior"].push(reader.int32());
                            } else
                                message[".google.api.fieldBehavior"].push(reader.int32());
                            break;
                        case 1055:
                            message[".google.api.resourceReference"] = $root.google.api.ResourceReference.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldOptions message.
                 * @function verify
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        switch (message.ctype) {
                        default:
                            return "ctype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        if (typeof message.packed !== "boolean")
                            return "packed: boolean expected";
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        switch (message.jstype) {
                        default:
                            return "jstype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        if (typeof message.lazy !== "boolean")
                            return "lazy: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        if (typeof message.weak !== "boolean")
                            return "weak: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.fieldBehavior"] != null && message.hasOwnProperty(".google.api.fieldBehavior")) {
                        if (!Array.isArray(message[".google.api.fieldBehavior"]))
                            return ".google.api.fieldBehavior: array expected";
                        for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                            switch (message[".google.api.fieldBehavior"][i]) {
                            default:
                                return ".google.api.fieldBehavior: enum value[] expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                                break;
                            }
                    }
                    if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference")) {
                        var error = $root.google.api.ResourceReference.verify(message[".google.api.resourceReference"]);
                        if (error)
                            return ".google.api.resourceReference." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 */
                FieldOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldOptions)
                        return object;
                    var message = new $root.google.protobuf.FieldOptions();
                    switch (object.ctype) {
                    case "STRING":
                    case 0:
                        message.ctype = 0;
                        break;
                    case "CORD":
                    case 1:
                        message.ctype = 1;
                        break;
                    case "STRING_PIECE":
                    case 2:
                        message.ctype = 2;
                        break;
                    }
                    if (object.packed != null)
                        message.packed = Boolean(object.packed);
                    switch (object.jstype) {
                    case "JS_NORMAL":
                    case 0:
                        message.jstype = 0;
                        break;
                    case "JS_STRING":
                    case 1:
                        message.jstype = 1;
                        break;
                    case "JS_NUMBER":
                    case 2:
                        message.jstype = 2;
                        break;
                    }
                    if (object.lazy != null)
                        message.lazy = Boolean(object.lazy);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.weak != null)
                        message.weak = Boolean(object.weak);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.fieldBehavior"]) {
                        if (!Array.isArray(object[".google.api.fieldBehavior"]))
                            throw TypeError(".google.protobuf.FieldOptions..google.api.fieldBehavior: array expected");
                        message[".google.api.fieldBehavior"] = [];
                        for (var i = 0; i < object[".google.api.fieldBehavior"].length; ++i)
                            switch (object[".google.api.fieldBehavior"][i]) {
                            default:
                            case "FIELD_BEHAVIOR_UNSPECIFIED":
                            case 0:
                                message[".google.api.fieldBehavior"][i] = 0;
                                break;
                            case "OPTIONAL":
                            case 1:
                                message[".google.api.fieldBehavior"][i] = 1;
                                break;
                            case "REQUIRED":
                            case 2:
                                message[".google.api.fieldBehavior"][i] = 2;
                                break;
                            case "OUTPUT_ONLY":
                            case 3:
                                message[".google.api.fieldBehavior"][i] = 3;
                                break;
                            case "INPUT_ONLY":
                            case 4:
                                message[".google.api.fieldBehavior"][i] = 4;
                                break;
                            case "IMMUTABLE":
                            case 5:
                                message[".google.api.fieldBehavior"][i] = 5;
                                break;
                            }
                    }
                    if (object[".google.api.resourceReference"] != null) {
                        if (typeof object[".google.api.resourceReference"] !== "object")
                            throw TypeError(".google.protobuf.FieldOptions..google.api.resourceReference: object expected");
                        message[".google.api.resourceReference"] = $root.google.api.ResourceReference.fromObject(object[".google.api.resourceReference"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.FieldOptions} message FieldOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.fieldBehavior"] = [];
                    }
                    if (options.defaults) {
                        object.ctype = options.enums === String ? "STRING" : 0;
                        object.packed = false;
                        object.deprecated = false;
                        object.lazy = false;
                        object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                        object.weak = false;
                        object[".google.api.resourceReference"] = null;
                    }
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        object.packed = message.packed;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        object.lazy = message.lazy;
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        object.weak = message.weak;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length) {
                        object[".google.api.fieldBehavior"] = [];
                        for (var j = 0; j < message[".google.api.fieldBehavior"].length; ++j)
                            object[".google.api.fieldBehavior"][j] = options.enums === String ? $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] : message[".google.api.fieldBehavior"][j];
                    }
                    if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference"))
                        object[".google.api.resourceReference"] = $root.google.api.ResourceReference.toObject(message[".google.api.resourceReference"], options);
                    return object;
                };
    
                /**
                 * Converts this FieldOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * CType enum.
                 * @name google.protobuf.FieldOptions.CType
                 * @enum {number}
                 * @property {number} STRING=0 STRING value
                 * @property {number} CORD=1 CORD value
                 * @property {number} STRING_PIECE=2 STRING_PIECE value
                 */
                FieldOptions.CType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STRING"] = 0;
                    values[valuesById[1] = "CORD"] = 1;
                    values[valuesById[2] = "STRING_PIECE"] = 2;
                    return values;
                })();
    
                /**
                 * JSType enum.
                 * @name google.protobuf.FieldOptions.JSType
                 * @enum {number}
                 * @property {number} JS_NORMAL=0 JS_NORMAL value
                 * @property {number} JS_STRING=1 JS_STRING value
                 * @property {number} JS_NUMBER=2 JS_NUMBER value
                 */
                FieldOptions.JSType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "JS_NORMAL"] = 0;
                    values[valuesById[1] = "JS_STRING"] = 1;
                    values[valuesById[2] = "JS_NUMBER"] = 2;
                    return values;
                })();
    
                return FieldOptions;
            })();
    
            protobuf.OneofOptions = (function() {
    
                /**
                 * Properties of an OneofOptions.
                 * @memberof google.protobuf
                 * @interface IOneofOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] OneofOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new OneofOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofOptions.
                 * @implements IOneofOptions
                 * @constructor
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 */
                function OneofOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 */
                OneofOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new OneofOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 * @returns {google.protobuf.OneofOptions} OneofOptions instance
                 */
                OneofOptions.create = function create(properties) {
                    return new OneofOptions(properties);
                };
    
                /**
                 * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofOptions message.
                 * @function verify
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 */
                OneofOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofOptions)
                        return object;
                    var message = new $root.google.protobuf.OneofOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.OneofOptions} message OneofOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this OneofOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OneofOptions;
            })();
    
            protobuf.EnumOptions = (function() {
    
                /**
                 * Properties of an EnumOptions.
                 * @memberof google.protobuf
                 * @interface IEnumOptions
                 * @property {boolean|null} [allowAlias] EnumOptions allowAlias
                 * @property {boolean|null} [deprecated] EnumOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumOptions.
                 * @implements IEnumOptions
                 * @constructor
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 */
                function EnumOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumOptions allowAlias.
                 * @member {boolean} allowAlias
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.allowAlias = false;
    
                /**
                 * EnumOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecated = false;
    
                /**
                 * EnumOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumOptions} EnumOptions instance
                 */
                EnumOptions.create = function create(properties) {
                    return new EnumOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.allowAlias != null && Object.hasOwnProperty.call(message, "allowAlias"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allowAlias);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.allowAlias = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        if (typeof message.allowAlias !== "boolean")
                            return "allowAlias: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 */
                EnumOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumOptions();
                    if (object.allowAlias != null)
                        message.allowAlias = Boolean(object.allowAlias);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.EnumOptions} message EnumOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.allowAlias = false;
                        object.deprecated = false;
                    }
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        object.allowAlias = message.allowAlias;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumOptions;
            })();
    
            protobuf.EnumValueOptions = (function() {
    
                /**
                 * Properties of an EnumValueOptions.
                 * @memberof google.protobuf
                 * @interface IEnumValueOptions
                 * @property {boolean|null} [deprecated] EnumValueOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumValueOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumValueOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueOptions.
                 * @implements IEnumValueOptions
                 * @constructor
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 */
                function EnumValueOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.deprecated = false;
    
                /**
                 * EnumValueOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumValueOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
                 */
                EnumValueOptions.create = function create(properties) {
                    return new EnumValueOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 */
                EnumValueOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumValueOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults)
                        object.deprecated = false;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumValueOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumValueOptions;
            })();
    
            protobuf.ServiceOptions = (function() {
    
                /**
                 * Properties of a ServiceOptions.
                 * @memberof google.protobuf
                 * @interface IServiceOptions
                 * @property {boolean|null} [deprecated] ServiceOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ServiceOptions uninterpretedOption
                 * @property {string|null} [".google.api.defaultHost"] ServiceOptions .google.api.defaultHost
                 * @property {string|null} [".google.api.oauthScopes"] ServiceOptions .google.api.oauthScopes
                 */
    
                /**
                 * Constructs a new ServiceOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceOptions.
                 * @implements IServiceOptions
                 * @constructor
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 */
                function ServiceOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.deprecated = false;
    
                /**
                 * ServiceOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * ServiceOptions .google.api.defaultHost.
                 * @member {string} .google.api.defaultHost
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.defaultHost"] = "";
    
                /**
                 * ServiceOptions .google.api.oauthScopes.
                 * @member {string} .google.api.oauthScopes
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.oauthScopes"] = "";
    
                /**
                 * Creates a new ServiceOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
                 */
                ServiceOptions.create = function create(properties) {
                    return new ServiceOptions(properties);
                };
    
                /**
                 * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.defaultHost"] != null && Object.hasOwnProperty.call(message, ".google.api.defaultHost"))
                        writer.uint32(/* id 1049, wireType 2 =*/8394).string(message[".google.api.defaultHost"]);
                    if (message[".google.api.oauthScopes"] != null && Object.hasOwnProperty.call(message, ".google.api.oauthScopes"))
                        writer.uint32(/* id 1050, wireType 2 =*/8402).string(message[".google.api.oauthScopes"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1049:
                            message[".google.api.defaultHost"] = reader.string();
                            break;
                        case 1050:
                            message[".google.api.oauthScopes"] = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceOptions message.
                 * @function verify
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        if (!$util.isString(message[".google.api.defaultHost"]))
                            return ".google.api.defaultHost: string expected";
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        if (!$util.isString(message[".google.api.oauthScopes"]))
                            return ".google.api.oauthScopes: string expected";
                    return null;
                };
    
                /**
                 * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 */
                ServiceOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceOptions)
                        return object;
                    var message = new $root.google.protobuf.ServiceOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.defaultHost"] != null)
                        message[".google.api.defaultHost"] = String(object[".google.api.defaultHost"]);
                    if (object[".google.api.oauthScopes"] != null)
                        message[".google.api.oauthScopes"] = String(object[".google.api.oauthScopes"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.ServiceOptions} message ServiceOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object[".google.api.defaultHost"] = "";
                        object[".google.api.oauthScopes"] = "";
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        object[".google.api.defaultHost"] = message[".google.api.defaultHost"];
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        object[".google.api.oauthScopes"] = message[".google.api.oauthScopes"];
                    return object;
                };
    
                /**
                 * Converts this ServiceOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ServiceOptions;
            })();
    
            protobuf.MethodOptions = (function() {
    
                /**
                 * Properties of a MethodOptions.
                 * @memberof google.protobuf
                 * @interface IMethodOptions
                 * @property {boolean|null} [deprecated] MethodOptions deprecated
                 * @property {google.protobuf.MethodOptions.IdempotencyLevel|null} [idempotencyLevel] MethodOptions idempotencyLevel
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MethodOptions uninterpretedOption
                 * @property {google.api.IHttpRule|null} [".google.api.http"] MethodOptions .google.api.http
                 * @property {Array.<string>|null} [".google.api.methodSignature"] MethodOptions .google.api.methodSignature
                 * @property {google.longrunning.IOperationInfo|null} [".google.longrunning.operationInfo"] MethodOptions .google.longrunning.operationInfo
                 */
    
                /**
                 * Constructs a new MethodOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodOptions.
                 * @implements IMethodOptions
                 * @constructor
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 */
                function MethodOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.methodSignature"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.deprecated = false;
    
                /**
                 * MethodOptions idempotencyLevel.
                 * @member {google.protobuf.MethodOptions.IdempotencyLevel} idempotencyLevel
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.idempotencyLevel = 0;
    
                /**
                 * MethodOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * MethodOptions .google.api.http.
                 * @member {google.api.IHttpRule|null|undefined} .google.api.http
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.http"] = null;
    
                /**
                 * MethodOptions .google.api.methodSignature.
                 * @member {Array.<string>} .google.api.methodSignature
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.methodSignature"] = $util.emptyArray;
    
                /**
                 * MethodOptions .google.longrunning.operationInfo.
                 * @member {google.longrunning.IOperationInfo|null|undefined} .google.longrunning.operationInfo
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.longrunning.operationInfo"] = null;
    
                /**
                 * Creates a new MethodOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MethodOptions} MethodOptions instance
                 */
                MethodOptions.create = function create(properties) {
                    return new MethodOptions(properties);
                };
    
                /**
                 * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.idempotencyLevel != null && Object.hasOwnProperty.call(message, "idempotencyLevel"))
                        writer.uint32(/* id 34, wireType 0 =*/272).int32(message.idempotencyLevel);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.longrunning.operationInfo"] != null && Object.hasOwnProperty.call(message, ".google.longrunning.operationInfo"))
                        $root.google.longrunning.OperationInfo.encode(message[".google.longrunning.operationInfo"], writer.uint32(/* id 1049, wireType 2 =*/8394).fork()).ldelim();
                    if (message[".google.api.methodSignature"] != null && message[".google.api.methodSignature"].length)
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            writer.uint32(/* id 1051, wireType 2 =*/8410).string(message[".google.api.methodSignature"][i]);
                    if (message[".google.api.http"] != null && Object.hasOwnProperty.call(message, ".google.api.http"))
                        $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(/* id 72295728, wireType 2 =*/578365826).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33:
                            message.deprecated = reader.bool();
                            break;
                        case 34:
                            message.idempotencyLevel = reader.int32();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 72295728:
                            message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                            break;
                        case 1051:
                            if (!(message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length))
                                message[".google.api.methodSignature"] = [];
                            message[".google.api.methodSignature"].push(reader.string());
                            break;
                        case 1049:
                            message[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodOptions message.
                 * @function verify
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        switch (message.idempotencyLevel) {
                        default:
                            return "idempotencyLevel: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                        var error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                        if (error)
                            return ".google.api.http." + error;
                    }
                    if (message[".google.api.methodSignature"] != null && message.hasOwnProperty(".google.api.methodSignature")) {
                        if (!Array.isArray(message[".google.api.methodSignature"]))
                            return ".google.api.methodSignature: array expected";
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            if (!$util.isString(message[".google.api.methodSignature"][i]))
                                return ".google.api.methodSignature: string[] expected";
                    }
                    if (message[".google.longrunning.operationInfo"] != null && message.hasOwnProperty(".google.longrunning.operationInfo")) {
                        var error = $root.google.longrunning.OperationInfo.verify(message[".google.longrunning.operationInfo"]);
                        if (error)
                            return ".google.longrunning.operationInfo." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 */
                MethodOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodOptions)
                        return object;
                    var message = new $root.google.protobuf.MethodOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    switch (object.idempotencyLevel) {
                    case "IDEMPOTENCY_UNKNOWN":
                    case 0:
                        message.idempotencyLevel = 0;
                        break;
                    case "NO_SIDE_EFFECTS":
                    case 1:
                        message.idempotencyLevel = 1;
                        break;
                    case "IDEMPOTENT":
                    case 2:
                        message.idempotencyLevel = 2;
                        break;
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.http"] != null) {
                        if (typeof object[".google.api.http"] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                        message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
                    }
                    if (object[".google.api.methodSignature"]) {
                        if (!Array.isArray(object[".google.api.methodSignature"]))
                            throw TypeError(".google.protobuf.MethodOptions..google.api.methodSignature: array expected");
                        message[".google.api.methodSignature"] = [];
                        for (var i = 0; i < object[".google.api.methodSignature"].length; ++i)
                            message[".google.api.methodSignature"][i] = String(object[".google.api.methodSignature"][i]);
                    }
                    if (object[".google.longrunning.operationInfo"] != null) {
                        if (typeof object[".google.longrunning.operationInfo"] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions..google.longrunning.operationInfo: object expected");
                        message[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.fromObject(object[".google.longrunning.operationInfo"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.MethodOptions} message MethodOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.methodSignature"] = [];
                    }
                    if (options.defaults) {
                        object.deprecated = false;
                        object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                        object[".google.longrunning.operationInfo"] = null;
                        object[".google.api.http"] = null;
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.longrunning.operationInfo"] != null && message.hasOwnProperty(".google.longrunning.operationInfo"))
                        object[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.toObject(message[".google.longrunning.operationInfo"], options);
                    if (message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length) {
                        object[".google.api.methodSignature"] = [];
                        for (var j = 0; j < message[".google.api.methodSignature"].length; ++j)
                            object[".google.api.methodSignature"][j] = message[".google.api.methodSignature"][j];
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                        object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
                    return object;
                };
    
                /**
                 * Converts this MethodOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * IdempotencyLevel enum.
                 * @name google.protobuf.MethodOptions.IdempotencyLevel
                 * @enum {number}
                 * @property {number} IDEMPOTENCY_UNKNOWN=0 IDEMPOTENCY_UNKNOWN value
                 * @property {number} NO_SIDE_EFFECTS=1 NO_SIDE_EFFECTS value
                 * @property {number} IDEMPOTENT=2 IDEMPOTENT value
                 */
                MethodOptions.IdempotencyLevel = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
                    values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
                    values[valuesById[2] = "IDEMPOTENT"] = 2;
                    return values;
                })();
    
                return MethodOptions;
            })();
    
            protobuf.UninterpretedOption = (function() {
    
                /**
                 * Properties of an UninterpretedOption.
                 * @memberof google.protobuf
                 * @interface IUninterpretedOption
                 * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
                 * @property {string|null} [identifierValue] UninterpretedOption identifierValue
                 * @property {number|Long|null} [positiveIntValue] UninterpretedOption positiveIntValue
                 * @property {number|Long|null} [negativeIntValue] UninterpretedOption negativeIntValue
                 * @property {number|null} [doubleValue] UninterpretedOption doubleValue
                 * @property {Uint8Array|null} [stringValue] UninterpretedOption stringValue
                 * @property {string|null} [aggregateValue] UninterpretedOption aggregateValue
                 */
    
                /**
                 * Constructs a new UninterpretedOption.
                 * @memberof google.protobuf
                 * @classdesc Represents an UninterpretedOption.
                 * @implements IUninterpretedOption
                 * @constructor
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 */
                function UninterpretedOption(properties) {
                    this.name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UninterpretedOption name.
                 * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.name = $util.emptyArray;
    
                /**
                 * UninterpretedOption identifierValue.
                 * @member {string} identifierValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.identifierValue = "";
    
                /**
                 * UninterpretedOption positiveIntValue.
                 * @member {number|Long} positiveIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * UninterpretedOption negativeIntValue.
                 * @member {number|Long} negativeIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * UninterpretedOption doubleValue.
                 * @member {number} doubleValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.doubleValue = 0;
    
                /**
                 * UninterpretedOption stringValue.
                 * @member {Uint8Array} stringValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.stringValue = $util.newBuffer([]);
    
                /**
                 * UninterpretedOption aggregateValue.
                 * @member {string} aggregateValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.aggregateValue = "";
    
                /**
                 * Creates a new UninterpretedOption instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
                 */
                UninterpretedOption.create = function create(properties) {
                    return new UninterpretedOption(properties);
                };
    
                /**
                 * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.name.length)
                        for (var i = 0; i < message.name.length; ++i)
                            $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.identifierValue != null && Object.hasOwnProperty.call(message, "identifierValue"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifierValue);
                    if (message.positiveIntValue != null && Object.hasOwnProperty.call(message, "positiveIntValue"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positiveIntValue);
                    if (message.negativeIntValue != null && Object.hasOwnProperty.call(message, "negativeIntValue"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negativeIntValue);
                    if (message.doubleValue != null && Object.hasOwnProperty.call(message, "doubleValue"))
                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.doubleValue);
                    if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.stringValue);
                    if (message.aggregateValue != null && Object.hasOwnProperty.call(message, "aggregateValue"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregateValue);
                    return writer;
                };
    
                /**
                 * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            if (!(message.name && message.name.length))
                                message.name = [];
                            message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.identifierValue = reader.string();
                            break;
                        case 4:
                            message.positiveIntValue = reader.uint64();
                            break;
                        case 5:
                            message.negativeIntValue = reader.int64();
                            break;
                        case 6:
                            message.doubleValue = reader.double();
                            break;
                        case 7:
                            message.stringValue = reader.bytes();
                            break;
                        case 8:
                            message.aggregateValue = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UninterpretedOption message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UninterpretedOption.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name")) {
                        if (!Array.isArray(message.name))
                            return "name: array expected";
                        for (var i = 0; i < message.name.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                            if (error)
                                return "name." + error;
                        }
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        if (!$util.isString(message.identifierValue))
                            return "identifierValue: string expected";
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                            return "positiveIntValue: integer|Long expected";
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                            return "negativeIntValue: integer|Long expected";
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        if (typeof message.doubleValue !== "number")
                            return "doubleValue: number expected";
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                            return "stringValue: buffer expected";
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        if (!$util.isString(message.aggregateValue))
                            return "aggregateValue: string expected";
                    return null;
                };
    
                /**
                 * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 */
                UninterpretedOption.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption();
                    if (object.name) {
                        if (!Array.isArray(object.name))
                            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                        message.name = [];
                        for (var i = 0; i < object.name.length; ++i) {
                            if (typeof object.name[i] !== "object")
                                throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                            message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                        }
                    }
                    if (object.identifierValue != null)
                        message.identifierValue = String(object.identifierValue);
                    if (object.positiveIntValue != null)
                        if ($util.Long)
                            (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                        else if (typeof object.positiveIntValue === "string")
                            message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                        else if (typeof object.positiveIntValue === "number")
                            message.positiveIntValue = object.positiveIntValue;
                        else if (typeof object.positiveIntValue === "object")
                            message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
                    if (object.negativeIntValue != null)
                        if ($util.Long)
                            (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                        else if (typeof object.negativeIntValue === "string")
                            message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                        else if (typeof object.negativeIntValue === "number")
                            message.negativeIntValue = object.negativeIntValue;
                        else if (typeof object.negativeIntValue === "object")
                            message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
                    if (object.doubleValue != null)
                        message.doubleValue = Number(object.doubleValue);
                    if (object.stringValue != null)
                        if (typeof object.stringValue === "string")
                            $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                        else if (object.stringValue.length)
                            message.stringValue = object.stringValue;
                    if (object.aggregateValue != null)
                        message.aggregateValue = String(object.aggregateValue);
                    return message;
                };
    
                /**
                 * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UninterpretedOption.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.name = [];
                    if (options.defaults) {
                        object.identifierValue = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.positiveIntValue = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.negativeIntValue = options.longs === String ? "0" : 0;
                        object.doubleValue = 0;
                        if (options.bytes === String)
                            object.stringValue = "";
                        else {
                            object.stringValue = [];
                            if (options.bytes !== Array)
                                object.stringValue = $util.newBuffer(object.stringValue);
                        }
                        object.aggregateValue = "";
                    }
                    if (message.name && message.name.length) {
                        object.name = [];
                        for (var j = 0; j < message.name.length; ++j)
                            object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        object.identifierValue = message.identifierValue;
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (typeof message.positiveIntValue === "number")
                            object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                        else
                            object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (typeof message.negativeIntValue === "number")
                            object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                        else
                            object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        object.aggregateValue = message.aggregateValue;
                    return object;
                };
    
                /**
                 * Converts this UninterpretedOption to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UninterpretedOption.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                UninterpretedOption.NamePart = (function() {
    
                    /**
                     * Properties of a NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @interface INamePart
                     * @property {string} namePart NamePart namePart
                     * @property {boolean} isExtension NamePart isExtension
                     */
    
                    /**
                     * Constructs a new NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @classdesc Represents a NamePart.
                     * @implements INamePart
                     * @constructor
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     */
                    function NamePart(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NamePart namePart.
                     * @member {string} namePart
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.namePart = "";
    
                    /**
                     * NamePart isExtension.
                     * @member {boolean} isExtension
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.isExtension = false;
    
                    /**
                     * Creates a new NamePart instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                     */
                    NamePart.create = function create(properties) {
                        return new NamePart(properties);
                    };
    
                    /**
                     * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.namePart);
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isExtension);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.namePart = reader.string();
                                break;
                            case 2:
                                message.isExtension = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("namePart"))
                            throw $util.ProtocolError("missing required 'namePart'", { instance: message });
                        if (!message.hasOwnProperty("isExtension"))
                            throw $util.ProtocolError("missing required 'isExtension'", { instance: message });
                        return message;
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NamePart message.
                     * @function verify
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NamePart.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isString(message.namePart))
                            return "namePart: string expected";
                        if (typeof message.isExtension !== "boolean")
                            return "isExtension: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     */
                    NamePart.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                            return object;
                        var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        if (object.namePart != null)
                            message.namePart = String(object.namePart);
                        if (object.isExtension != null)
                            message.isExtension = Boolean(object.isExtension);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NamePart.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.namePart = "";
                            object.isExtension = false;
                        }
                        if (message.namePart != null && message.hasOwnProperty("namePart"))
                            object.namePart = message.namePart;
                        if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                            object.isExtension = message.isExtension;
                        return object;
                    };
    
                    /**
                     * Converts this NamePart to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NamePart.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NamePart;
                })();
    
                return UninterpretedOption;
            })();
    
            protobuf.SourceCodeInfo = (function() {
    
                /**
                 * Properties of a SourceCodeInfo.
                 * @memberof google.protobuf
                 * @interface ISourceCodeInfo
                 * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
                 */
    
                /**
                 * Constructs a new SourceCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a SourceCodeInfo.
                 * @implements ISourceCodeInfo
                 * @constructor
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 */
                function SourceCodeInfo(properties) {
                    this.location = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SourceCodeInfo location.
                 * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 */
                SourceCodeInfo.prototype.location = $util.emptyArray;
    
                /**
                 * Creates a new SourceCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
                 */
                SourceCodeInfo.create = function create(properties) {
                    return new SourceCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.location != null && message.location.length)
                        for (var i = 0; i < message.location.length; ++i)
                            $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.location && message.location.length))
                                message.location = [];
                            message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SourceCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SourceCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.location != null && message.hasOwnProperty("location")) {
                        if (!Array.isArray(message.location))
                            return "location: array expected";
                        for (var i = 0; i < message.location.length; ++i) {
                            var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                            if (error)
                                return "location." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 */
                SourceCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo();
                    if (object.location) {
                        if (!Array.isArray(object.location))
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                        message.location = [];
                        for (var i = 0; i < object.location.length; ++i) {
                            if (typeof object.location[i] !== "object")
                                throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                            message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SourceCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.location = [];
                    if (message.location && message.location.length) {
                        object.location = [];
                        for (var j = 0; j < message.location.length; ++j)
                            object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SourceCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SourceCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                SourceCodeInfo.Location = (function() {
    
                    /**
                     * Properties of a Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @interface ILocation
                     * @property {Array.<number>|null} [path] Location path
                     * @property {Array.<number>|null} [span] Location span
                     * @property {string|null} [leadingComments] Location leadingComments
                     * @property {string|null} [trailingComments] Location trailingComments
                     * @property {Array.<string>|null} [leadingDetachedComments] Location leadingDetachedComments
                     */
    
                    /**
                     * Constructs a new Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @classdesc Represents a Location.
                     * @implements ILocation
                     * @constructor
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     */
                    function Location(properties) {
                        this.path = [];
                        this.span = [];
                        this.leadingDetachedComments = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Location path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.path = $util.emptyArray;
    
                    /**
                     * Location span.
                     * @member {Array.<number>} span
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.span = $util.emptyArray;
    
                    /**
                     * Location leadingComments.
                     * @member {string} leadingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingComments = "";
    
                    /**
                     * Location trailingComments.
                     * @member {string} trailingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.trailingComments = "";
    
                    /**
                     * Location leadingDetachedComments.
                     * @member {Array.<string>} leadingDetachedComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingDetachedComments = $util.emptyArray;
    
                    /**
                     * Creates a new Location instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                     */
                    Location.create = function create(properties) {
                        return new Location(properties);
                    };
    
                    /**
                     * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.span != null && message.span.length) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork();
                            for (var i = 0; i < message.span.length; ++i)
                                writer.int32(message.span[i]);
                            writer.ldelim();
                        }
                        if (message.leadingComments != null && Object.hasOwnProperty.call(message, "leadingComments"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.leadingComments);
                        if (message.trailingComments != null && Object.hasOwnProperty.call(message, "trailingComments"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailingComments);
                        if (message.leadingDetachedComments != null && message.leadingDetachedComments.length)
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.leadingDetachedComments[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            case 2:
                                if (!(message.span && message.span.length))
                                    message.span = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.span.push(reader.int32());
                                } else
                                    message.span.push(reader.int32());
                                break;
                            case 3:
                                message.leadingComments = reader.string();
                                break;
                            case 4:
                                message.trailingComments = reader.string();
                                break;
                            case 6:
                                if (!(message.leadingDetachedComments && message.leadingDetachedComments.length))
                                    message.leadingDetachedComments = [];
                                message.leadingDetachedComments.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Location message.
                     * @function verify
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Location.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.span != null && message.hasOwnProperty("span")) {
                            if (!Array.isArray(message.span))
                                return "span: array expected";
                            for (var i = 0; i < message.span.length; ++i)
                                if (!$util.isInteger(message.span[i]))
                                    return "span: integer[] expected";
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            if (!$util.isString(message.leadingComments))
                                return "leadingComments: string expected";
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            if (!$util.isString(message.trailingComments))
                                return "trailingComments: string expected";
                        if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                            if (!Array.isArray(message.leadingDetachedComments))
                                return "leadingDetachedComments: array expected";
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                if (!$util.isString(message.leadingDetachedComments[i]))
                                    return "leadingDetachedComments: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Location message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     */
                    Location.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                            return object;
                        var message = new $root.google.protobuf.SourceCodeInfo.Location();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.span) {
                            if (!Array.isArray(object.span))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                            message.span = [];
                            for (var i = 0; i < object.span.length; ++i)
                                message.span[i] = object.span[i] | 0;
                        }
                        if (object.leadingComments != null)
                            message.leadingComments = String(object.leadingComments);
                        if (object.trailingComments != null)
                            message.trailingComments = String(object.trailingComments);
                        if (object.leadingDetachedComments) {
                            if (!Array.isArray(object.leadingDetachedComments))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                            message.leadingDetachedComments = [];
                            for (var i = 0; i < object.leadingDetachedComments.length; ++i)
                                message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Location message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.Location} message Location
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Location.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.path = [];
                            object.span = [];
                            object.leadingDetachedComments = [];
                        }
                        if (options.defaults) {
                            object.leadingComments = "";
                            object.trailingComments = "";
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.span && message.span.length) {
                            object.span = [];
                            for (var j = 0; j < message.span.length; ++j)
                                object.span[j] = message.span[j];
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            object.leadingComments = message.leadingComments;
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            object.trailingComments = message.trailingComments;
                        if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                            object.leadingDetachedComments = [];
                            for (var j = 0; j < message.leadingDetachedComments.length; ++j)
                                object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Location to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Location.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Location;
                })();
    
                return SourceCodeInfo;
            })();
    
            protobuf.GeneratedCodeInfo = (function() {
    
                /**
                 * Properties of a GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @interface IGeneratedCodeInfo
                 * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
                 */
    
                /**
                 * Constructs a new GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a GeneratedCodeInfo.
                 * @implements IGeneratedCodeInfo
                 * @constructor
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 */
                function GeneratedCodeInfo(properties) {
                    this.annotation = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GeneratedCodeInfo annotation.
                 * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 */
                GeneratedCodeInfo.prototype.annotation = $util.emptyArray;
    
                /**
                 * Creates a new GeneratedCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo instance
                 */
                GeneratedCodeInfo.create = function create(properties) {
                    return new GeneratedCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.annotation != null && message.annotation.length)
                        for (var i = 0; i < message.annotation.length; ++i)
                            $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.annotation && message.annotation.length))
                                message.annotation = [];
                            message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GeneratedCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GeneratedCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.annotation != null && message.hasOwnProperty("annotation")) {
                        if (!Array.isArray(message.annotation))
                            return "annotation: array expected";
                        for (var i = 0; i < message.annotation.length; ++i) {
                            var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                            if (error)
                                return "annotation." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 */
                GeneratedCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.GeneratedCodeInfo();
                    if (object.annotation) {
                        if (!Array.isArray(object.annotation))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                        message.annotation = [];
                        for (var i = 0; i < object.annotation.length; ++i) {
                            if (typeof object.annotation[i] !== "object")
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                            message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GeneratedCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.annotation = [];
                    if (message.annotation && message.annotation.length) {
                        object.annotation = [];
                        for (var j = 0; j < message.annotation.length; ++j)
                            object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this GeneratedCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                GeneratedCodeInfo.Annotation = (function() {
    
                    /**
                     * Properties of an Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @interface IAnnotation
                     * @property {Array.<number>|null} [path] Annotation path
                     * @property {string|null} [sourceFile] Annotation sourceFile
                     * @property {number|null} [begin] Annotation begin
                     * @property {number|null} [end] Annotation end
                     */
    
                    /**
                     * Constructs a new Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @classdesc Represents an Annotation.
                     * @implements IAnnotation
                     * @constructor
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     */
                    function Annotation(properties) {
                        this.path = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Annotation path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.path = $util.emptyArray;
    
                    /**
                     * Annotation sourceFile.
                     * @member {string} sourceFile
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.sourceFile = "";
    
                    /**
                     * Annotation begin.
                     * @member {number} begin
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.begin = 0;
    
                    /**
                     * Annotation end.
                     * @member {number} end
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.end = 0;
    
                    /**
                     * Creates a new Annotation instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation instance
                     */
                    Annotation.create = function create(properties) {
                        return new Annotation(properties);
                    };
    
                    /**
                     * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.sourceFile != null && Object.hasOwnProperty.call(message, "sourceFile"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.sourceFile);
                        if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            case 2:
                                message.sourceFile = reader.string();
                                break;
                            case 3:
                                message.begin = reader.int32();
                                break;
                            case 4:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Annotation message.
                     * @function verify
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Annotation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            if (!$util.isString(message.sourceFile))
                                return "sourceFile: string expected";
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            if (!$util.isInteger(message.begin))
                                return "begin: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     */
                    Annotation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                            return object;
                        var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.sourceFile != null)
                            message.sourceFile = String(object.sourceFile);
                        if (object.begin != null)
                            message.begin = object.begin | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Annotation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.path = [];
                        if (options.defaults) {
                            object.sourceFile = "";
                            object.begin = 0;
                            object.end = 0;
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            object.sourceFile = message.sourceFile;
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            object.begin = message.begin;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this Annotation to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Annotation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Annotation;
                })();
    
                return GeneratedCodeInfo;
            })();
    
            protobuf.Any = (function() {
    
                /**
                 * Properties of an Any.
                 * @memberof google.protobuf
                 * @interface IAny
                 * @property {string|null} [type_url] Any type_url
                 * @property {Uint8Array|null} [value] Any value
                 */
    
                /**
                 * Constructs a new Any.
                 * @memberof google.protobuf
                 * @classdesc Represents an Any.
                 * @implements IAny
                 * @constructor
                 * @param {google.protobuf.IAny=} [properties] Properties to set
                 */
                function Any(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Any type_url.
                 * @member {string} type_url
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.type_url = "";
    
                /**
                 * Any value.
                 * @member {Uint8Array} value
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.value = $util.newBuffer([]);
    
                /**
                 * Creates a new Any instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny=} [properties] Properties to set
                 * @returns {google.protobuf.Any} Any instance
                 */
                Any.create = function create(properties) {
                    return new Any(properties);
                };
    
                /**
                 * Encodes the specified Any message. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type_url != null && Object.hasOwnProperty.call(message, "type_url"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type_url);
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified Any message, length delimited. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Any();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.type_url = reader.string();
                            break;
                        case 2:
                            message.value = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Any message.
                 * @function verify
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Any.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        if (!$util.isString(message.type_url))
                            return "type_url: string expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                            return "value: buffer expected";
                    return null;
                };
    
                /**
                 * Creates an Any message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Any} Any
                 */
                Any.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Any)
                        return object;
                    var message = new $root.google.protobuf.Any();
                    if (object.type_url != null)
                        message.type_url = String(object.type_url);
                    if (object.value != null)
                        if (typeof object.value === "string")
                            $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                        else if (object.value.length)
                            message.value = object.value;
                    return message;
                };
    
                /**
                 * Creates a plain object from an Any message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.Any} message Any
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Any.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type_url = "";
                        if (options.bytes === String)
                            object.value = "";
                        else {
                            object.value = [];
                            if (options.bytes !== Array)
                                object.value = $util.newBuffer(object.value);
                        }
                    }
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        object.type_url = message.type_url;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                    return object;
                };
    
                /**
                 * Converts this Any to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Any
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Any.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Any;
            })();
    
            protobuf.Empty = (function() {
    
                /**
                 * Properties of an Empty.
                 * @memberof google.protobuf
                 * @interface IEmpty
                 */
    
                /**
                 * Constructs a new Empty.
                 * @memberof google.protobuf
                 * @classdesc Represents an Empty.
                 * @implements IEmpty
                 * @constructor
                 * @param {google.protobuf.IEmpty=} [properties] Properties to set
                 */
                function Empty(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Creates a new Empty instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty=} [properties] Properties to set
                 * @returns {google.protobuf.Empty} Empty instance
                 */
                Empty.create = function create(properties) {
                    return new Empty(properties);
                };
    
                /**
                 * Encodes the specified Empty message. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Empty.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified Empty message, length delimited. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Empty.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Empty message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Empty} Empty
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Empty.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Empty();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Empty message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Empty} Empty
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Empty.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Empty message.
                 * @function verify
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Empty.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates an Empty message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Empty} Empty
                 */
                Empty.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Empty)
                        return object;
                    return new $root.google.protobuf.Empty();
                };
    
                /**
                 * Creates a plain object from an Empty message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.Empty} message Empty
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Empty.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this Empty to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Empty
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Empty.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Empty;
            })();
    
            protobuf.FieldMask = (function() {
    
                /**
                 * Properties of a FieldMask.
                 * @memberof google.protobuf
                 * @interface IFieldMask
                 * @property {Array.<string>|null} [paths] FieldMask paths
                 */
    
                /**
                 * Constructs a new FieldMask.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldMask.
                 * @implements IFieldMask
                 * @constructor
                 * @param {google.protobuf.IFieldMask=} [properties] Properties to set
                 */
                function FieldMask(properties) {
                    this.paths = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldMask paths.
                 * @member {Array.<string>} paths
                 * @memberof google.protobuf.FieldMask
                 * @instance
                 */
                FieldMask.prototype.paths = $util.emptyArray;
    
                /**
                 * Creates a new FieldMask instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask=} [properties] Properties to set
                 * @returns {google.protobuf.FieldMask} FieldMask instance
                 */
                FieldMask.create = function create(properties) {
                    return new FieldMask(properties);
                };
    
                /**
                 * Encodes the specified FieldMask message. Does not implicitly {@link google.protobuf.FieldMask.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask} message FieldMask message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldMask.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.paths != null && message.paths.length)
                        for (var i = 0; i < message.paths.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.paths[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldMask message, length delimited. Does not implicitly {@link google.protobuf.FieldMask.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask} message FieldMask message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldMask.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldMask message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldMask} FieldMask
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldMask.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldMask();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.paths && message.paths.length))
                                message.paths = [];
                            message.paths.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldMask message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldMask} FieldMask
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldMask.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldMask message.
                 * @function verify
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldMask.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.paths != null && message.hasOwnProperty("paths")) {
                        if (!Array.isArray(message.paths))
                            return "paths: array expected";
                        for (var i = 0; i < message.paths.length; ++i)
                            if (!$util.isString(message.paths[i]))
                                return "paths: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldMask message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldMask} FieldMask
                 */
                FieldMask.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldMask)
                        return object;
                    var message = new $root.google.protobuf.FieldMask();
                    if (object.paths) {
                        if (!Array.isArray(object.paths))
                            throw TypeError(".google.protobuf.FieldMask.paths: array expected");
                        message.paths = [];
                        for (var i = 0; i < object.paths.length; ++i)
                            message.paths[i] = String(object.paths[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldMask message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.FieldMask} message FieldMask
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldMask.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.paths = [];
                    if (message.paths && message.paths.length) {
                        object.paths = [];
                        for (var j = 0; j < message.paths.length; ++j)
                            object.paths[j] = message.paths[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this FieldMask to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldMask
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldMask.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FieldMask;
            })();
    
            protobuf.Timestamp = (function() {
    
                /**
                 * Properties of a Timestamp.
                 * @memberof google.protobuf
                 * @interface ITimestamp
                 * @property {number|Long|null} [seconds] Timestamp seconds
                 * @property {number|null} [nanos] Timestamp nanos
                 */
    
                /**
                 * Constructs a new Timestamp.
                 * @memberof google.protobuf
                 * @classdesc Represents a Timestamp.
                 * @implements ITimestamp
                 * @constructor
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 */
                function Timestamp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Timestamp seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Timestamp nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.nanos = 0;
    
                /**
                 * Creates a new Timestamp instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 * @returns {google.protobuf.Timestamp} Timestamp instance
                 */
                Timestamp.create = function create(properties) {
                    return new Timestamp(properties);
                };
    
                /**
                 * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.seconds = reader.int64();
                            break;
                        case 2:
                            message.nanos = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Timestamp message.
                 * @function verify
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Timestamp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Timestamp} Timestamp
                 */
                Timestamp.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Timestamp)
                        return object;
                    var message = new $root.google.protobuf.Timestamp();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.Timestamp} message Timestamp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Timestamp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Timestamp to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Timestamp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Timestamp;
            })();
    
            protobuf.Struct = (function() {
    
                /**
                 * Properties of a Struct.
                 * @memberof google.protobuf
                 * @interface IStruct
                 * @property {Object.<string,google.protobuf.IValue>|null} [fields] Struct fields
                 */
    
                /**
                 * Constructs a new Struct.
                 * @memberof google.protobuf
                 * @classdesc Represents a Struct.
                 * @implements IStruct
                 * @constructor
                 * @param {google.protobuf.IStruct=} [properties] Properties to set
                 */
                function Struct(properties) {
                    this.fields = {};
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Struct fields.
                 * @member {Object.<string,google.protobuf.IValue>} fields
                 * @memberof google.protobuf.Struct
                 * @instance
                 */
                Struct.prototype.fields = $util.emptyObject;
    
                /**
                 * Creates a new Struct instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {google.protobuf.IStruct=} [properties] Properties to set
                 * @returns {google.protobuf.Struct} Struct instance
                 */
                Struct.create = function create(properties) {
                    return new Struct(properties);
                };
    
                /**
                 * Encodes the specified Struct message. Does not implicitly {@link google.protobuf.Struct.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {google.protobuf.IStruct} message Struct message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Struct.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.fields != null && Object.hasOwnProperty.call(message, "fields"))
                        for (var keys = Object.keys(message.fields), i = 0; i < keys.length; ++i) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                            $root.google.protobuf.Value.encode(message.fields[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                        }
                    return writer;
                };
    
                /**
                 * Encodes the specified Struct message, length delimited. Does not implicitly {@link google.protobuf.Struct.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {google.protobuf.IStruct} message Struct message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Struct.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Struct message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Struct} Struct
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Struct.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Struct(), key;
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            reader.skip().pos++;
                            if (message.fields === $util.emptyObject)
                                message.fields = {};
                            key = reader.string();
                            reader.pos++;
                            message.fields[key] = $root.google.protobuf.Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Struct message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Struct} Struct
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Struct.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Struct message.
                 * @function verify
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Struct.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.fields != null && message.hasOwnProperty("fields")) {
                        if (!$util.isObject(message.fields))
                            return "fields: object expected";
                        var key = Object.keys(message.fields);
                        for (var i = 0; i < key.length; ++i) {
                            var error = $root.google.protobuf.Value.verify(message.fields[key[i]]);
                            if (error)
                                return "fields." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Struct message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Struct} Struct
                 */
                Struct.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Struct)
                        return object;
                    var message = new $root.google.protobuf.Struct();
                    if (object.fields) {
                        if (typeof object.fields !== "object")
                            throw TypeError(".google.protobuf.Struct.fields: object expected");
                        message.fields = {};
                        for (var keys = Object.keys(object.fields), i = 0; i < keys.length; ++i) {
                            if (typeof object.fields[keys[i]] !== "object")
                                throw TypeError(".google.protobuf.Struct.fields: object expected");
                            message.fields[keys[i]] = $root.google.protobuf.Value.fromObject(object.fields[keys[i]]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Struct message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {google.protobuf.Struct} message Struct
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Struct.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.objects || options.defaults)
                        object.fields = {};
                    var keys2;
                    if (message.fields && (keys2 = Object.keys(message.fields)).length) {
                        object.fields = {};
                        for (var j = 0; j < keys2.length; ++j)
                            object.fields[keys2[j]] = $root.google.protobuf.Value.toObject(message.fields[keys2[j]], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Struct to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Struct
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Struct.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Struct;
            })();
    
            protobuf.Value = (function() {
    
                /**
                 * Properties of a Value.
                 * @memberof google.protobuf
                 * @interface IValue
                 * @property {google.protobuf.NullValue|null} [nullValue] Value nullValue
                 * @property {number|null} [numberValue] Value numberValue
                 * @property {string|null} [stringValue] Value stringValue
                 * @property {boolean|null} [boolValue] Value boolValue
                 * @property {google.protobuf.IStruct|null} [structValue] Value structValue
                 * @property {google.protobuf.IListValue|null} [listValue] Value listValue
                 */
    
                /**
                 * Constructs a new Value.
                 * @memberof google.protobuf
                 * @classdesc Represents a Value.
                 * @implements IValue
                 * @constructor
                 * @param {google.protobuf.IValue=} [properties] Properties to set
                 */
                function Value(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Value nullValue.
                 * @member {google.protobuf.NullValue} nullValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.nullValue = 0;
    
                /**
                 * Value numberValue.
                 * @member {number} numberValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.numberValue = 0;
    
                /**
                 * Value stringValue.
                 * @member {string} stringValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.stringValue = "";
    
                /**
                 * Value boolValue.
                 * @member {boolean} boolValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.boolValue = false;
    
                /**
                 * Value structValue.
                 * @member {google.protobuf.IStruct|null|undefined} structValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.structValue = null;
    
                /**
                 * Value listValue.
                 * @member {google.protobuf.IListValue|null|undefined} listValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.listValue = null;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * Value kind.
                 * @member {"nullValue"|"numberValue"|"stringValue"|"boolValue"|"structValue"|"listValue"|undefined} kind
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Object.defineProperty(Value.prototype, "kind", {
                    get: $util.oneOfGetter($oneOfFields = ["nullValue", "numberValue", "stringValue", "boolValue", "structValue", "listValue"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new Value instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {google.protobuf.IValue=} [properties] Properties to set
                 * @returns {google.protobuf.Value} Value instance
                 */
                Value.create = function create(properties) {
                    return new Value(properties);
                };
    
                /**
                 * Encodes the specified Value message. Does not implicitly {@link google.protobuf.Value.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {google.protobuf.IValue} message Value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Value.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.nullValue != null && Object.hasOwnProperty.call(message, "nullValue"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nullValue);
                    if (message.numberValue != null && Object.hasOwnProperty.call(message, "numberValue"))
                        writer.uint32(/* id 2, wireType 1 =*/17).double(message.numberValue);
                    if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.stringValue);
                    if (message.boolValue != null && Object.hasOwnProperty.call(message, "boolValue"))
                        writer.uint32(/* id 4, wireType 0 =*/32).bool(message.boolValue);
                    if (message.structValue != null && Object.hasOwnProperty.call(message, "structValue"))
                        $root.google.protobuf.Struct.encode(message.structValue, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.listValue != null && Object.hasOwnProperty.call(message, "listValue"))
                        $root.google.protobuf.ListValue.encode(message.listValue, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Value message, length delimited. Does not implicitly {@link google.protobuf.Value.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {google.protobuf.IValue} message Value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Value.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Value message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Value} Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Value.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Value();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.nullValue = reader.int32();
                            break;
                        case 2:
                            message.numberValue = reader.double();
                            break;
                        case 3:
                            message.stringValue = reader.string();
                            break;
                        case 4:
                            message.boolValue = reader.bool();
                            break;
                        case 5:
                            message.structValue = $root.google.protobuf.Struct.decode(reader, reader.uint32());
                            break;
                        case 6:
                            message.listValue = $root.google.protobuf.ListValue.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Value message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Value} Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Value.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Value message.
                 * @function verify
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Value.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.nullValue != null && message.hasOwnProperty("nullValue")) {
                        properties.kind = 1;
                        switch (message.nullValue) {
                        default:
                            return "nullValue: enum value expected";
                        case 0:
                            break;
                        }
                    }
                    if (message.numberValue != null && message.hasOwnProperty("numberValue")) {
                        if (properties.kind === 1)
                            return "kind: multiple values";
                        properties.kind = 1;
                        if (typeof message.numberValue !== "number")
                            return "numberValue: number expected";
                    }
                    if (message.stringValue != null && message.hasOwnProperty("stringValue")) {
                        if (properties.kind === 1)
                            return "kind: multiple values";
                        properties.kind = 1;
                        if (!$util.isString(message.stringValue))
                            return "stringValue: string expected";
                    }
                    if (message.boolValue != null && message.hasOwnProperty("boolValue")) {
                        if (properties.kind === 1)
                            return "kind: multiple values";
                        properties.kind = 1;
                        if (typeof message.boolValue !== "boolean")
                            return "boolValue: boolean expected";
                    }
                    if (message.structValue != null && message.hasOwnProperty("structValue")) {
                        if (properties.kind === 1)
                            return "kind: multiple values";
                        properties.kind = 1;
                        {
                            var error = $root.google.protobuf.Struct.verify(message.structValue);
                            if (error)
                                return "structValue." + error;
                        }
                    }
                    if (message.listValue != null && message.hasOwnProperty("listValue")) {
                        if (properties.kind === 1)
                            return "kind: multiple values";
                        properties.kind = 1;
                        {
                            var error = $root.google.protobuf.ListValue.verify(message.listValue);
                            if (error)
                                return "listValue." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Value message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Value} Value
                 */
                Value.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Value)
                        return object;
                    var message = new $root.google.protobuf.Value();
                    switch (object.nullValue) {
                    case "NULL_VALUE":
                    case 0:
                        message.nullValue = 0;
                        break;
                    }
                    if (object.numberValue != null)
                        message.numberValue = Number(object.numberValue);
                    if (object.stringValue != null)
                        message.stringValue = String(object.stringValue);
                    if (object.boolValue != null)
                        message.boolValue = Boolean(object.boolValue);
                    if (object.structValue != null) {
                        if (typeof object.structValue !== "object")
                            throw TypeError(".google.protobuf.Value.structValue: object expected");
                        message.structValue = $root.google.protobuf.Struct.fromObject(object.structValue);
                    }
                    if (object.listValue != null) {
                        if (typeof object.listValue !== "object")
                            throw TypeError(".google.protobuf.Value.listValue: object expected");
                        message.listValue = $root.google.protobuf.ListValue.fromObject(object.listValue);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Value message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {google.protobuf.Value} message Value
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Value.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.nullValue != null && message.hasOwnProperty("nullValue")) {
                        object.nullValue = options.enums === String ? $root.google.protobuf.NullValue[message.nullValue] : message.nullValue;
                        if (options.oneofs)
                            object.kind = "nullValue";
                    }
                    if (message.numberValue != null && message.hasOwnProperty("numberValue")) {
                        object.numberValue = options.json && !isFinite(message.numberValue) ? String(message.numberValue) : message.numberValue;
                        if (options.oneofs)
                            object.kind = "numberValue";
                    }
                    if (message.stringValue != null && message.hasOwnProperty("stringValue")) {
                        object.stringValue = message.stringValue;
                        if (options.oneofs)
                            object.kind = "stringValue";
                    }
                    if (message.boolValue != null && message.hasOwnProperty("boolValue")) {
                        object.boolValue = message.boolValue;
                        if (options.oneofs)
                            object.kind = "boolValue";
                    }
                    if (message.structValue != null && message.hasOwnProperty("structValue")) {
                        object.structValue = $root.google.protobuf.Struct.toObject(message.structValue, options);
                        if (options.oneofs)
                            object.kind = "structValue";
                    }
                    if (message.listValue != null && message.hasOwnProperty("listValue")) {
                        object.listValue = $root.google.protobuf.ListValue.toObject(message.listValue, options);
                        if (options.oneofs)
                            object.kind = "listValue";
                    }
                    return object;
                };
    
                /**
                 * Converts this Value to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Value
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Value.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Value;
            })();
    
            /**
             * NullValue enum.
             * @name google.protobuf.NullValue
             * @enum {number}
             * @property {number} NULL_VALUE=0 NULL_VALUE value
             */
            protobuf.NullValue = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "NULL_VALUE"] = 0;
                return values;
            })();
    
            protobuf.ListValue = (function() {
    
                /**
                 * Properties of a ListValue.
                 * @memberof google.protobuf
                 * @interface IListValue
                 * @property {Array.<google.protobuf.IValue>|null} [values] ListValue values
                 */
    
                /**
                 * Constructs a new ListValue.
                 * @memberof google.protobuf
                 * @classdesc Represents a ListValue.
                 * @implements IListValue
                 * @constructor
                 * @param {google.protobuf.IListValue=} [properties] Properties to set
                 */
                function ListValue(properties) {
                    this.values = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListValue values.
                 * @member {Array.<google.protobuf.IValue>} values
                 * @memberof google.protobuf.ListValue
                 * @instance
                 */
                ListValue.prototype.values = $util.emptyArray;
    
                /**
                 * Creates a new ListValue instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {google.protobuf.IListValue=} [properties] Properties to set
                 * @returns {google.protobuf.ListValue} ListValue instance
                 */
                ListValue.create = function create(properties) {
                    return new ListValue(properties);
                };
    
                /**
                 * Encodes the specified ListValue message. Does not implicitly {@link google.protobuf.ListValue.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {google.protobuf.IListValue} message ListValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListValue.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.values != null && message.values.length)
                        for (var i = 0; i < message.values.length; ++i)
                            $root.google.protobuf.Value.encode(message.values[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ListValue message, length delimited. Does not implicitly {@link google.protobuf.ListValue.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {google.protobuf.IListValue} message ListValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListValue.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListValue message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ListValue} ListValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListValue.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ListValue();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.values && message.values.length))
                                message.values = [];
                            message.values.push($root.google.protobuf.Value.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListValue message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ListValue} ListValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListValue.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListValue message.
                 * @function verify
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListValue.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.values != null && message.hasOwnProperty("values")) {
                        if (!Array.isArray(message.values))
                            return "values: array expected";
                        for (var i = 0; i < message.values.length; ++i) {
                            var error = $root.google.protobuf.Value.verify(message.values[i]);
                            if (error)
                                return "values." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a ListValue message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ListValue} ListValue
                 */
                ListValue.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ListValue)
                        return object;
                    var message = new $root.google.protobuf.ListValue();
                    if (object.values) {
                        if (!Array.isArray(object.values))
                            throw TypeError(".google.protobuf.ListValue.values: array expected");
                        message.values = [];
                        for (var i = 0; i < object.values.length; ++i) {
                            if (typeof object.values[i] !== "object")
                                throw TypeError(".google.protobuf.ListValue.values: object expected");
                            message.values[i] = $root.google.protobuf.Value.fromObject(object.values[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListValue message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {google.protobuf.ListValue} message ListValue
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListValue.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.values = [];
                    if (message.values && message.values.length) {
                        object.values = [];
                        for (var j = 0; j < message.values.length; ++j)
                            object.values[j] = $root.google.protobuf.Value.toObject(message.values[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ListValue to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ListValue
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListValue.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ListValue;
            })();
    
            return protobuf;
        })();
    
        google.rpc = (function() {
    
            /**
             * Namespace rpc.
             * @memberof google
             * @namespace
             */
            var rpc = {};
    
            rpc.RetryInfo = (function() {
    
                /**
                 * Properties of a RetryInfo.
                 * @memberof google.rpc
                 * @interface IRetryInfo
                 * @property {google.protobuf.IDuration|null} [retryDelay] RetryInfo retryDelay
                 */
    
                /**
                 * Constructs a new RetryInfo.
                 * @memberof google.rpc
                 * @classdesc Represents a RetryInfo.
                 * @implements IRetryInfo
                 * @constructor
                 * @param {google.rpc.IRetryInfo=} [properties] Properties to set
                 */
                function RetryInfo(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RetryInfo retryDelay.
                 * @member {google.protobuf.IDuration|null|undefined} retryDelay
                 * @memberof google.rpc.RetryInfo
                 * @instance
                 */
                RetryInfo.prototype.retryDelay = null;
    
                /**
                 * Creates a new RetryInfo instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.RetryInfo
                 * @static
                 * @param {google.rpc.IRetryInfo=} [properties] Properties to set
                 * @returns {google.rpc.RetryInfo} RetryInfo instance
                 */
                RetryInfo.create = function create(properties) {
                    return new RetryInfo(properties);
                };
    
                /**
                 * Encodes the specified RetryInfo message. Does not implicitly {@link google.rpc.RetryInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.RetryInfo
                 * @static
                 * @param {google.rpc.IRetryInfo} message RetryInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RetryInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.retryDelay != null && Object.hasOwnProperty.call(message, "retryDelay"))
                        $root.google.protobuf.Duration.encode(message.retryDelay, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified RetryInfo message, length delimited. Does not implicitly {@link google.rpc.RetryInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.RetryInfo
                 * @static
                 * @param {google.rpc.IRetryInfo} message RetryInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RetryInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RetryInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.RetryInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.RetryInfo} RetryInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RetryInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.RetryInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.retryDelay = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RetryInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.RetryInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.RetryInfo} RetryInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RetryInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RetryInfo message.
                 * @function verify
                 * @memberof google.rpc.RetryInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RetryInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.retryDelay != null && message.hasOwnProperty("retryDelay")) {
                        var error = $root.google.protobuf.Duration.verify(message.retryDelay);
                        if (error)
                            return "retryDelay." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a RetryInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.RetryInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.RetryInfo} RetryInfo
                 */
                RetryInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.RetryInfo)
                        return object;
                    var message = new $root.google.rpc.RetryInfo();
                    if (object.retryDelay != null) {
                        if (typeof object.retryDelay !== "object")
                            throw TypeError(".google.rpc.RetryInfo.retryDelay: object expected");
                        message.retryDelay = $root.google.protobuf.Duration.fromObject(object.retryDelay);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a RetryInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.RetryInfo
                 * @static
                 * @param {google.rpc.RetryInfo} message RetryInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RetryInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.retryDelay = null;
                    if (message.retryDelay != null && message.hasOwnProperty("retryDelay"))
                        object.retryDelay = $root.google.protobuf.Duration.toObject(message.retryDelay, options);
                    return object;
                };
    
                /**
                 * Converts this RetryInfo to JSON.
                 * @function toJSON
                 * @memberof google.rpc.RetryInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RetryInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return RetryInfo;
            })();
    
            rpc.DebugInfo = (function() {
    
                /**
                 * Properties of a DebugInfo.
                 * @memberof google.rpc
                 * @interface IDebugInfo
                 * @property {Array.<string>|null} [stackEntries] DebugInfo stackEntries
                 * @property {string|null} [detail] DebugInfo detail
                 */
    
                /**
                 * Constructs a new DebugInfo.
                 * @memberof google.rpc
                 * @classdesc Represents a DebugInfo.
                 * @implements IDebugInfo
                 * @constructor
                 * @param {google.rpc.IDebugInfo=} [properties] Properties to set
                 */
                function DebugInfo(properties) {
                    this.stackEntries = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DebugInfo stackEntries.
                 * @member {Array.<string>} stackEntries
                 * @memberof google.rpc.DebugInfo
                 * @instance
                 */
                DebugInfo.prototype.stackEntries = $util.emptyArray;
    
                /**
                 * DebugInfo detail.
                 * @member {string} detail
                 * @memberof google.rpc.DebugInfo
                 * @instance
                 */
                DebugInfo.prototype.detail = "";
    
                /**
                 * Creates a new DebugInfo instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.DebugInfo
                 * @static
                 * @param {google.rpc.IDebugInfo=} [properties] Properties to set
                 * @returns {google.rpc.DebugInfo} DebugInfo instance
                 */
                DebugInfo.create = function create(properties) {
                    return new DebugInfo(properties);
                };
    
                /**
                 * Encodes the specified DebugInfo message. Does not implicitly {@link google.rpc.DebugInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.DebugInfo
                 * @static
                 * @param {google.rpc.IDebugInfo} message DebugInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DebugInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.stackEntries != null && message.stackEntries.length)
                        for (var i = 0; i < message.stackEntries.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.stackEntries[i]);
                    if (message.detail != null && Object.hasOwnProperty.call(message, "detail"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.detail);
                    return writer;
                };
    
                /**
                 * Encodes the specified DebugInfo message, length delimited. Does not implicitly {@link google.rpc.DebugInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.DebugInfo
                 * @static
                 * @param {google.rpc.IDebugInfo} message DebugInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DebugInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DebugInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.DebugInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.DebugInfo} DebugInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DebugInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.DebugInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.stackEntries && message.stackEntries.length))
                                message.stackEntries = [];
                            message.stackEntries.push(reader.string());
                            break;
                        case 2:
                            message.detail = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DebugInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.DebugInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.DebugInfo} DebugInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DebugInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DebugInfo message.
                 * @function verify
                 * @memberof google.rpc.DebugInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DebugInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.stackEntries != null && message.hasOwnProperty("stackEntries")) {
                        if (!Array.isArray(message.stackEntries))
                            return "stackEntries: array expected";
                        for (var i = 0; i < message.stackEntries.length; ++i)
                            if (!$util.isString(message.stackEntries[i]))
                                return "stackEntries: string[] expected";
                    }
                    if (message.detail != null && message.hasOwnProperty("detail"))
                        if (!$util.isString(message.detail))
                            return "detail: string expected";
                    return null;
                };
    
                /**
                 * Creates a DebugInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.DebugInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.DebugInfo} DebugInfo
                 */
                DebugInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.DebugInfo)
                        return object;
                    var message = new $root.google.rpc.DebugInfo();
                    if (object.stackEntries) {
                        if (!Array.isArray(object.stackEntries))
                            throw TypeError(".google.rpc.DebugInfo.stackEntries: array expected");
                        message.stackEntries = [];
                        for (var i = 0; i < object.stackEntries.length; ++i)
                            message.stackEntries[i] = String(object.stackEntries[i]);
                    }
                    if (object.detail != null)
                        message.detail = String(object.detail);
                    return message;
                };
    
                /**
                 * Creates a plain object from a DebugInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.DebugInfo
                 * @static
                 * @param {google.rpc.DebugInfo} message DebugInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DebugInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.stackEntries = [];
                    if (options.defaults)
                        object.detail = "";
                    if (message.stackEntries && message.stackEntries.length) {
                        object.stackEntries = [];
                        for (var j = 0; j < message.stackEntries.length; ++j)
                            object.stackEntries[j] = message.stackEntries[j];
                    }
                    if (message.detail != null && message.hasOwnProperty("detail"))
                        object.detail = message.detail;
                    return object;
                };
    
                /**
                 * Converts this DebugInfo to JSON.
                 * @function toJSON
                 * @memberof google.rpc.DebugInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DebugInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return DebugInfo;
            })();
    
            rpc.QuotaFailure = (function() {
    
                /**
                 * Properties of a QuotaFailure.
                 * @memberof google.rpc
                 * @interface IQuotaFailure
                 * @property {Array.<google.rpc.QuotaFailure.IViolation>|null} [violations] QuotaFailure violations
                 */
    
                /**
                 * Constructs a new QuotaFailure.
                 * @memberof google.rpc
                 * @classdesc Represents a QuotaFailure.
                 * @implements IQuotaFailure
                 * @constructor
                 * @param {google.rpc.IQuotaFailure=} [properties] Properties to set
                 */
                function QuotaFailure(properties) {
                    this.violations = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QuotaFailure violations.
                 * @member {Array.<google.rpc.QuotaFailure.IViolation>} violations
                 * @memberof google.rpc.QuotaFailure
                 * @instance
                 */
                QuotaFailure.prototype.violations = $util.emptyArray;
    
                /**
                 * Creates a new QuotaFailure instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.QuotaFailure
                 * @static
                 * @param {google.rpc.IQuotaFailure=} [properties] Properties to set
                 * @returns {google.rpc.QuotaFailure} QuotaFailure instance
                 */
                QuotaFailure.create = function create(properties) {
                    return new QuotaFailure(properties);
                };
    
                /**
                 * Encodes the specified QuotaFailure message. Does not implicitly {@link google.rpc.QuotaFailure.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.QuotaFailure
                 * @static
                 * @param {google.rpc.IQuotaFailure} message QuotaFailure message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QuotaFailure.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.violations != null && message.violations.length)
                        for (var i = 0; i < message.violations.length; ++i)
                            $root.google.rpc.QuotaFailure.Violation.encode(message.violations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified QuotaFailure message, length delimited. Does not implicitly {@link google.rpc.QuotaFailure.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.QuotaFailure
                 * @static
                 * @param {google.rpc.IQuotaFailure} message QuotaFailure message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QuotaFailure.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QuotaFailure message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.QuotaFailure
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.QuotaFailure} QuotaFailure
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QuotaFailure.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.QuotaFailure();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.violations && message.violations.length))
                                message.violations = [];
                            message.violations.push($root.google.rpc.QuotaFailure.Violation.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QuotaFailure message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.QuotaFailure
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.QuotaFailure} QuotaFailure
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QuotaFailure.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QuotaFailure message.
                 * @function verify
                 * @memberof google.rpc.QuotaFailure
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QuotaFailure.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.violations != null && message.hasOwnProperty("violations")) {
                        if (!Array.isArray(message.violations))
                            return "violations: array expected";
                        for (var i = 0; i < message.violations.length; ++i) {
                            var error = $root.google.rpc.QuotaFailure.Violation.verify(message.violations[i]);
                            if (error)
                                return "violations." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a QuotaFailure message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.QuotaFailure
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.QuotaFailure} QuotaFailure
                 */
                QuotaFailure.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.QuotaFailure)
                        return object;
                    var message = new $root.google.rpc.QuotaFailure();
                    if (object.violations) {
                        if (!Array.isArray(object.violations))
                            throw TypeError(".google.rpc.QuotaFailure.violations: array expected");
                        message.violations = [];
                        for (var i = 0; i < object.violations.length; ++i) {
                            if (typeof object.violations[i] !== "object")
                                throw TypeError(".google.rpc.QuotaFailure.violations: object expected");
                            message.violations[i] = $root.google.rpc.QuotaFailure.Violation.fromObject(object.violations[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QuotaFailure message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.QuotaFailure
                 * @static
                 * @param {google.rpc.QuotaFailure} message QuotaFailure
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QuotaFailure.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.violations = [];
                    if (message.violations && message.violations.length) {
                        object.violations = [];
                        for (var j = 0; j < message.violations.length; ++j)
                            object.violations[j] = $root.google.rpc.QuotaFailure.Violation.toObject(message.violations[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this QuotaFailure to JSON.
                 * @function toJSON
                 * @memberof google.rpc.QuotaFailure
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QuotaFailure.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                QuotaFailure.Violation = (function() {
    
                    /**
                     * Properties of a Violation.
                     * @memberof google.rpc.QuotaFailure
                     * @interface IViolation
                     * @property {string|null} [subject] Violation subject
                     * @property {string|null} [description] Violation description
                     */
    
                    /**
                     * Constructs a new Violation.
                     * @memberof google.rpc.QuotaFailure
                     * @classdesc Represents a Violation.
                     * @implements IViolation
                     * @constructor
                     * @param {google.rpc.QuotaFailure.IViolation=} [properties] Properties to set
                     */
                    function Violation(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Violation subject.
                     * @member {string} subject
                     * @memberof google.rpc.QuotaFailure.Violation
                     * @instance
                     */
                    Violation.prototype.subject = "";
    
                    /**
                     * Violation description.
                     * @member {string} description
                     * @memberof google.rpc.QuotaFailure.Violation
                     * @instance
                     */
                    Violation.prototype.description = "";
    
                    /**
                     * Creates a new Violation instance using the specified properties.
                     * @function create
                     * @memberof google.rpc.QuotaFailure.Violation
                     * @static
                     * @param {google.rpc.QuotaFailure.IViolation=} [properties] Properties to set
                     * @returns {google.rpc.QuotaFailure.Violation} Violation instance
                     */
                    Violation.create = function create(properties) {
                        return new Violation(properties);
                    };
    
                    /**
                     * Encodes the specified Violation message. Does not implicitly {@link google.rpc.QuotaFailure.Violation.verify|verify} messages.
                     * @function encode
                     * @memberof google.rpc.QuotaFailure.Violation
                     * @static
                     * @param {google.rpc.QuotaFailure.IViolation} message Violation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Violation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.subject != null && Object.hasOwnProperty.call(message, "subject"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.subject);
                        if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Violation message, length delimited. Does not implicitly {@link google.rpc.QuotaFailure.Violation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.rpc.QuotaFailure.Violation
                     * @static
                     * @param {google.rpc.QuotaFailure.IViolation} message Violation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Violation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Violation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.rpc.QuotaFailure.Violation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.rpc.QuotaFailure.Violation} Violation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Violation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.QuotaFailure.Violation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.subject = reader.string();
                                break;
                            case 2:
                                message.description = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Violation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.rpc.QuotaFailure.Violation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.rpc.QuotaFailure.Violation} Violation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Violation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Violation message.
                     * @function verify
                     * @memberof google.rpc.QuotaFailure.Violation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Violation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.subject != null && message.hasOwnProperty("subject"))
                            if (!$util.isString(message.subject))
                                return "subject: string expected";
                        if (message.description != null && message.hasOwnProperty("description"))
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Violation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.rpc.QuotaFailure.Violation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.rpc.QuotaFailure.Violation} Violation
                     */
                    Violation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.rpc.QuotaFailure.Violation)
                            return object;
                        var message = new $root.google.rpc.QuotaFailure.Violation();
                        if (object.subject != null)
                            message.subject = String(object.subject);
                        if (object.description != null)
                            message.description = String(object.description);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Violation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.rpc.QuotaFailure.Violation
                     * @static
                     * @param {google.rpc.QuotaFailure.Violation} message Violation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Violation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.subject = "";
                            object.description = "";
                        }
                        if (message.subject != null && message.hasOwnProperty("subject"))
                            object.subject = message.subject;
                        if (message.description != null && message.hasOwnProperty("description"))
                            object.description = message.description;
                        return object;
                    };
    
                    /**
                     * Converts this Violation to JSON.
                     * @function toJSON
                     * @memberof google.rpc.QuotaFailure.Violation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Violation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Violation;
                })();
    
                return QuotaFailure;
            })();
    
            rpc.BadRequest = (function() {
    
                /**
                 * Properties of a BadRequest.
                 * @memberof google.rpc
                 * @interface IBadRequest
                 * @property {Array.<google.rpc.BadRequest.IFieldViolation>|null} [fieldViolations] BadRequest fieldViolations
                 */
    
                /**
                 * Constructs a new BadRequest.
                 * @memberof google.rpc
                 * @classdesc Represents a BadRequest.
                 * @implements IBadRequest
                 * @constructor
                 * @param {google.rpc.IBadRequest=} [properties] Properties to set
                 */
                function BadRequest(properties) {
                    this.fieldViolations = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * BadRequest fieldViolations.
                 * @member {Array.<google.rpc.BadRequest.IFieldViolation>} fieldViolations
                 * @memberof google.rpc.BadRequest
                 * @instance
                 */
                BadRequest.prototype.fieldViolations = $util.emptyArray;
    
                /**
                 * Creates a new BadRequest instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.BadRequest
                 * @static
                 * @param {google.rpc.IBadRequest=} [properties] Properties to set
                 * @returns {google.rpc.BadRequest} BadRequest instance
                 */
                BadRequest.create = function create(properties) {
                    return new BadRequest(properties);
                };
    
                /**
                 * Encodes the specified BadRequest message. Does not implicitly {@link google.rpc.BadRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.BadRequest
                 * @static
                 * @param {google.rpc.IBadRequest} message BadRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BadRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.fieldViolations != null && message.fieldViolations.length)
                        for (var i = 0; i < message.fieldViolations.length; ++i)
                            $root.google.rpc.BadRequest.FieldViolation.encode(message.fieldViolations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified BadRequest message, length delimited. Does not implicitly {@link google.rpc.BadRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.BadRequest
                 * @static
                 * @param {google.rpc.IBadRequest} message BadRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BadRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a BadRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.BadRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.BadRequest} BadRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BadRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.BadRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.fieldViolations && message.fieldViolations.length))
                                message.fieldViolations = [];
                            message.fieldViolations.push($root.google.rpc.BadRequest.FieldViolation.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a BadRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.BadRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.BadRequest} BadRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BadRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a BadRequest message.
                 * @function verify
                 * @memberof google.rpc.BadRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BadRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.fieldViolations != null && message.hasOwnProperty("fieldViolations")) {
                        if (!Array.isArray(message.fieldViolations))
                            return "fieldViolations: array expected";
                        for (var i = 0; i < message.fieldViolations.length; ++i) {
                            var error = $root.google.rpc.BadRequest.FieldViolation.verify(message.fieldViolations[i]);
                            if (error)
                                return "fieldViolations." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a BadRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.BadRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.BadRequest} BadRequest
                 */
                BadRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.BadRequest)
                        return object;
                    var message = new $root.google.rpc.BadRequest();
                    if (object.fieldViolations) {
                        if (!Array.isArray(object.fieldViolations))
                            throw TypeError(".google.rpc.BadRequest.fieldViolations: array expected");
                        message.fieldViolations = [];
                        for (var i = 0; i < object.fieldViolations.length; ++i) {
                            if (typeof object.fieldViolations[i] !== "object")
                                throw TypeError(".google.rpc.BadRequest.fieldViolations: object expected");
                            message.fieldViolations[i] = $root.google.rpc.BadRequest.FieldViolation.fromObject(object.fieldViolations[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a BadRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.BadRequest
                 * @static
                 * @param {google.rpc.BadRequest} message BadRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BadRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.fieldViolations = [];
                    if (message.fieldViolations && message.fieldViolations.length) {
                        object.fieldViolations = [];
                        for (var j = 0; j < message.fieldViolations.length; ++j)
                            object.fieldViolations[j] = $root.google.rpc.BadRequest.FieldViolation.toObject(message.fieldViolations[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this BadRequest to JSON.
                 * @function toJSON
                 * @memberof google.rpc.BadRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BadRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                BadRequest.FieldViolation = (function() {
    
                    /**
                     * Properties of a FieldViolation.
                     * @memberof google.rpc.BadRequest
                     * @interface IFieldViolation
                     * @property {string|null} [field] FieldViolation field
                     * @property {string|null} [description] FieldViolation description
                     */
    
                    /**
                     * Constructs a new FieldViolation.
                     * @memberof google.rpc.BadRequest
                     * @classdesc Represents a FieldViolation.
                     * @implements IFieldViolation
                     * @constructor
                     * @param {google.rpc.BadRequest.IFieldViolation=} [properties] Properties to set
                     */
                    function FieldViolation(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * FieldViolation field.
                     * @member {string} field
                     * @memberof google.rpc.BadRequest.FieldViolation
                     * @instance
                     */
                    FieldViolation.prototype.field = "";
    
                    /**
                     * FieldViolation description.
                     * @member {string} description
                     * @memberof google.rpc.BadRequest.FieldViolation
                     * @instance
                     */
                    FieldViolation.prototype.description = "";
    
                    /**
                     * Creates a new FieldViolation instance using the specified properties.
                     * @function create
                     * @memberof google.rpc.BadRequest.FieldViolation
                     * @static
                     * @param {google.rpc.BadRequest.IFieldViolation=} [properties] Properties to set
                     * @returns {google.rpc.BadRequest.FieldViolation} FieldViolation instance
                     */
                    FieldViolation.create = function create(properties) {
                        return new FieldViolation(properties);
                    };
    
                    /**
                     * Encodes the specified FieldViolation message. Does not implicitly {@link google.rpc.BadRequest.FieldViolation.verify|verify} messages.
                     * @function encode
                     * @memberof google.rpc.BadRequest.FieldViolation
                     * @static
                     * @param {google.rpc.BadRequest.IFieldViolation} message FieldViolation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FieldViolation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.field != null && Object.hasOwnProperty.call(message, "field"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.field);
                        if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified FieldViolation message, length delimited. Does not implicitly {@link google.rpc.BadRequest.FieldViolation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.rpc.BadRequest.FieldViolation
                     * @static
                     * @param {google.rpc.BadRequest.IFieldViolation} message FieldViolation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FieldViolation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a FieldViolation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.rpc.BadRequest.FieldViolation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.rpc.BadRequest.FieldViolation} FieldViolation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FieldViolation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.BadRequest.FieldViolation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.field = reader.string();
                                break;
                            case 2:
                                message.description = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a FieldViolation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.rpc.BadRequest.FieldViolation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.rpc.BadRequest.FieldViolation} FieldViolation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FieldViolation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a FieldViolation message.
                     * @function verify
                     * @memberof google.rpc.BadRequest.FieldViolation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    FieldViolation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.field != null && message.hasOwnProperty("field"))
                            if (!$util.isString(message.field))
                                return "field: string expected";
                        if (message.description != null && message.hasOwnProperty("description"))
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a FieldViolation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.rpc.BadRequest.FieldViolation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.rpc.BadRequest.FieldViolation} FieldViolation
                     */
                    FieldViolation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.rpc.BadRequest.FieldViolation)
                            return object;
                        var message = new $root.google.rpc.BadRequest.FieldViolation();
                        if (object.field != null)
                            message.field = String(object.field);
                        if (object.description != null)
                            message.description = String(object.description);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a FieldViolation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.rpc.BadRequest.FieldViolation
                     * @static
                     * @param {google.rpc.BadRequest.FieldViolation} message FieldViolation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    FieldViolation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.field = "";
                            object.description = "";
                        }
                        if (message.field != null && message.hasOwnProperty("field"))
                            object.field = message.field;
                        if (message.description != null && message.hasOwnProperty("description"))
                            object.description = message.description;
                        return object;
                    };
    
                    /**
                     * Converts this FieldViolation to JSON.
                     * @function toJSON
                     * @memberof google.rpc.BadRequest.FieldViolation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    FieldViolation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return FieldViolation;
                })();
    
                return BadRequest;
            })();
    
            rpc.RequestInfo = (function() {
    
                /**
                 * Properties of a RequestInfo.
                 * @memberof google.rpc
                 * @interface IRequestInfo
                 * @property {string|null} [requestId] RequestInfo requestId
                 * @property {string|null} [servingData] RequestInfo servingData
                 */
    
                /**
                 * Constructs a new RequestInfo.
                 * @memberof google.rpc
                 * @classdesc Represents a RequestInfo.
                 * @implements IRequestInfo
                 * @constructor
                 * @param {google.rpc.IRequestInfo=} [properties] Properties to set
                 */
                function RequestInfo(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RequestInfo requestId.
                 * @member {string} requestId
                 * @memberof google.rpc.RequestInfo
                 * @instance
                 */
                RequestInfo.prototype.requestId = "";
    
                /**
                 * RequestInfo servingData.
                 * @member {string} servingData
                 * @memberof google.rpc.RequestInfo
                 * @instance
                 */
                RequestInfo.prototype.servingData = "";
    
                /**
                 * Creates a new RequestInfo instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.RequestInfo
                 * @static
                 * @param {google.rpc.IRequestInfo=} [properties] Properties to set
                 * @returns {google.rpc.RequestInfo} RequestInfo instance
                 */
                RequestInfo.create = function create(properties) {
                    return new RequestInfo(properties);
                };
    
                /**
                 * Encodes the specified RequestInfo message. Does not implicitly {@link google.rpc.RequestInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.RequestInfo
                 * @static
                 * @param {google.rpc.IRequestInfo} message RequestInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.requestId != null && Object.hasOwnProperty.call(message, "requestId"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.requestId);
                    if (message.servingData != null && Object.hasOwnProperty.call(message, "servingData"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.servingData);
                    return writer;
                };
    
                /**
                 * Encodes the specified RequestInfo message, length delimited. Does not implicitly {@link google.rpc.RequestInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.RequestInfo
                 * @static
                 * @param {google.rpc.IRequestInfo} message RequestInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RequestInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.RequestInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.RequestInfo} RequestInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.RequestInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.requestId = reader.string();
                            break;
                        case 2:
                            message.servingData = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RequestInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.RequestInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.RequestInfo} RequestInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RequestInfo message.
                 * @function verify
                 * @memberof google.rpc.RequestInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RequestInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.requestId != null && message.hasOwnProperty("requestId"))
                        if (!$util.isString(message.requestId))
                            return "requestId: string expected";
                    if (message.servingData != null && message.hasOwnProperty("servingData"))
                        if (!$util.isString(message.servingData))
                            return "servingData: string expected";
                    return null;
                };
    
                /**
                 * Creates a RequestInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.RequestInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.RequestInfo} RequestInfo
                 */
                RequestInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.RequestInfo)
                        return object;
                    var message = new $root.google.rpc.RequestInfo();
                    if (object.requestId != null)
                        message.requestId = String(object.requestId);
                    if (object.servingData != null)
                        message.servingData = String(object.servingData);
                    return message;
                };
    
                /**
                 * Creates a plain object from a RequestInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.RequestInfo
                 * @static
                 * @param {google.rpc.RequestInfo} message RequestInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RequestInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.requestId = "";
                        object.servingData = "";
                    }
                    if (message.requestId != null && message.hasOwnProperty("requestId"))
                        object.requestId = message.requestId;
                    if (message.servingData != null && message.hasOwnProperty("servingData"))
                        object.servingData = message.servingData;
                    return object;
                };
    
                /**
                 * Converts this RequestInfo to JSON.
                 * @function toJSON
                 * @memberof google.rpc.RequestInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RequestInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return RequestInfo;
            })();
    
            rpc.ResourceInfo = (function() {
    
                /**
                 * Properties of a ResourceInfo.
                 * @memberof google.rpc
                 * @interface IResourceInfo
                 * @property {string|null} [resourceType] ResourceInfo resourceType
                 * @property {string|null} [resourceName] ResourceInfo resourceName
                 * @property {string|null} [owner] ResourceInfo owner
                 * @property {string|null} [description] ResourceInfo description
                 */
    
                /**
                 * Constructs a new ResourceInfo.
                 * @memberof google.rpc
                 * @classdesc Represents a ResourceInfo.
                 * @implements IResourceInfo
                 * @constructor
                 * @param {google.rpc.IResourceInfo=} [properties] Properties to set
                 */
                function ResourceInfo(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResourceInfo resourceType.
                 * @member {string} resourceType
                 * @memberof google.rpc.ResourceInfo
                 * @instance
                 */
                ResourceInfo.prototype.resourceType = "";
    
                /**
                 * ResourceInfo resourceName.
                 * @member {string} resourceName
                 * @memberof google.rpc.ResourceInfo
                 * @instance
                 */
                ResourceInfo.prototype.resourceName = "";
    
                /**
                 * ResourceInfo owner.
                 * @member {string} owner
                 * @memberof google.rpc.ResourceInfo
                 * @instance
                 */
                ResourceInfo.prototype.owner = "";
    
                /**
                 * ResourceInfo description.
                 * @member {string} description
                 * @memberof google.rpc.ResourceInfo
                 * @instance
                 */
                ResourceInfo.prototype.description = "";
    
                /**
                 * Creates a new ResourceInfo instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.ResourceInfo
                 * @static
                 * @param {google.rpc.IResourceInfo=} [properties] Properties to set
                 * @returns {google.rpc.ResourceInfo} ResourceInfo instance
                 */
                ResourceInfo.create = function create(properties) {
                    return new ResourceInfo(properties);
                };
    
                /**
                 * Encodes the specified ResourceInfo message. Does not implicitly {@link google.rpc.ResourceInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.ResourceInfo
                 * @static
                 * @param {google.rpc.IResourceInfo} message ResourceInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.resourceType != null && Object.hasOwnProperty.call(message, "resourceType"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.resourceType);
                    if (message.resourceName != null && Object.hasOwnProperty.call(message, "resourceName"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.resourceName);
                    if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.owner);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.description);
                    return writer;
                };
    
                /**
                 * Encodes the specified ResourceInfo message, length delimited. Does not implicitly {@link google.rpc.ResourceInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.ResourceInfo
                 * @static
                 * @param {google.rpc.IResourceInfo} message ResourceInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResourceInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.ResourceInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.ResourceInfo} ResourceInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.ResourceInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.resourceType = reader.string();
                            break;
                        case 2:
                            message.resourceName = reader.string();
                            break;
                        case 3:
                            message.owner = reader.string();
                            break;
                        case 4:
                            message.description = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResourceInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.ResourceInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.ResourceInfo} ResourceInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResourceInfo message.
                 * @function verify
                 * @memberof google.rpc.ResourceInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResourceInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.resourceType != null && message.hasOwnProperty("resourceType"))
                        if (!$util.isString(message.resourceType))
                            return "resourceType: string expected";
                    if (message.resourceName != null && message.hasOwnProperty("resourceName"))
                        if (!$util.isString(message.resourceName))
                            return "resourceName: string expected";
                    if (message.owner != null && message.hasOwnProperty("owner"))
                        if (!$util.isString(message.owner))
                            return "owner: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    return null;
                };
    
                /**
                 * Creates a ResourceInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.ResourceInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.ResourceInfo} ResourceInfo
                 */
                ResourceInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.ResourceInfo)
                        return object;
                    var message = new $root.google.rpc.ResourceInfo();
                    if (object.resourceType != null)
                        message.resourceType = String(object.resourceType);
                    if (object.resourceName != null)
                        message.resourceName = String(object.resourceName);
                    if (object.owner != null)
                        message.owner = String(object.owner);
                    if (object.description != null)
                        message.description = String(object.description);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResourceInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.ResourceInfo
                 * @static
                 * @param {google.rpc.ResourceInfo} message ResourceInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResourceInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.resourceType = "";
                        object.resourceName = "";
                        object.owner = "";
                        object.description = "";
                    }
                    if (message.resourceType != null && message.hasOwnProperty("resourceType"))
                        object.resourceType = message.resourceType;
                    if (message.resourceName != null && message.hasOwnProperty("resourceName"))
                        object.resourceName = message.resourceName;
                    if (message.owner != null && message.hasOwnProperty("owner"))
                        object.owner = message.owner;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    return object;
                };
    
                /**
                 * Converts this ResourceInfo to JSON.
                 * @function toJSON
                 * @memberof google.rpc.ResourceInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResourceInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ResourceInfo;
            })();
    
            rpc.Help = (function() {
    
                /**
                 * Properties of a Help.
                 * @memberof google.rpc
                 * @interface IHelp
                 * @property {Array.<google.rpc.Help.ILink>|null} [links] Help links
                 */
    
                /**
                 * Constructs a new Help.
                 * @memberof google.rpc
                 * @classdesc Represents a Help.
                 * @implements IHelp
                 * @constructor
                 * @param {google.rpc.IHelp=} [properties] Properties to set
                 */
                function Help(properties) {
                    this.links = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Help links.
                 * @member {Array.<google.rpc.Help.ILink>} links
                 * @memberof google.rpc.Help
                 * @instance
                 */
                Help.prototype.links = $util.emptyArray;
    
                /**
                 * Creates a new Help instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.Help
                 * @static
                 * @param {google.rpc.IHelp=} [properties] Properties to set
                 * @returns {google.rpc.Help} Help instance
                 */
                Help.create = function create(properties) {
                    return new Help(properties);
                };
    
                /**
                 * Encodes the specified Help message. Does not implicitly {@link google.rpc.Help.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.Help
                 * @static
                 * @param {google.rpc.IHelp} message Help message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Help.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.links != null && message.links.length)
                        for (var i = 0; i < message.links.length; ++i)
                            $root.google.rpc.Help.Link.encode(message.links[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Help message, length delimited. Does not implicitly {@link google.rpc.Help.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.Help
                 * @static
                 * @param {google.rpc.IHelp} message Help message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Help.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Help message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.Help
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.Help} Help
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Help.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.Help();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.links && message.links.length))
                                message.links = [];
                            message.links.push($root.google.rpc.Help.Link.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Help message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.Help
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.Help} Help
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Help.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Help message.
                 * @function verify
                 * @memberof google.rpc.Help
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Help.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.links != null && message.hasOwnProperty("links")) {
                        if (!Array.isArray(message.links))
                            return "links: array expected";
                        for (var i = 0; i < message.links.length; ++i) {
                            var error = $root.google.rpc.Help.Link.verify(message.links[i]);
                            if (error)
                                return "links." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Help message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.Help
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.Help} Help
                 */
                Help.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.Help)
                        return object;
                    var message = new $root.google.rpc.Help();
                    if (object.links) {
                        if (!Array.isArray(object.links))
                            throw TypeError(".google.rpc.Help.links: array expected");
                        message.links = [];
                        for (var i = 0; i < object.links.length; ++i) {
                            if (typeof object.links[i] !== "object")
                                throw TypeError(".google.rpc.Help.links: object expected");
                            message.links[i] = $root.google.rpc.Help.Link.fromObject(object.links[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Help message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.Help
                 * @static
                 * @param {google.rpc.Help} message Help
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Help.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.links = [];
                    if (message.links && message.links.length) {
                        object.links = [];
                        for (var j = 0; j < message.links.length; ++j)
                            object.links[j] = $root.google.rpc.Help.Link.toObject(message.links[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Help to JSON.
                 * @function toJSON
                 * @memberof google.rpc.Help
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Help.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                Help.Link = (function() {
    
                    /**
                     * Properties of a Link.
                     * @memberof google.rpc.Help
                     * @interface ILink
                     * @property {string|null} [description] Link description
                     * @property {string|null} [url] Link url
                     */
    
                    /**
                     * Constructs a new Link.
                     * @memberof google.rpc.Help
                     * @classdesc Represents a Link.
                     * @implements ILink
                     * @constructor
                     * @param {google.rpc.Help.ILink=} [properties] Properties to set
                     */
                    function Link(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Link description.
                     * @member {string} description
                     * @memberof google.rpc.Help.Link
                     * @instance
                     */
                    Link.prototype.description = "";
    
                    /**
                     * Link url.
                     * @member {string} url
                     * @memberof google.rpc.Help.Link
                     * @instance
                     */
                    Link.prototype.url = "";
    
                    /**
                     * Creates a new Link instance using the specified properties.
                     * @function create
                     * @memberof google.rpc.Help.Link
                     * @static
                     * @param {google.rpc.Help.ILink=} [properties] Properties to set
                     * @returns {google.rpc.Help.Link} Link instance
                     */
                    Link.create = function create(properties) {
                        return new Link(properties);
                    };
    
                    /**
                     * Encodes the specified Link message. Does not implicitly {@link google.rpc.Help.Link.verify|verify} messages.
                     * @function encode
                     * @memberof google.rpc.Help.Link
                     * @static
                     * @param {google.rpc.Help.ILink} message Link message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Link.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.description);
                        if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Link message, length delimited. Does not implicitly {@link google.rpc.Help.Link.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.rpc.Help.Link
                     * @static
                     * @param {google.rpc.Help.ILink} message Link message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Link.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Link message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.rpc.Help.Link
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.rpc.Help.Link} Link
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Link.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.Help.Link();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.description = reader.string();
                                break;
                            case 2:
                                message.url = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Link message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.rpc.Help.Link
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.rpc.Help.Link} Link
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Link.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Link message.
                     * @function verify
                     * @memberof google.rpc.Help.Link
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Link.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.description != null && message.hasOwnProperty("description"))
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        if (message.url != null && message.hasOwnProperty("url"))
                            if (!$util.isString(message.url))
                                return "url: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Link message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.rpc.Help.Link
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.rpc.Help.Link} Link
                     */
                    Link.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.rpc.Help.Link)
                            return object;
                        var message = new $root.google.rpc.Help.Link();
                        if (object.description != null)
                            message.description = String(object.description);
                        if (object.url != null)
                            message.url = String(object.url);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Link message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.rpc.Help.Link
                     * @static
                     * @param {google.rpc.Help.Link} message Link
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Link.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.description = "";
                            object.url = "";
                        }
                        if (message.description != null && message.hasOwnProperty("description"))
                            object.description = message.description;
                        if (message.url != null && message.hasOwnProperty("url"))
                            object.url = message.url;
                        return object;
                    };
    
                    /**
                     * Converts this Link to JSON.
                     * @function toJSON
                     * @memberof google.rpc.Help.Link
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Link.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Link;
                })();
    
                return Help;
            })();
    
            rpc.LocalizedMessage = (function() {
    
                /**
                 * Properties of a LocalizedMessage.
                 * @memberof google.rpc
                 * @interface ILocalizedMessage
                 * @property {string|null} [locale] LocalizedMessage locale
                 * @property {string|null} [message] LocalizedMessage message
                 */
    
                /**
                 * Constructs a new LocalizedMessage.
                 * @memberof google.rpc
                 * @classdesc Represents a LocalizedMessage.
                 * @implements ILocalizedMessage
                 * @constructor
                 * @param {google.rpc.ILocalizedMessage=} [properties] Properties to set
                 */
                function LocalizedMessage(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * LocalizedMessage locale.
                 * @member {string} locale
                 * @memberof google.rpc.LocalizedMessage
                 * @instance
                 */
                LocalizedMessage.prototype.locale = "";
    
                /**
                 * LocalizedMessage message.
                 * @member {string} message
                 * @memberof google.rpc.LocalizedMessage
                 * @instance
                 */
                LocalizedMessage.prototype.message = "";
    
                /**
                 * Creates a new LocalizedMessage instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.LocalizedMessage
                 * @static
                 * @param {google.rpc.ILocalizedMessage=} [properties] Properties to set
                 * @returns {google.rpc.LocalizedMessage} LocalizedMessage instance
                 */
                LocalizedMessage.create = function create(properties) {
                    return new LocalizedMessage(properties);
                };
    
                /**
                 * Encodes the specified LocalizedMessage message. Does not implicitly {@link google.rpc.LocalizedMessage.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.LocalizedMessage
                 * @static
                 * @param {google.rpc.ILocalizedMessage} message LocalizedMessage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LocalizedMessage.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.locale != null && Object.hasOwnProperty.call(message, "locale"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.locale);
                    if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                    return writer;
                };
    
                /**
                 * Encodes the specified LocalizedMessage message, length delimited. Does not implicitly {@link google.rpc.LocalizedMessage.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.LocalizedMessage
                 * @static
                 * @param {google.rpc.ILocalizedMessage} message LocalizedMessage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LocalizedMessage.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a LocalizedMessage message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.LocalizedMessage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.LocalizedMessage} LocalizedMessage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LocalizedMessage.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.LocalizedMessage();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.locale = reader.string();
                            break;
                        case 2:
                            message.message = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a LocalizedMessage message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.LocalizedMessage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.LocalizedMessage} LocalizedMessage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LocalizedMessage.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a LocalizedMessage message.
                 * @function verify
                 * @memberof google.rpc.LocalizedMessage
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                LocalizedMessage.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.locale != null && message.hasOwnProperty("locale"))
                        if (!$util.isString(message.locale))
                            return "locale: string expected";
                    if (message.message != null && message.hasOwnProperty("message"))
                        if (!$util.isString(message.message))
                            return "message: string expected";
                    return null;
                };
    
                /**
                 * Creates a LocalizedMessage message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.LocalizedMessage
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.LocalizedMessage} LocalizedMessage
                 */
                LocalizedMessage.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.LocalizedMessage)
                        return object;
                    var message = new $root.google.rpc.LocalizedMessage();
                    if (object.locale != null)
                        message.locale = String(object.locale);
                    if (object.message != null)
                        message.message = String(object.message);
                    return message;
                };
    
                /**
                 * Creates a plain object from a LocalizedMessage message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.LocalizedMessage
                 * @static
                 * @param {google.rpc.LocalizedMessage} message LocalizedMessage
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                LocalizedMessage.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.locale = "";
                        object.message = "";
                    }
                    if (message.locale != null && message.hasOwnProperty("locale"))
                        object.locale = message.locale;
                    if (message.message != null && message.hasOwnProperty("message"))
                        object.message = message.message;
                    return object;
                };
    
                /**
                 * Converts this LocalizedMessage to JSON.
                 * @function toJSON
                 * @memberof google.rpc.LocalizedMessage
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                LocalizedMessage.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return LocalizedMessage;
            })();
    
            rpc.Status = (function() {
    
                /**
                 * Properties of a Status.
                 * @memberof google.rpc
                 * @interface IStatus
                 * @property {number|null} [code] Status code
                 * @property {string|null} [message] Status message
                 * @property {Array.<google.protobuf.IAny>|null} [details] Status details
                 */
    
                /**
                 * Constructs a new Status.
                 * @memberof google.rpc
                 * @classdesc Represents a Status.
                 * @implements IStatus
                 * @constructor
                 * @param {google.rpc.IStatus=} [properties] Properties to set
                 */
                function Status(properties) {
                    this.details = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Status code.
                 * @member {number} code
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.code = 0;
    
                /**
                 * Status message.
                 * @member {string} message
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.message = "";
    
                /**
                 * Status details.
                 * @member {Array.<google.protobuf.IAny>} details
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.details = $util.emptyArray;
    
                /**
                 * Creates a new Status instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus=} [properties] Properties to set
                 * @returns {google.rpc.Status} Status instance
                 */
                Status.create = function create(properties) {
                    return new Status(properties);
                };
    
                /**
                 * Encodes the specified Status message. Does not implicitly {@link google.rpc.Status.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus} message Status message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Status.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                    if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                    if (message.details != null && message.details.length)
                        for (var i = 0; i < message.details.length; ++i)
                            $root.google.protobuf.Any.encode(message.details[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Status message, length delimited. Does not implicitly {@link google.rpc.Status.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus} message Status message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Status.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Status message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.Status
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.Status} Status
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Status.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.Status();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.code = reader.int32();
                            break;
                        case 2:
                            message.message = reader.string();
                            break;
                        case 3:
                            if (!(message.details && message.details.length))
                                message.details = [];
                            message.details.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Status message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.Status
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.Status} Status
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Status.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Status message.
                 * @function verify
                 * @memberof google.rpc.Status
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Status.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.message != null && message.hasOwnProperty("message"))
                        if (!$util.isString(message.message))
                            return "message: string expected";
                    if (message.details != null && message.hasOwnProperty("details")) {
                        if (!Array.isArray(message.details))
                            return "details: array expected";
                        for (var i = 0; i < message.details.length; ++i) {
                            var error = $root.google.protobuf.Any.verify(message.details[i]);
                            if (error)
                                return "details." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Status message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.Status
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.Status} Status
                 */
                Status.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.Status)
                        return object;
                    var message = new $root.google.rpc.Status();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.message != null)
                        message.message = String(object.message);
                    if (object.details) {
                        if (!Array.isArray(object.details))
                            throw TypeError(".google.rpc.Status.details: array expected");
                        message.details = [];
                        for (var i = 0; i < object.details.length; ++i) {
                            if (typeof object.details[i] !== "object")
                                throw TypeError(".google.rpc.Status.details: object expected");
                            message.details[i] = $root.google.protobuf.Any.fromObject(object.details[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Status message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.Status} message Status
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Status.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.details = [];
                    if (options.defaults) {
                        object.code = 0;
                        object.message = "";
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.message != null && message.hasOwnProperty("message"))
                        object.message = message.message;
                    if (message.details && message.details.length) {
                        object.details = [];
                        for (var j = 0; j < message.details.length; ++j)
                            object.details[j] = $root.google.protobuf.Any.toObject(message.details[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Status to JSON.
                 * @function toJSON
                 * @memberof google.rpc.Status
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Status.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Status;
            })();
    
            return rpc;
        })();
    
        google.spanner = (function() {
    
            /**
             * Namespace spanner.
             * @memberof google
             * @namespace
             */
            var spanner = {};
    
            spanner.admin = (function() {
    
                /**
                 * Namespace admin.
                 * @memberof google.spanner
                 * @namespace
                 */
                var admin = {};
    
                admin.database = (function() {
    
                    /**
                     * Namespace database.
                     * @memberof google.spanner.admin
                     * @namespace
                     */
                    var database = {};
    
                    database.v1 = (function() {
    
                        /**
                         * Namespace v1.
                         * @memberof google.spanner.admin.database
                         * @namespace
                         */
                        var v1 = {};
    
                        v1.Backup = (function() {
    
                            /**
                             * Properties of a Backup.
                             * @memberof google.spanner.admin.database.v1
                             * @interface IBackup
                             * @property {string|null} [database] Backup database
                             * @property {google.protobuf.ITimestamp|null} [expireTime] Backup expireTime
                             * @property {string|null} [name] Backup name
                             * @property {google.protobuf.ITimestamp|null} [createTime] Backup createTime
                             * @property {number|Long|null} [sizeBytes] Backup sizeBytes
                             * @property {google.spanner.admin.database.v1.Backup.State|null} [state] Backup state
                             * @property {Array.<string>|null} [referencingDatabases] Backup referencingDatabases
                             */
    
                            /**
                             * Constructs a new Backup.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents a Backup.
                             * @implements IBackup
                             * @constructor
                             * @param {google.spanner.admin.database.v1.IBackup=} [properties] Properties to set
                             */
                            function Backup(properties) {
                                this.referencingDatabases = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Backup database.
                             * @member {string} database
                             * @memberof google.spanner.admin.database.v1.Backup
                             * @instance
                             */
                            Backup.prototype.database = "";
    
                            /**
                             * Backup expireTime.
                             * @member {google.protobuf.ITimestamp|null|undefined} expireTime
                             * @memberof google.spanner.admin.database.v1.Backup
                             * @instance
                             */
                            Backup.prototype.expireTime = null;
    
                            /**
                             * Backup name.
                             * @member {string} name
                             * @memberof google.spanner.admin.database.v1.Backup
                             * @instance
                             */
                            Backup.prototype.name = "";
    
                            /**
                             * Backup createTime.
                             * @member {google.protobuf.ITimestamp|null|undefined} createTime
                             * @memberof google.spanner.admin.database.v1.Backup
                             * @instance
                             */
                            Backup.prototype.createTime = null;
    
                            /**
                             * Backup sizeBytes.
                             * @member {number|Long} sizeBytes
                             * @memberof google.spanner.admin.database.v1.Backup
                             * @instance
                             */
                            Backup.prototype.sizeBytes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                            /**
                             * Backup state.
                             * @member {google.spanner.admin.database.v1.Backup.State} state
                             * @memberof google.spanner.admin.database.v1.Backup
                             * @instance
                             */
                            Backup.prototype.state = 0;
    
                            /**
                             * Backup referencingDatabases.
                             * @member {Array.<string>} referencingDatabases
                             * @memberof google.spanner.admin.database.v1.Backup
                             * @instance
                             */
                            Backup.prototype.referencingDatabases = $util.emptyArray;
    
                            /**
                             * Creates a new Backup instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.Backup
                             * @static
                             * @param {google.spanner.admin.database.v1.IBackup=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.Backup} Backup instance
                             */
                            Backup.create = function create(properties) {
                                return new Backup(properties);
                            };
    
                            /**
                             * Encodes the specified Backup message. Does not implicitly {@link google.spanner.admin.database.v1.Backup.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.Backup
                             * @static
                             * @param {google.spanner.admin.database.v1.IBackup} message Backup message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Backup.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                if (message.database != null && Object.hasOwnProperty.call(message, "database"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.database);
                                if (message.expireTime != null && Object.hasOwnProperty.call(message, "expireTime"))
                                    $root.google.protobuf.Timestamp.encode(message.expireTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                                    $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                if (message.sizeBytes != null && Object.hasOwnProperty.call(message, "sizeBytes"))
                                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.sizeBytes);
                                if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.state);
                                if (message.referencingDatabases != null && message.referencingDatabases.length)
                                    for (var i = 0; i < message.referencingDatabases.length; ++i)
                                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.referencingDatabases[i]);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Backup message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.Backup.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.Backup
                             * @static
                             * @param {google.spanner.admin.database.v1.IBackup} message Backup message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Backup.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a Backup message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.Backup
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.Backup} Backup
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Backup.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.Backup();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 2:
                                        message.database = reader.string();
                                        break;
                                    case 3:
                                        message.expireTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    case 1:
                                        message.name = reader.string();
                                        break;
                                    case 4:
                                        message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    case 5:
                                        message.sizeBytes = reader.int64();
                                        break;
                                    case 6:
                                        message.state = reader.int32();
                                        break;
                                    case 7:
                                        if (!(message.referencingDatabases && message.referencingDatabases.length))
                                            message.referencingDatabases = [];
                                        message.referencingDatabases.push(reader.string());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a Backup message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.Backup
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.Backup} Backup
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Backup.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a Backup message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.Backup
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Backup.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.database != null && message.hasOwnProperty("database"))
                                    if (!$util.isString(message.database))
                                        return "database: string expected";
                                if (message.expireTime != null && message.hasOwnProperty("expireTime")) {
                                    var error = $root.google.protobuf.Timestamp.verify(message.expireTime);
                                    if (error)
                                        return "expireTime." + error;
                                }
                                if (message.name != null && message.hasOwnProperty("name"))
                                    if (!$util.isString(message.name))
                                        return "name: string expected";
                                if (message.createTime != null && message.hasOwnProperty("createTime")) {
                                    var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                                    if (error)
                                        return "createTime." + error;
                                }
                                if (message.sizeBytes != null && message.hasOwnProperty("sizeBytes"))
                                    if (!$util.isInteger(message.sizeBytes) && !(message.sizeBytes && $util.isInteger(message.sizeBytes.low) && $util.isInteger(message.sizeBytes.high)))
                                        return "sizeBytes: integer|Long expected";
                                if (message.state != null && message.hasOwnProperty("state"))
                                    switch (message.state) {
                                    default:
                                        return "state: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                if (message.referencingDatabases != null && message.hasOwnProperty("referencingDatabases")) {
                                    if (!Array.isArray(message.referencingDatabases))
                                        return "referencingDatabases: array expected";
                                    for (var i = 0; i < message.referencingDatabases.length; ++i)
                                        if (!$util.isString(message.referencingDatabases[i]))
                                            return "referencingDatabases: string[] expected";
                                }
                                return null;
                            };
    
                            /**
                             * Creates a Backup message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.Backup
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.Backup} Backup
                             */
                            Backup.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.Backup)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.Backup();
                                if (object.database != null)
                                    message.database = String(object.database);
                                if (object.expireTime != null) {
                                    if (typeof object.expireTime !== "object")
                                        throw TypeError(".google.spanner.admin.database.v1.Backup.expireTime: object expected");
                                    message.expireTime = $root.google.protobuf.Timestamp.fromObject(object.expireTime);
                                }
                                if (object.name != null)
                                    message.name = String(object.name);
                                if (object.createTime != null) {
                                    if (typeof object.createTime !== "object")
                                        throw TypeError(".google.spanner.admin.database.v1.Backup.createTime: object expected");
                                    message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                                }
                                if (object.sizeBytes != null)
                                    if ($util.Long)
                                        (message.sizeBytes = $util.Long.fromValue(object.sizeBytes)).unsigned = false;
                                    else if (typeof object.sizeBytes === "string")
                                        message.sizeBytes = parseInt(object.sizeBytes, 10);
                                    else if (typeof object.sizeBytes === "number")
                                        message.sizeBytes = object.sizeBytes;
                                    else if (typeof object.sizeBytes === "object")
                                        message.sizeBytes = new $util.LongBits(object.sizeBytes.low >>> 0, object.sizeBytes.high >>> 0).toNumber();
                                switch (object.state) {
                                case "STATE_UNSPECIFIED":
                                case 0:
                                    message.state = 0;
                                    break;
                                case "CREATING":
                                case 1:
                                    message.state = 1;
                                    break;
                                case "READY":
                                case 2:
                                    message.state = 2;
                                    break;
                                }
                                if (object.referencingDatabases) {
                                    if (!Array.isArray(object.referencingDatabases))
                                        throw TypeError(".google.spanner.admin.database.v1.Backup.referencingDatabases: array expected");
                                    message.referencingDatabases = [];
                                    for (var i = 0; i < object.referencingDatabases.length; ++i)
                                        message.referencingDatabases[i] = String(object.referencingDatabases[i]);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a Backup message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.Backup
                             * @static
                             * @param {google.spanner.admin.database.v1.Backup} message Backup
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Backup.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.referencingDatabases = [];
                                if (options.defaults) {
                                    object.name = "";
                                    object.database = "";
                                    object.expireTime = null;
                                    object.createTime = null;
                                    if ($util.Long) {
                                        var long = new $util.Long(0, 0, false);
                                        object.sizeBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                    } else
                                        object.sizeBytes = options.longs === String ? "0" : 0;
                                    object.state = options.enums === String ? "STATE_UNSPECIFIED" : 0;
                                }
                                if (message.name != null && message.hasOwnProperty("name"))
                                    object.name = message.name;
                                if (message.database != null && message.hasOwnProperty("database"))
                                    object.database = message.database;
                                if (message.expireTime != null && message.hasOwnProperty("expireTime"))
                                    object.expireTime = $root.google.protobuf.Timestamp.toObject(message.expireTime, options);
                                if (message.createTime != null && message.hasOwnProperty("createTime"))
                                    object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                                if (message.sizeBytes != null && message.hasOwnProperty("sizeBytes"))
                                    if (typeof message.sizeBytes === "number")
                                        object.sizeBytes = options.longs === String ? String(message.sizeBytes) : message.sizeBytes;
                                    else
                                        object.sizeBytes = options.longs === String ? $util.Long.prototype.toString.call(message.sizeBytes) : options.longs === Number ? new $util.LongBits(message.sizeBytes.low >>> 0, message.sizeBytes.high >>> 0).toNumber() : message.sizeBytes;
                                if (message.state != null && message.hasOwnProperty("state"))
                                    object.state = options.enums === String ? $root.google.spanner.admin.database.v1.Backup.State[message.state] : message.state;
                                if (message.referencingDatabases && message.referencingDatabases.length) {
                                    object.referencingDatabases = [];
                                    for (var j = 0; j < message.referencingDatabases.length; ++j)
                                        object.referencingDatabases[j] = message.referencingDatabases[j];
                                }
                                return object;
                            };
    
                            /**
                             * Converts this Backup to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.Backup
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Backup.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * State enum.
                             * @name google.spanner.admin.database.v1.Backup.State
                             * @enum {number}
                             * @property {number} STATE_UNSPECIFIED=0 STATE_UNSPECIFIED value
                             * @property {number} CREATING=1 CREATING value
                             * @property {number} READY=2 READY value
                             */
                            Backup.State = (function() {
                                var valuesById = {}, values = Object.create(valuesById);
                                values[valuesById[0] = "STATE_UNSPECIFIED"] = 0;
                                values[valuesById[1] = "CREATING"] = 1;
                                values[valuesById[2] = "READY"] = 2;
                                return values;
                            })();
    
                            return Backup;
                        })();
    
                        v1.CreateBackupRequest = (function() {
    
                            /**
                             * Properties of a CreateBackupRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @interface ICreateBackupRequest
                             * @property {string|null} [parent] CreateBackupRequest parent
                             * @property {string|null} [backupId] CreateBackupRequest backupId
                             * @property {google.spanner.admin.database.v1.IBackup|null} [backup] CreateBackupRequest backup
                             */
    
                            /**
                             * Constructs a new CreateBackupRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents a CreateBackupRequest.
                             * @implements ICreateBackupRequest
                             * @constructor
                             * @param {google.spanner.admin.database.v1.ICreateBackupRequest=} [properties] Properties to set
                             */
                            function CreateBackupRequest(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * CreateBackupRequest parent.
                             * @member {string} parent
                             * @memberof google.spanner.admin.database.v1.CreateBackupRequest
                             * @instance
                             */
                            CreateBackupRequest.prototype.parent = "";
    
                            /**
                             * CreateBackupRequest backupId.
                             * @member {string} backupId
                             * @memberof google.spanner.admin.database.v1.CreateBackupRequest
                             * @instance
                             */
                            CreateBackupRequest.prototype.backupId = "";
    
                            /**
                             * CreateBackupRequest backup.
                             * @member {google.spanner.admin.database.v1.IBackup|null|undefined} backup
                             * @memberof google.spanner.admin.database.v1.CreateBackupRequest
                             * @instance
                             */
                            CreateBackupRequest.prototype.backup = null;
    
                            /**
                             * Creates a new CreateBackupRequest instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.CreateBackupRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.ICreateBackupRequest=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.CreateBackupRequest} CreateBackupRequest instance
                             */
                            CreateBackupRequest.create = function create(properties) {
                                return new CreateBackupRequest(properties);
                            };
    
                            /**
                             * Encodes the specified CreateBackupRequest message. Does not implicitly {@link google.spanner.admin.database.v1.CreateBackupRequest.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.CreateBackupRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.ICreateBackupRequest} message CreateBackupRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CreateBackupRequest.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                                if (message.backupId != null && Object.hasOwnProperty.call(message, "backupId"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.backupId);
                                if (message.backup != null && Object.hasOwnProperty.call(message, "backup"))
                                    $root.google.spanner.admin.database.v1.Backup.encode(message.backup, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified CreateBackupRequest message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.CreateBackupRequest.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.CreateBackupRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.ICreateBackupRequest} message CreateBackupRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CreateBackupRequest.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a CreateBackupRequest message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.CreateBackupRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.CreateBackupRequest} CreateBackupRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CreateBackupRequest.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.CreateBackupRequest();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.parent = reader.string();
                                        break;
                                    case 2:
                                        message.backupId = reader.string();
                                        break;
                                    case 3:
                                        message.backup = $root.google.spanner.admin.database.v1.Backup.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a CreateBackupRequest message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.CreateBackupRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.CreateBackupRequest} CreateBackupRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CreateBackupRequest.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a CreateBackupRequest message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.CreateBackupRequest
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            CreateBackupRequest.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.parent != null && message.hasOwnProperty("parent"))
                                    if (!$util.isString(message.parent))
                                        return "parent: string expected";
                                if (message.backupId != null && message.hasOwnProperty("backupId"))
                                    if (!$util.isString(message.backupId))
                                        return "backupId: string expected";
                                if (message.backup != null && message.hasOwnProperty("backup")) {
                                    var error = $root.google.spanner.admin.database.v1.Backup.verify(message.backup);
                                    if (error)
                                        return "backup." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a CreateBackupRequest message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.CreateBackupRequest
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.CreateBackupRequest} CreateBackupRequest
                             */
                            CreateBackupRequest.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.CreateBackupRequest)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.CreateBackupRequest();
                                if (object.parent != null)
                                    message.parent = String(object.parent);
                                if (object.backupId != null)
                                    message.backupId = String(object.backupId);
                                if (object.backup != null) {
                                    if (typeof object.backup !== "object")
                                        throw TypeError(".google.spanner.admin.database.v1.CreateBackupRequest.backup: object expected");
                                    message.backup = $root.google.spanner.admin.database.v1.Backup.fromObject(object.backup);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a CreateBackupRequest message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.CreateBackupRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.CreateBackupRequest} message CreateBackupRequest
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            CreateBackupRequest.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.parent = "";
                                    object.backupId = "";
                                    object.backup = null;
                                }
                                if (message.parent != null && message.hasOwnProperty("parent"))
                                    object.parent = message.parent;
                                if (message.backupId != null && message.hasOwnProperty("backupId"))
                                    object.backupId = message.backupId;
                                if (message.backup != null && message.hasOwnProperty("backup"))
                                    object.backup = $root.google.spanner.admin.database.v1.Backup.toObject(message.backup, options);
                                return object;
                            };
    
                            /**
                             * Converts this CreateBackupRequest to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.CreateBackupRequest
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            CreateBackupRequest.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return CreateBackupRequest;
                        })();
    
                        v1.CreateBackupMetadata = (function() {
    
                            /**
                             * Properties of a CreateBackupMetadata.
                             * @memberof google.spanner.admin.database.v1
                             * @interface ICreateBackupMetadata
                             * @property {string|null} [name] CreateBackupMetadata name
                             * @property {string|null} [database] CreateBackupMetadata database
                             * @property {google.spanner.admin.database.v1.IOperationProgress|null} [progress] CreateBackupMetadata progress
                             * @property {google.protobuf.ITimestamp|null} [cancelTime] CreateBackupMetadata cancelTime
                             */
    
                            /**
                             * Constructs a new CreateBackupMetadata.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents a CreateBackupMetadata.
                             * @implements ICreateBackupMetadata
                             * @constructor
                             * @param {google.spanner.admin.database.v1.ICreateBackupMetadata=} [properties] Properties to set
                             */
                            function CreateBackupMetadata(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * CreateBackupMetadata name.
                             * @member {string} name
                             * @memberof google.spanner.admin.database.v1.CreateBackupMetadata
                             * @instance
                             */
                            CreateBackupMetadata.prototype.name = "";
    
                            /**
                             * CreateBackupMetadata database.
                             * @member {string} database
                             * @memberof google.spanner.admin.database.v1.CreateBackupMetadata
                             * @instance
                             */
                            CreateBackupMetadata.prototype.database = "";
    
                            /**
                             * CreateBackupMetadata progress.
                             * @member {google.spanner.admin.database.v1.IOperationProgress|null|undefined} progress
                             * @memberof google.spanner.admin.database.v1.CreateBackupMetadata
                             * @instance
                             */
                            CreateBackupMetadata.prototype.progress = null;
    
                            /**
                             * CreateBackupMetadata cancelTime.
                             * @member {google.protobuf.ITimestamp|null|undefined} cancelTime
                             * @memberof google.spanner.admin.database.v1.CreateBackupMetadata
                             * @instance
                             */
                            CreateBackupMetadata.prototype.cancelTime = null;
    
                            /**
                             * Creates a new CreateBackupMetadata instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.CreateBackupMetadata
                             * @static
                             * @param {google.spanner.admin.database.v1.ICreateBackupMetadata=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.CreateBackupMetadata} CreateBackupMetadata instance
                             */
                            CreateBackupMetadata.create = function create(properties) {
                                return new CreateBackupMetadata(properties);
                            };
    
                            /**
                             * Encodes the specified CreateBackupMetadata message. Does not implicitly {@link google.spanner.admin.database.v1.CreateBackupMetadata.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.CreateBackupMetadata
                             * @static
                             * @param {google.spanner.admin.database.v1.ICreateBackupMetadata} message CreateBackupMetadata message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CreateBackupMetadata.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                if (message.database != null && Object.hasOwnProperty.call(message, "database"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.database);
                                if (message.progress != null && Object.hasOwnProperty.call(message, "progress"))
                                    $root.google.spanner.admin.database.v1.OperationProgress.encode(message.progress, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                if (message.cancelTime != null && Object.hasOwnProperty.call(message, "cancelTime"))
                                    $root.google.protobuf.Timestamp.encode(message.cancelTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified CreateBackupMetadata message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.CreateBackupMetadata.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.CreateBackupMetadata
                             * @static
                             * @param {google.spanner.admin.database.v1.ICreateBackupMetadata} message CreateBackupMetadata message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CreateBackupMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a CreateBackupMetadata message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.CreateBackupMetadata
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.CreateBackupMetadata} CreateBackupMetadata
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CreateBackupMetadata.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.CreateBackupMetadata();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.name = reader.string();
                                        break;
                                    case 2:
                                        message.database = reader.string();
                                        break;
                                    case 3:
                                        message.progress = $root.google.spanner.admin.database.v1.OperationProgress.decode(reader, reader.uint32());
                                        break;
                                    case 4:
                                        message.cancelTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a CreateBackupMetadata message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.CreateBackupMetadata
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.CreateBackupMetadata} CreateBackupMetadata
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CreateBackupMetadata.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a CreateBackupMetadata message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.CreateBackupMetadata
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            CreateBackupMetadata.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    if (!$util.isString(message.name))
                                        return "name: string expected";
                                if (message.database != null && message.hasOwnProperty("database"))
                                    if (!$util.isString(message.database))
                                        return "database: string expected";
                                if (message.progress != null && message.hasOwnProperty("progress")) {
                                    var error = $root.google.spanner.admin.database.v1.OperationProgress.verify(message.progress);
                                    if (error)
                                        return "progress." + error;
                                }
                                if (message.cancelTime != null && message.hasOwnProperty("cancelTime")) {
                                    var error = $root.google.protobuf.Timestamp.verify(message.cancelTime);
                                    if (error)
                                        return "cancelTime." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a CreateBackupMetadata message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.CreateBackupMetadata
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.CreateBackupMetadata} CreateBackupMetadata
                             */
                            CreateBackupMetadata.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.CreateBackupMetadata)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.CreateBackupMetadata();
                                if (object.name != null)
                                    message.name = String(object.name);
                                if (object.database != null)
                                    message.database = String(object.database);
                                if (object.progress != null) {
                                    if (typeof object.progress !== "object")
                                        throw TypeError(".google.spanner.admin.database.v1.CreateBackupMetadata.progress: object expected");
                                    message.progress = $root.google.spanner.admin.database.v1.OperationProgress.fromObject(object.progress);
                                }
                                if (object.cancelTime != null) {
                                    if (typeof object.cancelTime !== "object")
                                        throw TypeError(".google.spanner.admin.database.v1.CreateBackupMetadata.cancelTime: object expected");
                                    message.cancelTime = $root.google.protobuf.Timestamp.fromObject(object.cancelTime);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a CreateBackupMetadata message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.CreateBackupMetadata
                             * @static
                             * @param {google.spanner.admin.database.v1.CreateBackupMetadata} message CreateBackupMetadata
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            CreateBackupMetadata.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.name = "";
                                    object.database = "";
                                    object.progress = null;
                                    object.cancelTime = null;
                                }
                                if (message.name != null && message.hasOwnProperty("name"))
                                    object.name = message.name;
                                if (message.database != null && message.hasOwnProperty("database"))
                                    object.database = message.database;
                                if (message.progress != null && message.hasOwnProperty("progress"))
                                    object.progress = $root.google.spanner.admin.database.v1.OperationProgress.toObject(message.progress, options);
                                if (message.cancelTime != null && message.hasOwnProperty("cancelTime"))
                                    object.cancelTime = $root.google.protobuf.Timestamp.toObject(message.cancelTime, options);
                                return object;
                            };
    
                            /**
                             * Converts this CreateBackupMetadata to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.CreateBackupMetadata
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            CreateBackupMetadata.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return CreateBackupMetadata;
                        })();
    
                        v1.UpdateBackupRequest = (function() {
    
                            /**
                             * Properties of an UpdateBackupRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @interface IUpdateBackupRequest
                             * @property {google.spanner.admin.database.v1.IBackup|null} [backup] UpdateBackupRequest backup
                             * @property {google.protobuf.IFieldMask|null} [updateMask] UpdateBackupRequest updateMask
                             */
    
                            /**
                             * Constructs a new UpdateBackupRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents an UpdateBackupRequest.
                             * @implements IUpdateBackupRequest
                             * @constructor
                             * @param {google.spanner.admin.database.v1.IUpdateBackupRequest=} [properties] Properties to set
                             */
                            function UpdateBackupRequest(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * UpdateBackupRequest backup.
                             * @member {google.spanner.admin.database.v1.IBackup|null|undefined} backup
                             * @memberof google.spanner.admin.database.v1.UpdateBackupRequest
                             * @instance
                             */
                            UpdateBackupRequest.prototype.backup = null;
    
                            /**
                             * UpdateBackupRequest updateMask.
                             * @member {google.protobuf.IFieldMask|null|undefined} updateMask
                             * @memberof google.spanner.admin.database.v1.UpdateBackupRequest
                             * @instance
                             */
                            UpdateBackupRequest.prototype.updateMask = null;
    
                            /**
                             * Creates a new UpdateBackupRequest instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.UpdateBackupRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IUpdateBackupRequest=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.UpdateBackupRequest} UpdateBackupRequest instance
                             */
                            UpdateBackupRequest.create = function create(properties) {
                                return new UpdateBackupRequest(properties);
                            };
    
                            /**
                             * Encodes the specified UpdateBackupRequest message. Does not implicitly {@link google.spanner.admin.database.v1.UpdateBackupRequest.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.UpdateBackupRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IUpdateBackupRequest} message UpdateBackupRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            UpdateBackupRequest.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.backup != null && Object.hasOwnProperty.call(message, "backup"))
                                    $root.google.spanner.admin.database.v1.Backup.encode(message.backup, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.updateMask != null && Object.hasOwnProperty.call(message, "updateMask"))
                                    $root.google.protobuf.FieldMask.encode(message.updateMask, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified UpdateBackupRequest message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.UpdateBackupRequest.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.UpdateBackupRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IUpdateBackupRequest} message UpdateBackupRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            UpdateBackupRequest.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an UpdateBackupRequest message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.UpdateBackupRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.UpdateBackupRequest} UpdateBackupRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            UpdateBackupRequest.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.UpdateBackupRequest();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.backup = $root.google.spanner.admin.database.v1.Backup.decode(reader, reader.uint32());
                                        break;
                                    case 2:
                                        message.updateMask = $root.google.protobuf.FieldMask.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an UpdateBackupRequest message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.UpdateBackupRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.UpdateBackupRequest} UpdateBackupRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            UpdateBackupRequest.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an UpdateBackupRequest message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.UpdateBackupRequest
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            UpdateBackupRequest.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.backup != null && message.hasOwnProperty("backup")) {
                                    var error = $root.google.spanner.admin.database.v1.Backup.verify(message.backup);
                                    if (error)
                                        return "backup." + error;
                                }
                                if (message.updateMask != null && message.hasOwnProperty("updateMask")) {
                                    var error = $root.google.protobuf.FieldMask.verify(message.updateMask);
                                    if (error)
                                        return "updateMask." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates an UpdateBackupRequest message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.UpdateBackupRequest
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.UpdateBackupRequest} UpdateBackupRequest
                             */
                            UpdateBackupRequest.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.UpdateBackupRequest)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.UpdateBackupRequest();
                                if (object.backup != null) {
                                    if (typeof object.backup !== "object")
                                        throw TypeError(".google.spanner.admin.database.v1.UpdateBackupRequest.backup: object expected");
                                    message.backup = $root.google.spanner.admin.database.v1.Backup.fromObject(object.backup);
                                }
                                if (object.updateMask != null) {
                                    if (typeof object.updateMask !== "object")
                                        throw TypeError(".google.spanner.admin.database.v1.UpdateBackupRequest.updateMask: object expected");
                                    message.updateMask = $root.google.protobuf.FieldMask.fromObject(object.updateMask);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an UpdateBackupRequest message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.UpdateBackupRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.UpdateBackupRequest} message UpdateBackupRequest
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            UpdateBackupRequest.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.backup = null;
                                    object.updateMask = null;
                                }
                                if (message.backup != null && message.hasOwnProperty("backup"))
                                    object.backup = $root.google.spanner.admin.database.v1.Backup.toObject(message.backup, options);
                                if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                                    object.updateMask = $root.google.protobuf.FieldMask.toObject(message.updateMask, options);
                                return object;
                            };
    
                            /**
                             * Converts this UpdateBackupRequest to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.UpdateBackupRequest
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            UpdateBackupRequest.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return UpdateBackupRequest;
                        })();
    
                        v1.GetBackupRequest = (function() {
    
                            /**
                             * Properties of a GetBackupRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @interface IGetBackupRequest
                             * @property {string|null} [name] GetBackupRequest name
                             */
    
                            /**
                             * Constructs a new GetBackupRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents a GetBackupRequest.
                             * @implements IGetBackupRequest
                             * @constructor
                             * @param {google.spanner.admin.database.v1.IGetBackupRequest=} [properties] Properties to set
                             */
                            function GetBackupRequest(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * GetBackupRequest name.
                             * @member {string} name
                             * @memberof google.spanner.admin.database.v1.GetBackupRequest
                             * @instance
                             */
                            GetBackupRequest.prototype.name = "";
    
                            /**
                             * Creates a new GetBackupRequest instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.GetBackupRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IGetBackupRequest=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.GetBackupRequest} GetBackupRequest instance
                             */
                            GetBackupRequest.create = function create(properties) {
                                return new GetBackupRequest(properties);
                            };
    
                            /**
                             * Encodes the specified GetBackupRequest message. Does not implicitly {@link google.spanner.admin.database.v1.GetBackupRequest.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.GetBackupRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IGetBackupRequest} message GetBackupRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            GetBackupRequest.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified GetBackupRequest message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.GetBackupRequest.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.GetBackupRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IGetBackupRequest} message GetBackupRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            GetBackupRequest.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a GetBackupRequest message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.GetBackupRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.GetBackupRequest} GetBackupRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            GetBackupRequest.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.GetBackupRequest();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.name = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a GetBackupRequest message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.GetBackupRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.GetBackupRequest} GetBackupRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            GetBackupRequest.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a GetBackupRequest message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.GetBackupRequest
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            GetBackupRequest.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    if (!$util.isString(message.name))
                                        return "name: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a GetBackupRequest message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.GetBackupRequest
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.GetBackupRequest} GetBackupRequest
                             */
                            GetBackupRequest.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.GetBackupRequest)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.GetBackupRequest();
                                if (object.name != null)
                                    message.name = String(object.name);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a GetBackupRequest message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.GetBackupRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.GetBackupRequest} message GetBackupRequest
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            GetBackupRequest.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.name = "";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    object.name = message.name;
                                return object;
                            };
    
                            /**
                             * Converts this GetBackupRequest to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.GetBackupRequest
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            GetBackupRequest.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return GetBackupRequest;
                        })();
    
                        v1.DeleteBackupRequest = (function() {
    
                            /**
                             * Properties of a DeleteBackupRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @interface IDeleteBackupRequest
                             * @property {string|null} [name] DeleteBackupRequest name
                             */
    
                            /**
                             * Constructs a new DeleteBackupRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents a DeleteBackupRequest.
                             * @implements IDeleteBackupRequest
                             * @constructor
                             * @param {google.spanner.admin.database.v1.IDeleteBackupRequest=} [properties] Properties to set
                             */
                            function DeleteBackupRequest(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * DeleteBackupRequest name.
                             * @member {string} name
                             * @memberof google.spanner.admin.database.v1.DeleteBackupRequest
                             * @instance
                             */
                            DeleteBackupRequest.prototype.name = "";
    
                            /**
                             * Creates a new DeleteBackupRequest instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.DeleteBackupRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IDeleteBackupRequest=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.DeleteBackupRequest} DeleteBackupRequest instance
                             */
                            DeleteBackupRequest.create = function create(properties) {
                                return new DeleteBackupRequest(properties);
                            };
    
                            /**
                             * Encodes the specified DeleteBackupRequest message. Does not implicitly {@link google.spanner.admin.database.v1.DeleteBackupRequest.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.DeleteBackupRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IDeleteBackupRequest} message DeleteBackupRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            DeleteBackupRequest.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified DeleteBackupRequest message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.DeleteBackupRequest.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.DeleteBackupRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IDeleteBackupRequest} message DeleteBackupRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            DeleteBackupRequest.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a DeleteBackupRequest message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.DeleteBackupRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.DeleteBackupRequest} DeleteBackupRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            DeleteBackupRequest.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.DeleteBackupRequest();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.name = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a DeleteBackupRequest message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.DeleteBackupRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.DeleteBackupRequest} DeleteBackupRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            DeleteBackupRequest.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a DeleteBackupRequest message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.DeleteBackupRequest
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            DeleteBackupRequest.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    if (!$util.isString(message.name))
                                        return "name: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a DeleteBackupRequest message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.DeleteBackupRequest
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.DeleteBackupRequest} DeleteBackupRequest
                             */
                            DeleteBackupRequest.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.DeleteBackupRequest)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.DeleteBackupRequest();
                                if (object.name != null)
                                    message.name = String(object.name);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a DeleteBackupRequest message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.DeleteBackupRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.DeleteBackupRequest} message DeleteBackupRequest
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            DeleteBackupRequest.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.name = "";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    object.name = message.name;
                                return object;
                            };
    
                            /**
                             * Converts this DeleteBackupRequest to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.DeleteBackupRequest
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            DeleteBackupRequest.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return DeleteBackupRequest;
                        })();
    
                        v1.ListBackupsRequest = (function() {
    
                            /**
                             * Properties of a ListBackupsRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @interface IListBackupsRequest
                             * @property {string|null} [parent] ListBackupsRequest parent
                             * @property {string|null} [filter] ListBackupsRequest filter
                             * @property {number|null} [pageSize] ListBackupsRequest pageSize
                             * @property {string|null} [pageToken] ListBackupsRequest pageToken
                             */
    
                            /**
                             * Constructs a new ListBackupsRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents a ListBackupsRequest.
                             * @implements IListBackupsRequest
                             * @constructor
                             * @param {google.spanner.admin.database.v1.IListBackupsRequest=} [properties] Properties to set
                             */
                            function ListBackupsRequest(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ListBackupsRequest parent.
                             * @member {string} parent
                             * @memberof google.spanner.admin.database.v1.ListBackupsRequest
                             * @instance
                             */
                            ListBackupsRequest.prototype.parent = "";
    
                            /**
                             * ListBackupsRequest filter.
                             * @member {string} filter
                             * @memberof google.spanner.admin.database.v1.ListBackupsRequest
                             * @instance
                             */
                            ListBackupsRequest.prototype.filter = "";
    
                            /**
                             * ListBackupsRequest pageSize.
                             * @member {number} pageSize
                             * @memberof google.spanner.admin.database.v1.ListBackupsRequest
                             * @instance
                             */
                            ListBackupsRequest.prototype.pageSize = 0;
    
                            /**
                             * ListBackupsRequest pageToken.
                             * @member {string} pageToken
                             * @memberof google.spanner.admin.database.v1.ListBackupsRequest
                             * @instance
                             */
                            ListBackupsRequest.prototype.pageToken = "";
    
                            /**
                             * Creates a new ListBackupsRequest instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.ListBackupsRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IListBackupsRequest=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.ListBackupsRequest} ListBackupsRequest instance
                             */
                            ListBackupsRequest.create = function create(properties) {
                                return new ListBackupsRequest(properties);
                            };
    
                            /**
                             * Encodes the specified ListBackupsRequest message. Does not implicitly {@link google.spanner.admin.database.v1.ListBackupsRequest.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.ListBackupsRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IListBackupsRequest} message ListBackupsRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ListBackupsRequest.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                                if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.filter);
                                if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pageSize);
                                if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.pageToken);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ListBackupsRequest message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.ListBackupsRequest.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.ListBackupsRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IListBackupsRequest} message ListBackupsRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ListBackupsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a ListBackupsRequest message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.ListBackupsRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.ListBackupsRequest} ListBackupsRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ListBackupsRequest.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.ListBackupsRequest();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.parent = reader.string();
                                        break;
                                    case 2:
                                        message.filter = reader.string();
                                        break;
                                    case 3:
                                        message.pageSize = reader.int32();
                                        break;
                                    case 4:
                                        message.pageToken = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a ListBackupsRequest message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.ListBackupsRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.ListBackupsRequest} ListBackupsRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ListBackupsRequest.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a ListBackupsRequest message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.ListBackupsRequest
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ListBackupsRequest.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.parent != null && message.hasOwnProperty("parent"))
                                    if (!$util.isString(message.parent))
                                        return "parent: string expected";
                                if (message.filter != null && message.hasOwnProperty("filter"))
                                    if (!$util.isString(message.filter))
                                        return "filter: string expected";
                                if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                    if (!$util.isInteger(message.pageSize))
                                        return "pageSize: integer expected";
                                if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                    if (!$util.isString(message.pageToken))
                                        return "pageToken: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a ListBackupsRequest message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.ListBackupsRequest
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.ListBackupsRequest} ListBackupsRequest
                             */
                            ListBackupsRequest.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.ListBackupsRequest)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.ListBackupsRequest();
                                if (object.parent != null)
                                    message.parent = String(object.parent);
                                if (object.filter != null)
                                    message.filter = String(object.filter);
                                if (object.pageSize != null)
                                    message.pageSize = object.pageSize | 0;
                                if (object.pageToken != null)
                                    message.pageToken = String(object.pageToken);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a ListBackupsRequest message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.ListBackupsRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.ListBackupsRequest} message ListBackupsRequest
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ListBackupsRequest.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.parent = "";
                                    object.filter = "";
                                    object.pageSize = 0;
                                    object.pageToken = "";
                                }
                                if (message.parent != null && message.hasOwnProperty("parent"))
                                    object.parent = message.parent;
                                if (message.filter != null && message.hasOwnProperty("filter"))
                                    object.filter = message.filter;
                                if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                    object.pageSize = message.pageSize;
                                if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                    object.pageToken = message.pageToken;
                                return object;
                            };
    
                            /**
                             * Converts this ListBackupsRequest to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.ListBackupsRequest
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ListBackupsRequest.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return ListBackupsRequest;
                        })();
    
                        v1.ListBackupsResponse = (function() {
    
                            /**
                             * Properties of a ListBackupsResponse.
                             * @memberof google.spanner.admin.database.v1
                             * @interface IListBackupsResponse
                             * @property {Array.<google.spanner.admin.database.v1.IBackup>|null} [backups] ListBackupsResponse backups
                             * @property {string|null} [nextPageToken] ListBackupsResponse nextPageToken
                             */
    
                            /**
                             * Constructs a new ListBackupsResponse.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents a ListBackupsResponse.
                             * @implements IListBackupsResponse
                             * @constructor
                             * @param {google.spanner.admin.database.v1.IListBackupsResponse=} [properties] Properties to set
                             */
                            function ListBackupsResponse(properties) {
                                this.backups = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ListBackupsResponse backups.
                             * @member {Array.<google.spanner.admin.database.v1.IBackup>} backups
                             * @memberof google.spanner.admin.database.v1.ListBackupsResponse
                             * @instance
                             */
                            ListBackupsResponse.prototype.backups = $util.emptyArray;
    
                            /**
                             * ListBackupsResponse nextPageToken.
                             * @member {string} nextPageToken
                             * @memberof google.spanner.admin.database.v1.ListBackupsResponse
                             * @instance
                             */
                            ListBackupsResponse.prototype.nextPageToken = "";
    
                            /**
                             * Creates a new ListBackupsResponse instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.ListBackupsResponse
                             * @static
                             * @param {google.spanner.admin.database.v1.IListBackupsResponse=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.ListBackupsResponse} ListBackupsResponse instance
                             */
                            ListBackupsResponse.create = function create(properties) {
                                return new ListBackupsResponse(properties);
                            };
    
                            /**
                             * Encodes the specified ListBackupsResponse message. Does not implicitly {@link google.spanner.admin.database.v1.ListBackupsResponse.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.ListBackupsResponse
                             * @static
                             * @param {google.spanner.admin.database.v1.IListBackupsResponse} message ListBackupsResponse message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ListBackupsResponse.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.backups != null && message.backups.length)
                                    for (var i = 0; i < message.backups.length; ++i)
                                        $root.google.spanner.admin.database.v1.Backup.encode(message.backups[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ListBackupsResponse message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.ListBackupsResponse.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.ListBackupsResponse
                             * @static
                             * @param {google.spanner.admin.database.v1.IListBackupsResponse} message ListBackupsResponse message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ListBackupsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a ListBackupsResponse message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.ListBackupsResponse
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.ListBackupsResponse} ListBackupsResponse
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ListBackupsResponse.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.ListBackupsResponse();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        if (!(message.backups && message.backups.length))
                                            message.backups = [];
                                        message.backups.push($root.google.spanner.admin.database.v1.Backup.decode(reader, reader.uint32()));
                                        break;
                                    case 2:
                                        message.nextPageToken = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a ListBackupsResponse message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.ListBackupsResponse
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.ListBackupsResponse} ListBackupsResponse
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ListBackupsResponse.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a ListBackupsResponse message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.ListBackupsResponse
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ListBackupsResponse.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.backups != null && message.hasOwnProperty("backups")) {
                                    if (!Array.isArray(message.backups))
                                        return "backups: array expected";
                                    for (var i = 0; i < message.backups.length; ++i) {
                                        var error = $root.google.spanner.admin.database.v1.Backup.verify(message.backups[i]);
                                        if (error)
                                            return "backups." + error;
                                    }
                                }
                                if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                    if (!$util.isString(message.nextPageToken))
                                        return "nextPageToken: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a ListBackupsResponse message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.ListBackupsResponse
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.ListBackupsResponse} ListBackupsResponse
                             */
                            ListBackupsResponse.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.ListBackupsResponse)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.ListBackupsResponse();
                                if (object.backups) {
                                    if (!Array.isArray(object.backups))
                                        throw TypeError(".google.spanner.admin.database.v1.ListBackupsResponse.backups: array expected");
                                    message.backups = [];
                                    for (var i = 0; i < object.backups.length; ++i) {
                                        if (typeof object.backups[i] !== "object")
                                            throw TypeError(".google.spanner.admin.database.v1.ListBackupsResponse.backups: object expected");
                                        message.backups[i] = $root.google.spanner.admin.database.v1.Backup.fromObject(object.backups[i]);
                                    }
                                }
                                if (object.nextPageToken != null)
                                    message.nextPageToken = String(object.nextPageToken);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a ListBackupsResponse message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.ListBackupsResponse
                             * @static
                             * @param {google.spanner.admin.database.v1.ListBackupsResponse} message ListBackupsResponse
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ListBackupsResponse.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.backups = [];
                                if (options.defaults)
                                    object.nextPageToken = "";
                                if (message.backups && message.backups.length) {
                                    object.backups = [];
                                    for (var j = 0; j < message.backups.length; ++j)
                                        object.backups[j] = $root.google.spanner.admin.database.v1.Backup.toObject(message.backups[j], options);
                                }
                                if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                    object.nextPageToken = message.nextPageToken;
                                return object;
                            };
    
                            /**
                             * Converts this ListBackupsResponse to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.ListBackupsResponse
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ListBackupsResponse.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return ListBackupsResponse;
                        })();
    
                        v1.ListBackupOperationsRequest = (function() {
    
                            /**
                             * Properties of a ListBackupOperationsRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @interface IListBackupOperationsRequest
                             * @property {string|null} [parent] ListBackupOperationsRequest parent
                             * @property {string|null} [filter] ListBackupOperationsRequest filter
                             * @property {number|null} [pageSize] ListBackupOperationsRequest pageSize
                             * @property {string|null} [pageToken] ListBackupOperationsRequest pageToken
                             */
    
                            /**
                             * Constructs a new ListBackupOperationsRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents a ListBackupOperationsRequest.
                             * @implements IListBackupOperationsRequest
                             * @constructor
                             * @param {google.spanner.admin.database.v1.IListBackupOperationsRequest=} [properties] Properties to set
                             */
                            function ListBackupOperationsRequest(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ListBackupOperationsRequest parent.
                             * @member {string} parent
                             * @memberof google.spanner.admin.database.v1.ListBackupOperationsRequest
                             * @instance
                             */
                            ListBackupOperationsRequest.prototype.parent = "";
    
                            /**
                             * ListBackupOperationsRequest filter.
                             * @member {string} filter
                             * @memberof google.spanner.admin.database.v1.ListBackupOperationsRequest
                             * @instance
                             */
                            ListBackupOperationsRequest.prototype.filter = "";
    
                            /**
                             * ListBackupOperationsRequest pageSize.
                             * @member {number} pageSize
                             * @memberof google.spanner.admin.database.v1.ListBackupOperationsRequest
                             * @instance
                             */
                            ListBackupOperationsRequest.prototype.pageSize = 0;
    
                            /**
                             * ListBackupOperationsRequest pageToken.
                             * @member {string} pageToken
                             * @memberof google.spanner.admin.database.v1.ListBackupOperationsRequest
                             * @instance
                             */
                            ListBackupOperationsRequest.prototype.pageToken = "";
    
                            /**
                             * Creates a new ListBackupOperationsRequest instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.ListBackupOperationsRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IListBackupOperationsRequest=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.ListBackupOperationsRequest} ListBackupOperationsRequest instance
                             */
                            ListBackupOperationsRequest.create = function create(properties) {
                                return new ListBackupOperationsRequest(properties);
                            };
    
                            /**
                             * Encodes the specified ListBackupOperationsRequest message. Does not implicitly {@link google.spanner.admin.database.v1.ListBackupOperationsRequest.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.ListBackupOperationsRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IListBackupOperationsRequest} message ListBackupOperationsRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ListBackupOperationsRequest.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                                if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.filter);
                                if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pageSize);
                                if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.pageToken);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ListBackupOperationsRequest message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.ListBackupOperationsRequest.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.ListBackupOperationsRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IListBackupOperationsRequest} message ListBackupOperationsRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ListBackupOperationsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a ListBackupOperationsRequest message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.ListBackupOperationsRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.ListBackupOperationsRequest} ListBackupOperationsRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ListBackupOperationsRequest.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.ListBackupOperationsRequest();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.parent = reader.string();
                                        break;
                                    case 2:
                                        message.filter = reader.string();
                                        break;
                                    case 3:
                                        message.pageSize = reader.int32();
                                        break;
                                    case 4:
                                        message.pageToken = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a ListBackupOperationsRequest message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.ListBackupOperationsRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.ListBackupOperationsRequest} ListBackupOperationsRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ListBackupOperationsRequest.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a ListBackupOperationsRequest message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.ListBackupOperationsRequest
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ListBackupOperationsRequest.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.parent != null && message.hasOwnProperty("parent"))
                                    if (!$util.isString(message.parent))
                                        return "parent: string expected";
                                if (message.filter != null && message.hasOwnProperty("filter"))
                                    if (!$util.isString(message.filter))
                                        return "filter: string expected";
                                if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                    if (!$util.isInteger(message.pageSize))
                                        return "pageSize: integer expected";
                                if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                    if (!$util.isString(message.pageToken))
                                        return "pageToken: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a ListBackupOperationsRequest message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.ListBackupOperationsRequest
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.ListBackupOperationsRequest} ListBackupOperationsRequest
                             */
                            ListBackupOperationsRequest.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.ListBackupOperationsRequest)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.ListBackupOperationsRequest();
                                if (object.parent != null)
                                    message.parent = String(object.parent);
                                if (object.filter != null)
                                    message.filter = String(object.filter);
                                if (object.pageSize != null)
                                    message.pageSize = object.pageSize | 0;
                                if (object.pageToken != null)
                                    message.pageToken = String(object.pageToken);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a ListBackupOperationsRequest message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.ListBackupOperationsRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.ListBackupOperationsRequest} message ListBackupOperationsRequest
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ListBackupOperationsRequest.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.parent = "";
                                    object.filter = "";
                                    object.pageSize = 0;
                                    object.pageToken = "";
                                }
                                if (message.parent != null && message.hasOwnProperty("parent"))
                                    object.parent = message.parent;
                                if (message.filter != null && message.hasOwnProperty("filter"))
                                    object.filter = message.filter;
                                if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                    object.pageSize = message.pageSize;
                                if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                    object.pageToken = message.pageToken;
                                return object;
                            };
    
                            /**
                             * Converts this ListBackupOperationsRequest to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.ListBackupOperationsRequest
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ListBackupOperationsRequest.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return ListBackupOperationsRequest;
                        })();
    
                        v1.ListBackupOperationsResponse = (function() {
    
                            /**
                             * Properties of a ListBackupOperationsResponse.
                             * @memberof google.spanner.admin.database.v1
                             * @interface IListBackupOperationsResponse
                             * @property {Array.<google.longrunning.IOperation>|null} [operations] ListBackupOperationsResponse operations
                             * @property {string|null} [nextPageToken] ListBackupOperationsResponse nextPageToken
                             */
    
                            /**
                             * Constructs a new ListBackupOperationsResponse.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents a ListBackupOperationsResponse.
                             * @implements IListBackupOperationsResponse
                             * @constructor
                             * @param {google.spanner.admin.database.v1.IListBackupOperationsResponse=} [properties] Properties to set
                             */
                            function ListBackupOperationsResponse(properties) {
                                this.operations = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ListBackupOperationsResponse operations.
                             * @member {Array.<google.longrunning.IOperation>} operations
                             * @memberof google.spanner.admin.database.v1.ListBackupOperationsResponse
                             * @instance
                             */
                            ListBackupOperationsResponse.prototype.operations = $util.emptyArray;
    
                            /**
                             * ListBackupOperationsResponse nextPageToken.
                             * @member {string} nextPageToken
                             * @memberof google.spanner.admin.database.v1.ListBackupOperationsResponse
                             * @instance
                             */
                            ListBackupOperationsResponse.prototype.nextPageToken = "";
    
                            /**
                             * Creates a new ListBackupOperationsResponse instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.ListBackupOperationsResponse
                             * @static
                             * @param {google.spanner.admin.database.v1.IListBackupOperationsResponse=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.ListBackupOperationsResponse} ListBackupOperationsResponse instance
                             */
                            ListBackupOperationsResponse.create = function create(properties) {
                                return new ListBackupOperationsResponse(properties);
                            };
    
                            /**
                             * Encodes the specified ListBackupOperationsResponse message. Does not implicitly {@link google.spanner.admin.database.v1.ListBackupOperationsResponse.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.ListBackupOperationsResponse
                             * @static
                             * @param {google.spanner.admin.database.v1.IListBackupOperationsResponse} message ListBackupOperationsResponse message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ListBackupOperationsResponse.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.operations != null && message.operations.length)
                                    for (var i = 0; i < message.operations.length; ++i)
                                        $root.google.longrunning.Operation.encode(message.operations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ListBackupOperationsResponse message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.ListBackupOperationsResponse.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.ListBackupOperationsResponse
                             * @static
                             * @param {google.spanner.admin.database.v1.IListBackupOperationsResponse} message ListBackupOperationsResponse message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ListBackupOperationsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a ListBackupOperationsResponse message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.ListBackupOperationsResponse
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.ListBackupOperationsResponse} ListBackupOperationsResponse
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ListBackupOperationsResponse.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.ListBackupOperationsResponse();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        if (!(message.operations && message.operations.length))
                                            message.operations = [];
                                        message.operations.push($root.google.longrunning.Operation.decode(reader, reader.uint32()));
                                        break;
                                    case 2:
                                        message.nextPageToken = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a ListBackupOperationsResponse message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.ListBackupOperationsResponse
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.ListBackupOperationsResponse} ListBackupOperationsResponse
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ListBackupOperationsResponse.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a ListBackupOperationsResponse message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.ListBackupOperationsResponse
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ListBackupOperationsResponse.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.operations != null && message.hasOwnProperty("operations")) {
                                    if (!Array.isArray(message.operations))
                                        return "operations: array expected";
                                    for (var i = 0; i < message.operations.length; ++i) {
                                        var error = $root.google.longrunning.Operation.verify(message.operations[i]);
                                        if (error)
                                            return "operations." + error;
                                    }
                                }
                                if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                    if (!$util.isString(message.nextPageToken))
                                        return "nextPageToken: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a ListBackupOperationsResponse message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.ListBackupOperationsResponse
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.ListBackupOperationsResponse} ListBackupOperationsResponse
                             */
                            ListBackupOperationsResponse.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.ListBackupOperationsResponse)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.ListBackupOperationsResponse();
                                if (object.operations) {
                                    if (!Array.isArray(object.operations))
                                        throw TypeError(".google.spanner.admin.database.v1.ListBackupOperationsResponse.operations: array expected");
                                    message.operations = [];
                                    for (var i = 0; i < object.operations.length; ++i) {
                                        if (typeof object.operations[i] !== "object")
                                            throw TypeError(".google.spanner.admin.database.v1.ListBackupOperationsResponse.operations: object expected");
                                        message.operations[i] = $root.google.longrunning.Operation.fromObject(object.operations[i]);
                                    }
                                }
                                if (object.nextPageToken != null)
                                    message.nextPageToken = String(object.nextPageToken);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a ListBackupOperationsResponse message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.ListBackupOperationsResponse
                             * @static
                             * @param {google.spanner.admin.database.v1.ListBackupOperationsResponse} message ListBackupOperationsResponse
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ListBackupOperationsResponse.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.operations = [];
                                if (options.defaults)
                                    object.nextPageToken = "";
                                if (message.operations && message.operations.length) {
                                    object.operations = [];
                                    for (var j = 0; j < message.operations.length; ++j)
                                        object.operations[j] = $root.google.longrunning.Operation.toObject(message.operations[j], options);
                                }
                                if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                    object.nextPageToken = message.nextPageToken;
                                return object;
                            };
    
                            /**
                             * Converts this ListBackupOperationsResponse to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.ListBackupOperationsResponse
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ListBackupOperationsResponse.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return ListBackupOperationsResponse;
                        })();
    
                        v1.BackupInfo = (function() {
    
                            /**
                             * Properties of a BackupInfo.
                             * @memberof google.spanner.admin.database.v1
                             * @interface IBackupInfo
                             * @property {string|null} [backup] BackupInfo backup
                             * @property {google.protobuf.ITimestamp|null} [createTime] BackupInfo createTime
                             * @property {string|null} [sourceDatabase] BackupInfo sourceDatabase
                             */
    
                            /**
                             * Constructs a new BackupInfo.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents a BackupInfo.
                             * @implements IBackupInfo
                             * @constructor
                             * @param {google.spanner.admin.database.v1.IBackupInfo=} [properties] Properties to set
                             */
                            function BackupInfo(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * BackupInfo backup.
                             * @member {string} backup
                             * @memberof google.spanner.admin.database.v1.BackupInfo
                             * @instance
                             */
                            BackupInfo.prototype.backup = "";
    
                            /**
                             * BackupInfo createTime.
                             * @member {google.protobuf.ITimestamp|null|undefined} createTime
                             * @memberof google.spanner.admin.database.v1.BackupInfo
                             * @instance
                             */
                            BackupInfo.prototype.createTime = null;
    
                            /**
                             * BackupInfo sourceDatabase.
                             * @member {string} sourceDatabase
                             * @memberof google.spanner.admin.database.v1.BackupInfo
                             * @instance
                             */
                            BackupInfo.prototype.sourceDatabase = "";
    
                            /**
                             * Creates a new BackupInfo instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.BackupInfo
                             * @static
                             * @param {google.spanner.admin.database.v1.IBackupInfo=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.BackupInfo} BackupInfo instance
                             */
                            BackupInfo.create = function create(properties) {
                                return new BackupInfo(properties);
                            };
    
                            /**
                             * Encodes the specified BackupInfo message. Does not implicitly {@link google.spanner.admin.database.v1.BackupInfo.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.BackupInfo
                             * @static
                             * @param {google.spanner.admin.database.v1.IBackupInfo} message BackupInfo message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            BackupInfo.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.backup != null && Object.hasOwnProperty.call(message, "backup"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.backup);
                                if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                                    $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.sourceDatabase != null && Object.hasOwnProperty.call(message, "sourceDatabase"))
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.sourceDatabase);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified BackupInfo message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.BackupInfo.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.BackupInfo
                             * @static
                             * @param {google.spanner.admin.database.v1.IBackupInfo} message BackupInfo message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            BackupInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a BackupInfo message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.BackupInfo
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.BackupInfo} BackupInfo
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            BackupInfo.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.BackupInfo();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.backup = reader.string();
                                        break;
                                    case 2:
                                        message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    case 3:
                                        message.sourceDatabase = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a BackupInfo message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.BackupInfo
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.BackupInfo} BackupInfo
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            BackupInfo.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a BackupInfo message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.BackupInfo
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            BackupInfo.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.backup != null && message.hasOwnProperty("backup"))
                                    if (!$util.isString(message.backup))
                                        return "backup: string expected";
                                if (message.createTime != null && message.hasOwnProperty("createTime")) {
                                    var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                                    if (error)
                                        return "createTime." + error;
                                }
                                if (message.sourceDatabase != null && message.hasOwnProperty("sourceDatabase"))
                                    if (!$util.isString(message.sourceDatabase))
                                        return "sourceDatabase: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a BackupInfo message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.BackupInfo
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.BackupInfo} BackupInfo
                             */
                            BackupInfo.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.BackupInfo)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.BackupInfo();
                                if (object.backup != null)
                                    message.backup = String(object.backup);
                                if (object.createTime != null) {
                                    if (typeof object.createTime !== "object")
                                        throw TypeError(".google.spanner.admin.database.v1.BackupInfo.createTime: object expected");
                                    message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                                }
                                if (object.sourceDatabase != null)
                                    message.sourceDatabase = String(object.sourceDatabase);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a BackupInfo message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.BackupInfo
                             * @static
                             * @param {google.spanner.admin.database.v1.BackupInfo} message BackupInfo
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            BackupInfo.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.backup = "";
                                    object.createTime = null;
                                    object.sourceDatabase = "";
                                }
                                if (message.backup != null && message.hasOwnProperty("backup"))
                                    object.backup = message.backup;
                                if (message.createTime != null && message.hasOwnProperty("createTime"))
                                    object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                                if (message.sourceDatabase != null && message.hasOwnProperty("sourceDatabase"))
                                    object.sourceDatabase = message.sourceDatabase;
                                return object;
                            };
    
                            /**
                             * Converts this BackupInfo to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.BackupInfo
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            BackupInfo.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return BackupInfo;
                        })();
    
                        v1.OperationProgress = (function() {
    
                            /**
                             * Properties of an OperationProgress.
                             * @memberof google.spanner.admin.database.v1
                             * @interface IOperationProgress
                             * @property {number|null} [progressPercent] OperationProgress progressPercent
                             * @property {google.protobuf.ITimestamp|null} [startTime] OperationProgress startTime
                             * @property {google.protobuf.ITimestamp|null} [endTime] OperationProgress endTime
                             */
    
                            /**
                             * Constructs a new OperationProgress.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents an OperationProgress.
                             * @implements IOperationProgress
                             * @constructor
                             * @param {google.spanner.admin.database.v1.IOperationProgress=} [properties] Properties to set
                             */
                            function OperationProgress(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * OperationProgress progressPercent.
                             * @member {number} progressPercent
                             * @memberof google.spanner.admin.database.v1.OperationProgress
                             * @instance
                             */
                            OperationProgress.prototype.progressPercent = 0;
    
                            /**
                             * OperationProgress startTime.
                             * @member {google.protobuf.ITimestamp|null|undefined} startTime
                             * @memberof google.spanner.admin.database.v1.OperationProgress
                             * @instance
                             */
                            OperationProgress.prototype.startTime = null;
    
                            /**
                             * OperationProgress endTime.
                             * @member {google.protobuf.ITimestamp|null|undefined} endTime
                             * @memberof google.spanner.admin.database.v1.OperationProgress
                             * @instance
                             */
                            OperationProgress.prototype.endTime = null;
    
                            /**
                             * Creates a new OperationProgress instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.OperationProgress
                             * @static
                             * @param {google.spanner.admin.database.v1.IOperationProgress=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.OperationProgress} OperationProgress instance
                             */
                            OperationProgress.create = function create(properties) {
                                return new OperationProgress(properties);
                            };
    
                            /**
                             * Encodes the specified OperationProgress message. Does not implicitly {@link google.spanner.admin.database.v1.OperationProgress.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.OperationProgress
                             * @static
                             * @param {google.spanner.admin.database.v1.IOperationProgress} message OperationProgress message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            OperationProgress.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.progressPercent != null && Object.hasOwnProperty.call(message, "progressPercent"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.progressPercent);
                                if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                                    $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                                    $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified OperationProgress message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.OperationProgress.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.OperationProgress
                             * @static
                             * @param {google.spanner.admin.database.v1.IOperationProgress} message OperationProgress message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            OperationProgress.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an OperationProgress message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.OperationProgress
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.OperationProgress} OperationProgress
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            OperationProgress.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.OperationProgress();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.progressPercent = reader.int32();
                                        break;
                                    case 2:
                                        message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    case 3:
                                        message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an OperationProgress message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.OperationProgress
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.OperationProgress} OperationProgress
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            OperationProgress.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an OperationProgress message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.OperationProgress
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            OperationProgress.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.progressPercent != null && message.hasOwnProperty("progressPercent"))
                                    if (!$util.isInteger(message.progressPercent))
                                        return "progressPercent: integer expected";
                                if (message.startTime != null && message.hasOwnProperty("startTime")) {
                                    var error = $root.google.protobuf.Timestamp.verify(message.startTime);
                                    if (error)
                                        return "startTime." + error;
                                }
                                if (message.endTime != null && message.hasOwnProperty("endTime")) {
                                    var error = $root.google.protobuf.Timestamp.verify(message.endTime);
                                    if (error)
                                        return "endTime." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates an OperationProgress message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.OperationProgress
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.OperationProgress} OperationProgress
                             */
                            OperationProgress.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.OperationProgress)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.OperationProgress();
                                if (object.progressPercent != null)
                                    message.progressPercent = object.progressPercent | 0;
                                if (object.startTime != null) {
                                    if (typeof object.startTime !== "object")
                                        throw TypeError(".google.spanner.admin.database.v1.OperationProgress.startTime: object expected");
                                    message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);
                                }
                                if (object.endTime != null) {
                                    if (typeof object.endTime !== "object")
                                        throw TypeError(".google.spanner.admin.database.v1.OperationProgress.endTime: object expected");
                                    message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an OperationProgress message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.OperationProgress
                             * @static
                             * @param {google.spanner.admin.database.v1.OperationProgress} message OperationProgress
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            OperationProgress.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.progressPercent = 0;
                                    object.startTime = null;
                                    object.endTime = null;
                                }
                                if (message.progressPercent != null && message.hasOwnProperty("progressPercent"))
                                    object.progressPercent = message.progressPercent;
                                if (message.startTime != null && message.hasOwnProperty("startTime"))
                                    object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);
                                if (message.endTime != null && message.hasOwnProperty("endTime"))
                                    object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
                                return object;
                            };
    
                            /**
                             * Converts this OperationProgress to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.OperationProgress
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            OperationProgress.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return OperationProgress;
                        })();
    
                        v1.DatabaseAdmin = (function() {
    
                            /**
                             * Constructs a new DatabaseAdmin service.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents a DatabaseAdmin
                             * @extends $protobuf.rpc.Service
                             * @constructor
                             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                             */
                            function DatabaseAdmin(rpcImpl, requestDelimited, responseDelimited) {
                                $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                            }
    
                            (DatabaseAdmin.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = DatabaseAdmin;
    
                            /**
                             * Creates new DatabaseAdmin service using the specified rpc implementation.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @static
                             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                             * @returns {DatabaseAdmin} RPC service. Useful where requests and/or responses are streamed.
                             */
                            DatabaseAdmin.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                                return new this(rpcImpl, requestDelimited, responseDelimited);
                            };
    
                            /**
                             * Callback as used by {@link google.spanner.admin.database.v1.DatabaseAdmin#listDatabases}.
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @typedef ListDatabasesCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.spanner.admin.database.v1.ListDatabasesResponse} [response] ListDatabasesResponse
                             */
    
                            /**
                             * Calls ListDatabases.
                             * @function listDatabases
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.IListDatabasesRequest} request ListDatabasesRequest message or plain object
                             * @param {google.spanner.admin.database.v1.DatabaseAdmin.ListDatabasesCallback} callback Node-style callback called with the error, if any, and ListDatabasesResponse
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(DatabaseAdmin.prototype.listDatabases = function listDatabases(request, callback) {
                                return this.rpcCall(listDatabases, $root.google.spanner.admin.database.v1.ListDatabasesRequest, $root.google.spanner.admin.database.v1.ListDatabasesResponse, request, callback);
                            }, "name", { value: "ListDatabases" });
    
                            /**
                             * Calls ListDatabases.
                             * @function listDatabases
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.IListDatabasesRequest} request ListDatabasesRequest message or plain object
                             * @returns {Promise<google.spanner.admin.database.v1.ListDatabasesResponse>} Promise
                             * @variation 2
                             */
    
                            /**
                             * Callback as used by {@link google.spanner.admin.database.v1.DatabaseAdmin#createDatabase}.
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @typedef CreateDatabaseCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.longrunning.Operation} [response] Operation
                             */
    
                            /**
                             * Calls CreateDatabase.
                             * @function createDatabase
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.ICreateDatabaseRequest} request CreateDatabaseRequest message or plain object
                             * @param {google.spanner.admin.database.v1.DatabaseAdmin.CreateDatabaseCallback} callback Node-style callback called with the error, if any, and Operation
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(DatabaseAdmin.prototype.createDatabase = function createDatabase(request, callback) {
                                return this.rpcCall(createDatabase, $root.google.spanner.admin.database.v1.CreateDatabaseRequest, $root.google.longrunning.Operation, request, callback);
                            }, "name", { value: "CreateDatabase" });
    
                            /**
                             * Calls CreateDatabase.
                             * @function createDatabase
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.ICreateDatabaseRequest} request CreateDatabaseRequest message or plain object
                             * @returns {Promise<google.longrunning.Operation>} Promise
                             * @variation 2
                             */
    
                            /**
                             * Callback as used by {@link google.spanner.admin.database.v1.DatabaseAdmin#getDatabase}.
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @typedef GetDatabaseCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.spanner.admin.database.v1.Database} [response] Database
                             */
    
                            /**
                             * Calls GetDatabase.
                             * @function getDatabase
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.IGetDatabaseRequest} request GetDatabaseRequest message or plain object
                             * @param {google.spanner.admin.database.v1.DatabaseAdmin.GetDatabaseCallback} callback Node-style callback called with the error, if any, and Database
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(DatabaseAdmin.prototype.getDatabase = function getDatabase(request, callback) {
                                return this.rpcCall(getDatabase, $root.google.spanner.admin.database.v1.GetDatabaseRequest, $root.google.spanner.admin.database.v1.Database, request, callback);
                            }, "name", { value: "GetDatabase" });
    
                            /**
                             * Calls GetDatabase.
                             * @function getDatabase
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.IGetDatabaseRequest} request GetDatabaseRequest message or plain object
                             * @returns {Promise<google.spanner.admin.database.v1.Database>} Promise
                             * @variation 2
                             */
    
                            /**
                             * Callback as used by {@link google.spanner.admin.database.v1.DatabaseAdmin#updateDatabaseDdl}.
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @typedef UpdateDatabaseDdlCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.longrunning.Operation} [response] Operation
                             */
    
                            /**
                             * Calls UpdateDatabaseDdl.
                             * @function updateDatabaseDdl
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.IUpdateDatabaseDdlRequest} request UpdateDatabaseDdlRequest message or plain object
                             * @param {google.spanner.admin.database.v1.DatabaseAdmin.UpdateDatabaseDdlCallback} callback Node-style callback called with the error, if any, and Operation
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(DatabaseAdmin.prototype.updateDatabaseDdl = function updateDatabaseDdl(request, callback) {
                                return this.rpcCall(updateDatabaseDdl, $root.google.spanner.admin.database.v1.UpdateDatabaseDdlRequest, $root.google.longrunning.Operation, request, callback);
                            }, "name", { value: "UpdateDatabaseDdl" });
    
                            /**
                             * Calls UpdateDatabaseDdl.
                             * @function updateDatabaseDdl
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.IUpdateDatabaseDdlRequest} request UpdateDatabaseDdlRequest message or plain object
                             * @returns {Promise<google.longrunning.Operation>} Promise
                             * @variation 2
                             */
    
                            /**
                             * Callback as used by {@link google.spanner.admin.database.v1.DatabaseAdmin#dropDatabase}.
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @typedef DropDatabaseCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.protobuf.Empty} [response] Empty
                             */
    
                            /**
                             * Calls DropDatabase.
                             * @function dropDatabase
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.IDropDatabaseRequest} request DropDatabaseRequest message or plain object
                             * @param {google.spanner.admin.database.v1.DatabaseAdmin.DropDatabaseCallback} callback Node-style callback called with the error, if any, and Empty
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(DatabaseAdmin.prototype.dropDatabase = function dropDatabase(request, callback) {
                                return this.rpcCall(dropDatabase, $root.google.spanner.admin.database.v1.DropDatabaseRequest, $root.google.protobuf.Empty, request, callback);
                            }, "name", { value: "DropDatabase" });
    
                            /**
                             * Calls DropDatabase.
                             * @function dropDatabase
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.IDropDatabaseRequest} request DropDatabaseRequest message or plain object
                             * @returns {Promise<google.protobuf.Empty>} Promise
                             * @variation 2
                             */
    
                            /**
                             * Callback as used by {@link google.spanner.admin.database.v1.DatabaseAdmin#getDatabaseDdl}.
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @typedef GetDatabaseDdlCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.spanner.admin.database.v1.GetDatabaseDdlResponse} [response] GetDatabaseDdlResponse
                             */
    
                            /**
                             * Calls GetDatabaseDdl.
                             * @function getDatabaseDdl
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.IGetDatabaseDdlRequest} request GetDatabaseDdlRequest message or plain object
                             * @param {google.spanner.admin.database.v1.DatabaseAdmin.GetDatabaseDdlCallback} callback Node-style callback called with the error, if any, and GetDatabaseDdlResponse
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(DatabaseAdmin.prototype.getDatabaseDdl = function getDatabaseDdl(request, callback) {
                                return this.rpcCall(getDatabaseDdl, $root.google.spanner.admin.database.v1.GetDatabaseDdlRequest, $root.google.spanner.admin.database.v1.GetDatabaseDdlResponse, request, callback);
                            }, "name", { value: "GetDatabaseDdl" });
    
                            /**
                             * Calls GetDatabaseDdl.
                             * @function getDatabaseDdl
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.IGetDatabaseDdlRequest} request GetDatabaseDdlRequest message or plain object
                             * @returns {Promise<google.spanner.admin.database.v1.GetDatabaseDdlResponse>} Promise
                             * @variation 2
                             */
    
                            /**
                             * Callback as used by {@link google.spanner.admin.database.v1.DatabaseAdmin#setIamPolicy}.
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @typedef SetIamPolicyCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.iam.v1.Policy} [response] Policy
                             */
    
                            /**
                             * Calls SetIamPolicy.
                             * @function setIamPolicy
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.iam.v1.ISetIamPolicyRequest} request SetIamPolicyRequest message or plain object
                             * @param {google.spanner.admin.database.v1.DatabaseAdmin.SetIamPolicyCallback} callback Node-style callback called with the error, if any, and Policy
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(DatabaseAdmin.prototype.setIamPolicy = function setIamPolicy(request, callback) {
                                return this.rpcCall(setIamPolicy, $root.google.iam.v1.SetIamPolicyRequest, $root.google.iam.v1.Policy, request, callback);
                            }, "name", { value: "SetIamPolicy" });
    
                            /**
                             * Calls SetIamPolicy.
                             * @function setIamPolicy
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.iam.v1.ISetIamPolicyRequest} request SetIamPolicyRequest message or plain object
                             * @returns {Promise<google.iam.v1.Policy>} Promise
                             * @variation 2
                             */
    
                            /**
                             * Callback as used by {@link google.spanner.admin.database.v1.DatabaseAdmin#getIamPolicy}.
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @typedef GetIamPolicyCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.iam.v1.Policy} [response] Policy
                             */
    
                            /**
                             * Calls GetIamPolicy.
                             * @function getIamPolicy
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.iam.v1.IGetIamPolicyRequest} request GetIamPolicyRequest message or plain object
                             * @param {google.spanner.admin.database.v1.DatabaseAdmin.GetIamPolicyCallback} callback Node-style callback called with the error, if any, and Policy
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(DatabaseAdmin.prototype.getIamPolicy = function getIamPolicy(request, callback) {
                                return this.rpcCall(getIamPolicy, $root.google.iam.v1.GetIamPolicyRequest, $root.google.iam.v1.Policy, request, callback);
                            }, "name", { value: "GetIamPolicy" });
    
                            /**
                             * Calls GetIamPolicy.
                             * @function getIamPolicy
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.iam.v1.IGetIamPolicyRequest} request GetIamPolicyRequest message or plain object
                             * @returns {Promise<google.iam.v1.Policy>} Promise
                             * @variation 2
                             */
    
                            /**
                             * Callback as used by {@link google.spanner.admin.database.v1.DatabaseAdmin#testIamPermissions}.
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @typedef TestIamPermissionsCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.iam.v1.TestIamPermissionsResponse} [response] TestIamPermissionsResponse
                             */
    
                            /**
                             * Calls TestIamPermissions.
                             * @function testIamPermissions
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.iam.v1.ITestIamPermissionsRequest} request TestIamPermissionsRequest message or plain object
                             * @param {google.spanner.admin.database.v1.DatabaseAdmin.TestIamPermissionsCallback} callback Node-style callback called with the error, if any, and TestIamPermissionsResponse
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(DatabaseAdmin.prototype.testIamPermissions = function testIamPermissions(request, callback) {
                                return this.rpcCall(testIamPermissions, $root.google.iam.v1.TestIamPermissionsRequest, $root.google.iam.v1.TestIamPermissionsResponse, request, callback);
                            }, "name", { value: "TestIamPermissions" });
    
                            /**
                             * Calls TestIamPermissions.
                             * @function testIamPermissions
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.iam.v1.ITestIamPermissionsRequest} request TestIamPermissionsRequest message or plain object
                             * @returns {Promise<google.iam.v1.TestIamPermissionsResponse>} Promise
                             * @variation 2
                             */
    
                            /**
                             * Callback as used by {@link google.spanner.admin.database.v1.DatabaseAdmin#createBackup}.
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @typedef CreateBackupCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.longrunning.Operation} [response] Operation
                             */
    
                            /**
                             * Calls CreateBackup.
                             * @function createBackup
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.ICreateBackupRequest} request CreateBackupRequest message or plain object
                             * @param {google.spanner.admin.database.v1.DatabaseAdmin.CreateBackupCallback} callback Node-style callback called with the error, if any, and Operation
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(DatabaseAdmin.prototype.createBackup = function createBackup(request, callback) {
                                return this.rpcCall(createBackup, $root.google.spanner.admin.database.v1.CreateBackupRequest, $root.google.longrunning.Operation, request, callback);
                            }, "name", { value: "CreateBackup" });
    
                            /**
                             * Calls CreateBackup.
                             * @function createBackup
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.ICreateBackupRequest} request CreateBackupRequest message or plain object
                             * @returns {Promise<google.longrunning.Operation>} Promise
                             * @variation 2
                             */
    
                            /**
                             * Callback as used by {@link google.spanner.admin.database.v1.DatabaseAdmin#getBackup}.
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @typedef GetBackupCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.spanner.admin.database.v1.Backup} [response] Backup
                             */
    
                            /**
                             * Calls GetBackup.
                             * @function getBackup
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.IGetBackupRequest} request GetBackupRequest message or plain object
                             * @param {google.spanner.admin.database.v1.DatabaseAdmin.GetBackupCallback} callback Node-style callback called with the error, if any, and Backup
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(DatabaseAdmin.prototype.getBackup = function getBackup(request, callback) {
                                return this.rpcCall(getBackup, $root.google.spanner.admin.database.v1.GetBackupRequest, $root.google.spanner.admin.database.v1.Backup, request, callback);
                            }, "name", { value: "GetBackup" });
    
                            /**
                             * Calls GetBackup.
                             * @function getBackup
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.IGetBackupRequest} request GetBackupRequest message or plain object
                             * @returns {Promise<google.spanner.admin.database.v1.Backup>} Promise
                             * @variation 2
                             */
    
                            /**
                             * Callback as used by {@link google.spanner.admin.database.v1.DatabaseAdmin#updateBackup}.
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @typedef UpdateBackupCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.spanner.admin.database.v1.Backup} [response] Backup
                             */
    
                            /**
                             * Calls UpdateBackup.
                             * @function updateBackup
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.IUpdateBackupRequest} request UpdateBackupRequest message or plain object
                             * @param {google.spanner.admin.database.v1.DatabaseAdmin.UpdateBackupCallback} callback Node-style callback called with the error, if any, and Backup
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(DatabaseAdmin.prototype.updateBackup = function updateBackup(request, callback) {
                                return this.rpcCall(updateBackup, $root.google.spanner.admin.database.v1.UpdateBackupRequest, $root.google.spanner.admin.database.v1.Backup, request, callback);
                            }, "name", { value: "UpdateBackup" });
    
                            /**
                             * Calls UpdateBackup.
                             * @function updateBackup
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.IUpdateBackupRequest} request UpdateBackupRequest message or plain object
                             * @returns {Promise<google.spanner.admin.database.v1.Backup>} Promise
                             * @variation 2
                             */
    
                            /**
                             * Callback as used by {@link google.spanner.admin.database.v1.DatabaseAdmin#deleteBackup}.
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @typedef DeleteBackupCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.protobuf.Empty} [response] Empty
                             */
    
                            /**
                             * Calls DeleteBackup.
                             * @function deleteBackup
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.IDeleteBackupRequest} request DeleteBackupRequest message or plain object
                             * @param {google.spanner.admin.database.v1.DatabaseAdmin.DeleteBackupCallback} callback Node-style callback called with the error, if any, and Empty
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(DatabaseAdmin.prototype.deleteBackup = function deleteBackup(request, callback) {
                                return this.rpcCall(deleteBackup, $root.google.spanner.admin.database.v1.DeleteBackupRequest, $root.google.protobuf.Empty, request, callback);
                            }, "name", { value: "DeleteBackup" });
    
                            /**
                             * Calls DeleteBackup.
                             * @function deleteBackup
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.IDeleteBackupRequest} request DeleteBackupRequest message or plain object
                             * @returns {Promise<google.protobuf.Empty>} Promise
                             * @variation 2
                             */
    
                            /**
                             * Callback as used by {@link google.spanner.admin.database.v1.DatabaseAdmin#listBackups}.
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @typedef ListBackupsCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.spanner.admin.database.v1.ListBackupsResponse} [response] ListBackupsResponse
                             */
    
                            /**
                             * Calls ListBackups.
                             * @function listBackups
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.IListBackupsRequest} request ListBackupsRequest message or plain object
                             * @param {google.spanner.admin.database.v1.DatabaseAdmin.ListBackupsCallback} callback Node-style callback called with the error, if any, and ListBackupsResponse
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(DatabaseAdmin.prototype.listBackups = function listBackups(request, callback) {
                                return this.rpcCall(listBackups, $root.google.spanner.admin.database.v1.ListBackupsRequest, $root.google.spanner.admin.database.v1.ListBackupsResponse, request, callback);
                            }, "name", { value: "ListBackups" });
    
                            /**
                             * Calls ListBackups.
                             * @function listBackups
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.IListBackupsRequest} request ListBackupsRequest message or plain object
                             * @returns {Promise<google.spanner.admin.database.v1.ListBackupsResponse>} Promise
                             * @variation 2
                             */
    
                            /**
                             * Callback as used by {@link google.spanner.admin.database.v1.DatabaseAdmin#restoreDatabase}.
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @typedef RestoreDatabaseCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.longrunning.Operation} [response] Operation
                             */
    
                            /**
                             * Calls RestoreDatabase.
                             * @function restoreDatabase
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.IRestoreDatabaseRequest} request RestoreDatabaseRequest message or plain object
                             * @param {google.spanner.admin.database.v1.DatabaseAdmin.RestoreDatabaseCallback} callback Node-style callback called with the error, if any, and Operation
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(DatabaseAdmin.prototype.restoreDatabase = function restoreDatabase(request, callback) {
                                return this.rpcCall(restoreDatabase, $root.google.spanner.admin.database.v1.RestoreDatabaseRequest, $root.google.longrunning.Operation, request, callback);
                            }, "name", { value: "RestoreDatabase" });
    
                            /**
                             * Calls RestoreDatabase.
                             * @function restoreDatabase
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.IRestoreDatabaseRequest} request RestoreDatabaseRequest message or plain object
                             * @returns {Promise<google.longrunning.Operation>} Promise
                             * @variation 2
                             */
    
                            /**
                             * Callback as used by {@link google.spanner.admin.database.v1.DatabaseAdmin#listDatabaseOperations}.
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @typedef ListDatabaseOperationsCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.spanner.admin.database.v1.ListDatabaseOperationsResponse} [response] ListDatabaseOperationsResponse
                             */
    
                            /**
                             * Calls ListDatabaseOperations.
                             * @function listDatabaseOperations
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.IListDatabaseOperationsRequest} request ListDatabaseOperationsRequest message or plain object
                             * @param {google.spanner.admin.database.v1.DatabaseAdmin.ListDatabaseOperationsCallback} callback Node-style callback called with the error, if any, and ListDatabaseOperationsResponse
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(DatabaseAdmin.prototype.listDatabaseOperations = function listDatabaseOperations(request, callback) {
                                return this.rpcCall(listDatabaseOperations, $root.google.spanner.admin.database.v1.ListDatabaseOperationsRequest, $root.google.spanner.admin.database.v1.ListDatabaseOperationsResponse, request, callback);
                            }, "name", { value: "ListDatabaseOperations" });
    
                            /**
                             * Calls ListDatabaseOperations.
                             * @function listDatabaseOperations
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.IListDatabaseOperationsRequest} request ListDatabaseOperationsRequest message or plain object
                             * @returns {Promise<google.spanner.admin.database.v1.ListDatabaseOperationsResponse>} Promise
                             * @variation 2
                             */
    
                            /**
                             * Callback as used by {@link google.spanner.admin.database.v1.DatabaseAdmin#listBackupOperations}.
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @typedef ListBackupOperationsCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.spanner.admin.database.v1.ListBackupOperationsResponse} [response] ListBackupOperationsResponse
                             */
    
                            /**
                             * Calls ListBackupOperations.
                             * @function listBackupOperations
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.IListBackupOperationsRequest} request ListBackupOperationsRequest message or plain object
                             * @param {google.spanner.admin.database.v1.DatabaseAdmin.ListBackupOperationsCallback} callback Node-style callback called with the error, if any, and ListBackupOperationsResponse
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(DatabaseAdmin.prototype.listBackupOperations = function listBackupOperations(request, callback) {
                                return this.rpcCall(listBackupOperations, $root.google.spanner.admin.database.v1.ListBackupOperationsRequest, $root.google.spanner.admin.database.v1.ListBackupOperationsResponse, request, callback);
                            }, "name", { value: "ListBackupOperations" });
    
                            /**
                             * Calls ListBackupOperations.
                             * @function listBackupOperations
                             * @memberof google.spanner.admin.database.v1.DatabaseAdmin
                             * @instance
                             * @param {google.spanner.admin.database.v1.IListBackupOperationsRequest} request ListBackupOperationsRequest message or plain object
                             * @returns {Promise<google.spanner.admin.database.v1.ListBackupOperationsResponse>} Promise
                             * @variation 2
                             */
    
                            return DatabaseAdmin;
                        })();
    
                        v1.RestoreInfo = (function() {
    
                            /**
                             * Properties of a RestoreInfo.
                             * @memberof google.spanner.admin.database.v1
                             * @interface IRestoreInfo
                             * @property {google.spanner.admin.database.v1.RestoreSourceType|null} [sourceType] RestoreInfo sourceType
                             * @property {google.spanner.admin.database.v1.IBackupInfo|null} [backupInfo] RestoreInfo backupInfo
                             */
    
                            /**
                             * Constructs a new RestoreInfo.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents a RestoreInfo.
                             * @implements IRestoreInfo
                             * @constructor
                             * @param {google.spanner.admin.database.v1.IRestoreInfo=} [properties] Properties to set
                             */
                            function RestoreInfo(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * RestoreInfo sourceType.
                             * @member {google.spanner.admin.database.v1.RestoreSourceType} sourceType
                             * @memberof google.spanner.admin.database.v1.RestoreInfo
                             * @instance
                             */
                            RestoreInfo.prototype.sourceType = 0;
    
                            /**
                             * RestoreInfo backupInfo.
                             * @member {google.spanner.admin.database.v1.IBackupInfo|null|undefined} backupInfo
                             * @memberof google.spanner.admin.database.v1.RestoreInfo
                             * @instance
                             */
                            RestoreInfo.prototype.backupInfo = null;
    
                            // OneOf field names bound to virtual getters and setters
                            var $oneOfFields;
    
                            /**
                             * RestoreInfo sourceInfo.
                             * @member {"backupInfo"|undefined} sourceInfo
                             * @memberof google.spanner.admin.database.v1.RestoreInfo
                             * @instance
                             */
                            Object.defineProperty(RestoreInfo.prototype, "sourceInfo", {
                                get: $util.oneOfGetter($oneOfFields = ["backupInfo"]),
                                set: $util.oneOfSetter($oneOfFields)
                            });
    
                            /**
                             * Creates a new RestoreInfo instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.RestoreInfo
                             * @static
                             * @param {google.spanner.admin.database.v1.IRestoreInfo=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.RestoreInfo} RestoreInfo instance
                             */
                            RestoreInfo.create = function create(properties) {
                                return new RestoreInfo(properties);
                            };
    
                            /**
                             * Encodes the specified RestoreInfo message. Does not implicitly {@link google.spanner.admin.database.v1.RestoreInfo.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.RestoreInfo
                             * @static
                             * @param {google.spanner.admin.database.v1.IRestoreInfo} message RestoreInfo message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            RestoreInfo.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.sourceType != null && Object.hasOwnProperty.call(message, "sourceType"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.sourceType);
                                if (message.backupInfo != null && Object.hasOwnProperty.call(message, "backupInfo"))
                                    $root.google.spanner.admin.database.v1.BackupInfo.encode(message.backupInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified RestoreInfo message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.RestoreInfo.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.RestoreInfo
                             * @static
                             * @param {google.spanner.admin.database.v1.IRestoreInfo} message RestoreInfo message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            RestoreInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a RestoreInfo message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.RestoreInfo
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.RestoreInfo} RestoreInfo
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            RestoreInfo.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.RestoreInfo();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.sourceType = reader.int32();
                                        break;
                                    case 2:
                                        message.backupInfo = $root.google.spanner.admin.database.v1.BackupInfo.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a RestoreInfo message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.RestoreInfo
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.RestoreInfo} RestoreInfo
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            RestoreInfo.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a RestoreInfo message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.RestoreInfo
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            RestoreInfo.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                var properties = {};
                                if (message.sourceType != null && message.hasOwnProperty("sourceType"))
                                    switch (message.sourceType) {
                                    default:
                                        return "sourceType: enum value expected";
                                    case 0:
                                    case 1:
                                        break;
                                    }
                                if (message.backupInfo != null && message.hasOwnProperty("backupInfo")) {
                                    properties.sourceInfo = 1;
                                    {
                                        var error = $root.google.spanner.admin.database.v1.BackupInfo.verify(message.backupInfo);
                                        if (error)
                                            return "backupInfo." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates a RestoreInfo message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.RestoreInfo
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.RestoreInfo} RestoreInfo
                             */
                            RestoreInfo.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.RestoreInfo)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.RestoreInfo();
                                switch (object.sourceType) {
                                case "TYPE_UNSPECIFIED":
                                case 0:
                                    message.sourceType = 0;
                                    break;
                                case "BACKUP":
                                case 1:
                                    message.sourceType = 1;
                                    break;
                                }
                                if (object.backupInfo != null) {
                                    if (typeof object.backupInfo !== "object")
                                        throw TypeError(".google.spanner.admin.database.v1.RestoreInfo.backupInfo: object expected");
                                    message.backupInfo = $root.google.spanner.admin.database.v1.BackupInfo.fromObject(object.backupInfo);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a RestoreInfo message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.RestoreInfo
                             * @static
                             * @param {google.spanner.admin.database.v1.RestoreInfo} message RestoreInfo
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            RestoreInfo.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.sourceType = options.enums === String ? "TYPE_UNSPECIFIED" : 0;
                                if (message.sourceType != null && message.hasOwnProperty("sourceType"))
                                    object.sourceType = options.enums === String ? $root.google.spanner.admin.database.v1.RestoreSourceType[message.sourceType] : message.sourceType;
                                if (message.backupInfo != null && message.hasOwnProperty("backupInfo")) {
                                    object.backupInfo = $root.google.spanner.admin.database.v1.BackupInfo.toObject(message.backupInfo, options);
                                    if (options.oneofs)
                                        object.sourceInfo = "backupInfo";
                                }
                                return object;
                            };
    
                            /**
                             * Converts this RestoreInfo to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.RestoreInfo
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            RestoreInfo.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return RestoreInfo;
                        })();
    
                        v1.Database = (function() {
    
                            /**
                             * Properties of a Database.
                             * @memberof google.spanner.admin.database.v1
                             * @interface IDatabase
                             * @property {string|null} [name] Database name
                             * @property {google.spanner.admin.database.v1.Database.State|null} [state] Database state
                             * @property {google.protobuf.ITimestamp|null} [createTime] Database createTime
                             * @property {google.spanner.admin.database.v1.IRestoreInfo|null} [restoreInfo] Database restoreInfo
                             */
    
                            /**
                             * Constructs a new Database.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents a Database.
                             * @implements IDatabase
                             * @constructor
                             * @param {google.spanner.admin.database.v1.IDatabase=} [properties] Properties to set
                             */
                            function Database(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Database name.
                             * @member {string} name
                             * @memberof google.spanner.admin.database.v1.Database
                             * @instance
                             */
                            Database.prototype.name = "";
    
                            /**
                             * Database state.
                             * @member {google.spanner.admin.database.v1.Database.State} state
                             * @memberof google.spanner.admin.database.v1.Database
                             * @instance
                             */
                            Database.prototype.state = 0;
    
                            /**
                             * Database createTime.
                             * @member {google.protobuf.ITimestamp|null|undefined} createTime
                             * @memberof google.spanner.admin.database.v1.Database
                             * @instance
                             */
                            Database.prototype.createTime = null;
    
                            /**
                             * Database restoreInfo.
                             * @member {google.spanner.admin.database.v1.IRestoreInfo|null|undefined} restoreInfo
                             * @memberof google.spanner.admin.database.v1.Database
                             * @instance
                             */
                            Database.prototype.restoreInfo = null;
    
                            /**
                             * Creates a new Database instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.Database
                             * @static
                             * @param {google.spanner.admin.database.v1.IDatabase=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.Database} Database instance
                             */
                            Database.create = function create(properties) {
                                return new Database(properties);
                            };
    
                            /**
                             * Encodes the specified Database message. Does not implicitly {@link google.spanner.admin.database.v1.Database.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.Database
                             * @static
                             * @param {google.spanner.admin.database.v1.IDatabase} message Database message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Database.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.state);
                                if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                                    $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                if (message.restoreInfo != null && Object.hasOwnProperty.call(message, "restoreInfo"))
                                    $root.google.spanner.admin.database.v1.RestoreInfo.encode(message.restoreInfo, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Database message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.Database.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.Database
                             * @static
                             * @param {google.spanner.admin.database.v1.IDatabase} message Database message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Database.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a Database message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.Database
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.Database} Database
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Database.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.Database();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.name = reader.string();
                                        break;
                                    case 2:
                                        message.state = reader.int32();
                                        break;
                                    case 3:
                                        message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    case 4:
                                        message.restoreInfo = $root.google.spanner.admin.database.v1.RestoreInfo.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a Database message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.Database
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.Database} Database
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Database.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a Database message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.Database
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Database.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    if (!$util.isString(message.name))
                                        return "name: string expected";
                                if (message.state != null && message.hasOwnProperty("state"))
                                    switch (message.state) {
                                    default:
                                        return "state: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                        break;
                                    }
                                if (message.createTime != null && message.hasOwnProperty("createTime")) {
                                    var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                                    if (error)
                                        return "createTime." + error;
                                }
                                if (message.restoreInfo != null && message.hasOwnProperty("restoreInfo")) {
                                    var error = $root.google.spanner.admin.database.v1.RestoreInfo.verify(message.restoreInfo);
                                    if (error)
                                        return "restoreInfo." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a Database message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.Database
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.Database} Database
                             */
                            Database.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.Database)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.Database();
                                if (object.name != null)
                                    message.name = String(object.name);
                                switch (object.state) {
                                case "STATE_UNSPECIFIED":
                                case 0:
                                    message.state = 0;
                                    break;
                                case "CREATING":
                                case 1:
                                    message.state = 1;
                                    break;
                                case "READY":
                                case 2:
                                    message.state = 2;
                                    break;
                                case "READY_OPTIMIZING":
                                case 3:
                                    message.state = 3;
                                    break;
                                }
                                if (object.createTime != null) {
                                    if (typeof object.createTime !== "object")
                                        throw TypeError(".google.spanner.admin.database.v1.Database.createTime: object expected");
                                    message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                                }
                                if (object.restoreInfo != null) {
                                    if (typeof object.restoreInfo !== "object")
                                        throw TypeError(".google.spanner.admin.database.v1.Database.restoreInfo: object expected");
                                    message.restoreInfo = $root.google.spanner.admin.database.v1.RestoreInfo.fromObject(object.restoreInfo);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a Database message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.Database
                             * @static
                             * @param {google.spanner.admin.database.v1.Database} message Database
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Database.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.name = "";
                                    object.state = options.enums === String ? "STATE_UNSPECIFIED" : 0;
                                    object.createTime = null;
                                    object.restoreInfo = null;
                                }
                                if (message.name != null && message.hasOwnProperty("name"))
                                    object.name = message.name;
                                if (message.state != null && message.hasOwnProperty("state"))
                                    object.state = options.enums === String ? $root.google.spanner.admin.database.v1.Database.State[message.state] : message.state;
                                if (message.createTime != null && message.hasOwnProperty("createTime"))
                                    object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                                if (message.restoreInfo != null && message.hasOwnProperty("restoreInfo"))
                                    object.restoreInfo = $root.google.spanner.admin.database.v1.RestoreInfo.toObject(message.restoreInfo, options);
                                return object;
                            };
    
                            /**
                             * Converts this Database to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.Database
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Database.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * State enum.
                             * @name google.spanner.admin.database.v1.Database.State
                             * @enum {number}
                             * @property {number} STATE_UNSPECIFIED=0 STATE_UNSPECIFIED value
                             * @property {number} CREATING=1 CREATING value
                             * @property {number} READY=2 READY value
                             * @property {number} READY_OPTIMIZING=3 READY_OPTIMIZING value
                             */
                            Database.State = (function() {
                                var valuesById = {}, values = Object.create(valuesById);
                                values[valuesById[0] = "STATE_UNSPECIFIED"] = 0;
                                values[valuesById[1] = "CREATING"] = 1;
                                values[valuesById[2] = "READY"] = 2;
                                values[valuesById[3] = "READY_OPTIMIZING"] = 3;
                                return values;
                            })();
    
                            return Database;
                        })();
    
                        v1.ListDatabasesRequest = (function() {
    
                            /**
                             * Properties of a ListDatabasesRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @interface IListDatabasesRequest
                             * @property {string|null} [parent] ListDatabasesRequest parent
                             * @property {number|null} [pageSize] ListDatabasesRequest pageSize
                             * @property {string|null} [pageToken] ListDatabasesRequest pageToken
                             */
    
                            /**
                             * Constructs a new ListDatabasesRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents a ListDatabasesRequest.
                             * @implements IListDatabasesRequest
                             * @constructor
                             * @param {google.spanner.admin.database.v1.IListDatabasesRequest=} [properties] Properties to set
                             */
                            function ListDatabasesRequest(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ListDatabasesRequest parent.
                             * @member {string} parent
                             * @memberof google.spanner.admin.database.v1.ListDatabasesRequest
                             * @instance
                             */
                            ListDatabasesRequest.prototype.parent = "";
    
                            /**
                             * ListDatabasesRequest pageSize.
                             * @member {number} pageSize
                             * @memberof google.spanner.admin.database.v1.ListDatabasesRequest
                             * @instance
                             */
                            ListDatabasesRequest.prototype.pageSize = 0;
    
                            /**
                             * ListDatabasesRequest pageToken.
                             * @member {string} pageToken
                             * @memberof google.spanner.admin.database.v1.ListDatabasesRequest
                             * @instance
                             */
                            ListDatabasesRequest.prototype.pageToken = "";
    
                            /**
                             * Creates a new ListDatabasesRequest instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.ListDatabasesRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IListDatabasesRequest=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.ListDatabasesRequest} ListDatabasesRequest instance
                             */
                            ListDatabasesRequest.create = function create(properties) {
                                return new ListDatabasesRequest(properties);
                            };
    
                            /**
                             * Encodes the specified ListDatabasesRequest message. Does not implicitly {@link google.spanner.admin.database.v1.ListDatabasesRequest.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.ListDatabasesRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IListDatabasesRequest} message ListDatabasesRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ListDatabasesRequest.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                                if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pageSize);
                                if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.pageToken);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ListDatabasesRequest message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.ListDatabasesRequest.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.ListDatabasesRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IListDatabasesRequest} message ListDatabasesRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ListDatabasesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a ListDatabasesRequest message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.ListDatabasesRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.ListDatabasesRequest} ListDatabasesRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ListDatabasesRequest.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.ListDatabasesRequest();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.parent = reader.string();
                                        break;
                                    case 3:
                                        message.pageSize = reader.int32();
                                        break;
                                    case 4:
                                        message.pageToken = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a ListDatabasesRequest message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.ListDatabasesRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.ListDatabasesRequest} ListDatabasesRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ListDatabasesRequest.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a ListDatabasesRequest message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.ListDatabasesRequest
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ListDatabasesRequest.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.parent != null && message.hasOwnProperty("parent"))
                                    if (!$util.isString(message.parent))
                                        return "parent: string expected";
                                if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                    if (!$util.isInteger(message.pageSize))
                                        return "pageSize: integer expected";
                                if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                    if (!$util.isString(message.pageToken))
                                        return "pageToken: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a ListDatabasesRequest message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.ListDatabasesRequest
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.ListDatabasesRequest} ListDatabasesRequest
                             */
                            ListDatabasesRequest.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.ListDatabasesRequest)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.ListDatabasesRequest();
                                if (object.parent != null)
                                    message.parent = String(object.parent);
                                if (object.pageSize != null)
                                    message.pageSize = object.pageSize | 0;
                                if (object.pageToken != null)
                                    message.pageToken = String(object.pageToken);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a ListDatabasesRequest message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.ListDatabasesRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.ListDatabasesRequest} message ListDatabasesRequest
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ListDatabasesRequest.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.parent = "";
                                    object.pageSize = 0;
                                    object.pageToken = "";
                                }
                                if (message.parent != null && message.hasOwnProperty("parent"))
                                    object.parent = message.parent;
                                if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                    object.pageSize = message.pageSize;
                                if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                    object.pageToken = message.pageToken;
                                return object;
                            };
    
                            /**
                             * Converts this ListDatabasesRequest to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.ListDatabasesRequest
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ListDatabasesRequest.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return ListDatabasesRequest;
                        })();
    
                        v1.ListDatabasesResponse = (function() {
    
                            /**
                             * Properties of a ListDatabasesResponse.
                             * @memberof google.spanner.admin.database.v1
                             * @interface IListDatabasesResponse
                             * @property {Array.<google.spanner.admin.database.v1.IDatabase>|null} [databases] ListDatabasesResponse databases
                             * @property {string|null} [nextPageToken] ListDatabasesResponse nextPageToken
                             */
    
                            /**
                             * Constructs a new ListDatabasesResponse.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents a ListDatabasesResponse.
                             * @implements IListDatabasesResponse
                             * @constructor
                             * @param {google.spanner.admin.database.v1.IListDatabasesResponse=} [properties] Properties to set
                             */
                            function ListDatabasesResponse(properties) {
                                this.databases = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ListDatabasesResponse databases.
                             * @member {Array.<google.spanner.admin.database.v1.IDatabase>} databases
                             * @memberof google.spanner.admin.database.v1.ListDatabasesResponse
                             * @instance
                             */
                            ListDatabasesResponse.prototype.databases = $util.emptyArray;
    
                            /**
                             * ListDatabasesResponse nextPageToken.
                             * @member {string} nextPageToken
                             * @memberof google.spanner.admin.database.v1.ListDatabasesResponse
                             * @instance
                             */
                            ListDatabasesResponse.prototype.nextPageToken = "";
    
                            /**
                             * Creates a new ListDatabasesResponse instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.ListDatabasesResponse
                             * @static
                             * @param {google.spanner.admin.database.v1.IListDatabasesResponse=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.ListDatabasesResponse} ListDatabasesResponse instance
                             */
                            ListDatabasesResponse.create = function create(properties) {
                                return new ListDatabasesResponse(properties);
                            };
    
                            /**
                             * Encodes the specified ListDatabasesResponse message. Does not implicitly {@link google.spanner.admin.database.v1.ListDatabasesResponse.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.ListDatabasesResponse
                             * @static
                             * @param {google.spanner.admin.database.v1.IListDatabasesResponse} message ListDatabasesResponse message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ListDatabasesResponse.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.databases != null && message.databases.length)
                                    for (var i = 0; i < message.databases.length; ++i)
                                        $root.google.spanner.admin.database.v1.Database.encode(message.databases[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ListDatabasesResponse message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.ListDatabasesResponse.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.ListDatabasesResponse
                             * @static
                             * @param {google.spanner.admin.database.v1.IListDatabasesResponse} message ListDatabasesResponse message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ListDatabasesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a ListDatabasesResponse message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.ListDatabasesResponse
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.ListDatabasesResponse} ListDatabasesResponse
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ListDatabasesResponse.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.ListDatabasesResponse();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        if (!(message.databases && message.databases.length))
                                            message.databases = [];
                                        message.databases.push($root.google.spanner.admin.database.v1.Database.decode(reader, reader.uint32()));
                                        break;
                                    case 2:
                                        message.nextPageToken = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a ListDatabasesResponse message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.ListDatabasesResponse
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.ListDatabasesResponse} ListDatabasesResponse
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ListDatabasesResponse.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a ListDatabasesResponse message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.ListDatabasesResponse
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ListDatabasesResponse.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.databases != null && message.hasOwnProperty("databases")) {
                                    if (!Array.isArray(message.databases))
                                        return "databases: array expected";
                                    for (var i = 0; i < message.databases.length; ++i) {
                                        var error = $root.google.spanner.admin.database.v1.Database.verify(message.databases[i]);
                                        if (error)
                                            return "databases." + error;
                                    }
                                }
                                if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                    if (!$util.isString(message.nextPageToken))
                                        return "nextPageToken: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a ListDatabasesResponse message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.ListDatabasesResponse
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.ListDatabasesResponse} ListDatabasesResponse
                             */
                            ListDatabasesResponse.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.ListDatabasesResponse)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.ListDatabasesResponse();
                                if (object.databases) {
                                    if (!Array.isArray(object.databases))
                                        throw TypeError(".google.spanner.admin.database.v1.ListDatabasesResponse.databases: array expected");
                                    message.databases = [];
                                    for (var i = 0; i < object.databases.length; ++i) {
                                        if (typeof object.databases[i] !== "object")
                                            throw TypeError(".google.spanner.admin.database.v1.ListDatabasesResponse.databases: object expected");
                                        message.databases[i] = $root.google.spanner.admin.database.v1.Database.fromObject(object.databases[i]);
                                    }
                                }
                                if (object.nextPageToken != null)
                                    message.nextPageToken = String(object.nextPageToken);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a ListDatabasesResponse message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.ListDatabasesResponse
                             * @static
                             * @param {google.spanner.admin.database.v1.ListDatabasesResponse} message ListDatabasesResponse
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ListDatabasesResponse.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.databases = [];
                                if (options.defaults)
                                    object.nextPageToken = "";
                                if (message.databases && message.databases.length) {
                                    object.databases = [];
                                    for (var j = 0; j < message.databases.length; ++j)
                                        object.databases[j] = $root.google.spanner.admin.database.v1.Database.toObject(message.databases[j], options);
                                }
                                if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                    object.nextPageToken = message.nextPageToken;
                                return object;
                            };
    
                            /**
                             * Converts this ListDatabasesResponse to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.ListDatabasesResponse
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ListDatabasesResponse.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return ListDatabasesResponse;
                        })();
    
                        v1.CreateDatabaseRequest = (function() {
    
                            /**
                             * Properties of a CreateDatabaseRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @interface ICreateDatabaseRequest
                             * @property {string|null} [parent] CreateDatabaseRequest parent
                             * @property {string|null} [createStatement] CreateDatabaseRequest createStatement
                             * @property {Array.<string>|null} [extraStatements] CreateDatabaseRequest extraStatements
                             */
    
                            /**
                             * Constructs a new CreateDatabaseRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents a CreateDatabaseRequest.
                             * @implements ICreateDatabaseRequest
                             * @constructor
                             * @param {google.spanner.admin.database.v1.ICreateDatabaseRequest=} [properties] Properties to set
                             */
                            function CreateDatabaseRequest(properties) {
                                this.extraStatements = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * CreateDatabaseRequest parent.
                             * @member {string} parent
                             * @memberof google.spanner.admin.database.v1.CreateDatabaseRequest
                             * @instance
                             */
                            CreateDatabaseRequest.prototype.parent = "";
    
                            /**
                             * CreateDatabaseRequest createStatement.
                             * @member {string} createStatement
                             * @memberof google.spanner.admin.database.v1.CreateDatabaseRequest
                             * @instance
                             */
                            CreateDatabaseRequest.prototype.createStatement = "";
    
                            /**
                             * CreateDatabaseRequest extraStatements.
                             * @member {Array.<string>} extraStatements
                             * @memberof google.spanner.admin.database.v1.CreateDatabaseRequest
                             * @instance
                             */
                            CreateDatabaseRequest.prototype.extraStatements = $util.emptyArray;
    
                            /**
                             * Creates a new CreateDatabaseRequest instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.CreateDatabaseRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.ICreateDatabaseRequest=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.CreateDatabaseRequest} CreateDatabaseRequest instance
                             */
                            CreateDatabaseRequest.create = function create(properties) {
                                return new CreateDatabaseRequest(properties);
                            };
    
                            /**
                             * Encodes the specified CreateDatabaseRequest message. Does not implicitly {@link google.spanner.admin.database.v1.CreateDatabaseRequest.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.CreateDatabaseRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.ICreateDatabaseRequest} message CreateDatabaseRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CreateDatabaseRequest.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                                if (message.createStatement != null && Object.hasOwnProperty.call(message, "createStatement"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.createStatement);
                                if (message.extraStatements != null && message.extraStatements.length)
                                    for (var i = 0; i < message.extraStatements.length; ++i)
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.extraStatements[i]);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified CreateDatabaseRequest message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.CreateDatabaseRequest.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.CreateDatabaseRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.ICreateDatabaseRequest} message CreateDatabaseRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CreateDatabaseRequest.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a CreateDatabaseRequest message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.CreateDatabaseRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.CreateDatabaseRequest} CreateDatabaseRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CreateDatabaseRequest.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.CreateDatabaseRequest();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.parent = reader.string();
                                        break;
                                    case 2:
                                        message.createStatement = reader.string();
                                        break;
                                    case 3:
                                        if (!(message.extraStatements && message.extraStatements.length))
                                            message.extraStatements = [];
                                        message.extraStatements.push(reader.string());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a CreateDatabaseRequest message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.CreateDatabaseRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.CreateDatabaseRequest} CreateDatabaseRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CreateDatabaseRequest.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a CreateDatabaseRequest message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.CreateDatabaseRequest
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            CreateDatabaseRequest.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.parent != null && message.hasOwnProperty("parent"))
                                    if (!$util.isString(message.parent))
                                        return "parent: string expected";
                                if (message.createStatement != null && message.hasOwnProperty("createStatement"))
                                    if (!$util.isString(message.createStatement))
                                        return "createStatement: string expected";
                                if (message.extraStatements != null && message.hasOwnProperty("extraStatements")) {
                                    if (!Array.isArray(message.extraStatements))
                                        return "extraStatements: array expected";
                                    for (var i = 0; i < message.extraStatements.length; ++i)
                                        if (!$util.isString(message.extraStatements[i]))
                                            return "extraStatements: string[] expected";
                                }
                                return null;
                            };
    
                            /**
                             * Creates a CreateDatabaseRequest message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.CreateDatabaseRequest
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.CreateDatabaseRequest} CreateDatabaseRequest
                             */
                            CreateDatabaseRequest.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.CreateDatabaseRequest)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.CreateDatabaseRequest();
                                if (object.parent != null)
                                    message.parent = String(object.parent);
                                if (object.createStatement != null)
                                    message.createStatement = String(object.createStatement);
                                if (object.extraStatements) {
                                    if (!Array.isArray(object.extraStatements))
                                        throw TypeError(".google.spanner.admin.database.v1.CreateDatabaseRequest.extraStatements: array expected");
                                    message.extraStatements = [];
                                    for (var i = 0; i < object.extraStatements.length; ++i)
                                        message.extraStatements[i] = String(object.extraStatements[i]);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a CreateDatabaseRequest message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.CreateDatabaseRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.CreateDatabaseRequest} message CreateDatabaseRequest
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            CreateDatabaseRequest.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.extraStatements = [];
                                if (options.defaults) {
                                    object.parent = "";
                                    object.createStatement = "";
                                }
                                if (message.parent != null && message.hasOwnProperty("parent"))
                                    object.parent = message.parent;
                                if (message.createStatement != null && message.hasOwnProperty("createStatement"))
                                    object.createStatement = message.createStatement;
                                if (message.extraStatements && message.extraStatements.length) {
                                    object.extraStatements = [];
                                    for (var j = 0; j < message.extraStatements.length; ++j)
                                        object.extraStatements[j] = message.extraStatements[j];
                                }
                                return object;
                            };
    
                            /**
                             * Converts this CreateDatabaseRequest to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.CreateDatabaseRequest
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            CreateDatabaseRequest.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return CreateDatabaseRequest;
                        })();
    
                        v1.CreateDatabaseMetadata = (function() {
    
                            /**
                             * Properties of a CreateDatabaseMetadata.
                             * @memberof google.spanner.admin.database.v1
                             * @interface ICreateDatabaseMetadata
                             * @property {string|null} [database] CreateDatabaseMetadata database
                             */
    
                            /**
                             * Constructs a new CreateDatabaseMetadata.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents a CreateDatabaseMetadata.
                             * @implements ICreateDatabaseMetadata
                             * @constructor
                             * @param {google.spanner.admin.database.v1.ICreateDatabaseMetadata=} [properties] Properties to set
                             */
                            function CreateDatabaseMetadata(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * CreateDatabaseMetadata database.
                             * @member {string} database
                             * @memberof google.spanner.admin.database.v1.CreateDatabaseMetadata
                             * @instance
                             */
                            CreateDatabaseMetadata.prototype.database = "";
    
                            /**
                             * Creates a new CreateDatabaseMetadata instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.CreateDatabaseMetadata
                             * @static
                             * @param {google.spanner.admin.database.v1.ICreateDatabaseMetadata=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.CreateDatabaseMetadata} CreateDatabaseMetadata instance
                             */
                            CreateDatabaseMetadata.create = function create(properties) {
                                return new CreateDatabaseMetadata(properties);
                            };
    
                            /**
                             * Encodes the specified CreateDatabaseMetadata message. Does not implicitly {@link google.spanner.admin.database.v1.CreateDatabaseMetadata.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.CreateDatabaseMetadata
                             * @static
                             * @param {google.spanner.admin.database.v1.ICreateDatabaseMetadata} message CreateDatabaseMetadata message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CreateDatabaseMetadata.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.database != null && Object.hasOwnProperty.call(message, "database"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.database);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified CreateDatabaseMetadata message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.CreateDatabaseMetadata.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.CreateDatabaseMetadata
                             * @static
                             * @param {google.spanner.admin.database.v1.ICreateDatabaseMetadata} message CreateDatabaseMetadata message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CreateDatabaseMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a CreateDatabaseMetadata message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.CreateDatabaseMetadata
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.CreateDatabaseMetadata} CreateDatabaseMetadata
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CreateDatabaseMetadata.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.CreateDatabaseMetadata();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.database = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a CreateDatabaseMetadata message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.CreateDatabaseMetadata
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.CreateDatabaseMetadata} CreateDatabaseMetadata
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CreateDatabaseMetadata.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a CreateDatabaseMetadata message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.CreateDatabaseMetadata
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            CreateDatabaseMetadata.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.database != null && message.hasOwnProperty("database"))
                                    if (!$util.isString(message.database))
                                        return "database: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a CreateDatabaseMetadata message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.CreateDatabaseMetadata
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.CreateDatabaseMetadata} CreateDatabaseMetadata
                             */
                            CreateDatabaseMetadata.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.CreateDatabaseMetadata)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.CreateDatabaseMetadata();
                                if (object.database != null)
                                    message.database = String(object.database);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a CreateDatabaseMetadata message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.CreateDatabaseMetadata
                             * @static
                             * @param {google.spanner.admin.database.v1.CreateDatabaseMetadata} message CreateDatabaseMetadata
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            CreateDatabaseMetadata.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.database = "";
                                if (message.database != null && message.hasOwnProperty("database"))
                                    object.database = message.database;
                                return object;
                            };
    
                            /**
                             * Converts this CreateDatabaseMetadata to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.CreateDatabaseMetadata
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            CreateDatabaseMetadata.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return CreateDatabaseMetadata;
                        })();
    
                        v1.GetDatabaseRequest = (function() {
    
                            /**
                             * Properties of a GetDatabaseRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @interface IGetDatabaseRequest
                             * @property {string|null} [name] GetDatabaseRequest name
                             */
    
                            /**
                             * Constructs a new GetDatabaseRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents a GetDatabaseRequest.
                             * @implements IGetDatabaseRequest
                             * @constructor
                             * @param {google.spanner.admin.database.v1.IGetDatabaseRequest=} [properties] Properties to set
                             */
                            function GetDatabaseRequest(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * GetDatabaseRequest name.
                             * @member {string} name
                             * @memberof google.spanner.admin.database.v1.GetDatabaseRequest
                             * @instance
                             */
                            GetDatabaseRequest.prototype.name = "";
    
                            /**
                             * Creates a new GetDatabaseRequest instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.GetDatabaseRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IGetDatabaseRequest=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.GetDatabaseRequest} GetDatabaseRequest instance
                             */
                            GetDatabaseRequest.create = function create(properties) {
                                return new GetDatabaseRequest(properties);
                            };
    
                            /**
                             * Encodes the specified GetDatabaseRequest message. Does not implicitly {@link google.spanner.admin.database.v1.GetDatabaseRequest.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.GetDatabaseRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IGetDatabaseRequest} message GetDatabaseRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            GetDatabaseRequest.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified GetDatabaseRequest message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.GetDatabaseRequest.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.GetDatabaseRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IGetDatabaseRequest} message GetDatabaseRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            GetDatabaseRequest.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a GetDatabaseRequest message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.GetDatabaseRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.GetDatabaseRequest} GetDatabaseRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            GetDatabaseRequest.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.GetDatabaseRequest();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.name = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a GetDatabaseRequest message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.GetDatabaseRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.GetDatabaseRequest} GetDatabaseRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            GetDatabaseRequest.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a GetDatabaseRequest message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.GetDatabaseRequest
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            GetDatabaseRequest.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    if (!$util.isString(message.name))
                                        return "name: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a GetDatabaseRequest message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.GetDatabaseRequest
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.GetDatabaseRequest} GetDatabaseRequest
                             */
                            GetDatabaseRequest.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.GetDatabaseRequest)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.GetDatabaseRequest();
                                if (object.name != null)
                                    message.name = String(object.name);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a GetDatabaseRequest message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.GetDatabaseRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.GetDatabaseRequest} message GetDatabaseRequest
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            GetDatabaseRequest.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.name = "";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    object.name = message.name;
                                return object;
                            };
    
                            /**
                             * Converts this GetDatabaseRequest to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.GetDatabaseRequest
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            GetDatabaseRequest.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return GetDatabaseRequest;
                        })();
    
                        v1.UpdateDatabaseDdlRequest = (function() {
    
                            /**
                             * Properties of an UpdateDatabaseDdlRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @interface IUpdateDatabaseDdlRequest
                             * @property {string|null} [database] UpdateDatabaseDdlRequest database
                             * @property {Array.<string>|null} [statements] UpdateDatabaseDdlRequest statements
                             * @property {string|null} [operationId] UpdateDatabaseDdlRequest operationId
                             */
    
                            /**
                             * Constructs a new UpdateDatabaseDdlRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents an UpdateDatabaseDdlRequest.
                             * @implements IUpdateDatabaseDdlRequest
                             * @constructor
                             * @param {google.spanner.admin.database.v1.IUpdateDatabaseDdlRequest=} [properties] Properties to set
                             */
                            function UpdateDatabaseDdlRequest(properties) {
                                this.statements = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * UpdateDatabaseDdlRequest database.
                             * @member {string} database
                             * @memberof google.spanner.admin.database.v1.UpdateDatabaseDdlRequest
                             * @instance
                             */
                            UpdateDatabaseDdlRequest.prototype.database = "";
    
                            /**
                             * UpdateDatabaseDdlRequest statements.
                             * @member {Array.<string>} statements
                             * @memberof google.spanner.admin.database.v1.UpdateDatabaseDdlRequest
                             * @instance
                             */
                            UpdateDatabaseDdlRequest.prototype.statements = $util.emptyArray;
    
                            /**
                             * UpdateDatabaseDdlRequest operationId.
                             * @member {string} operationId
                             * @memberof google.spanner.admin.database.v1.UpdateDatabaseDdlRequest
                             * @instance
                             */
                            UpdateDatabaseDdlRequest.prototype.operationId = "";
    
                            /**
                             * Creates a new UpdateDatabaseDdlRequest instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.UpdateDatabaseDdlRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IUpdateDatabaseDdlRequest=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.UpdateDatabaseDdlRequest} UpdateDatabaseDdlRequest instance
                             */
                            UpdateDatabaseDdlRequest.create = function create(properties) {
                                return new UpdateDatabaseDdlRequest(properties);
                            };
    
                            /**
                             * Encodes the specified UpdateDatabaseDdlRequest message. Does not implicitly {@link google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.UpdateDatabaseDdlRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IUpdateDatabaseDdlRequest} message UpdateDatabaseDdlRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            UpdateDatabaseDdlRequest.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.database != null && Object.hasOwnProperty.call(message, "database"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.database);
                                if (message.statements != null && message.statements.length)
                                    for (var i = 0; i < message.statements.length; ++i)
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.statements[i]);
                                if (message.operationId != null && Object.hasOwnProperty.call(message, "operationId"))
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.operationId);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified UpdateDatabaseDdlRequest message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.UpdateDatabaseDdlRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IUpdateDatabaseDdlRequest} message UpdateDatabaseDdlRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            UpdateDatabaseDdlRequest.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an UpdateDatabaseDdlRequest message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.UpdateDatabaseDdlRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.UpdateDatabaseDdlRequest} UpdateDatabaseDdlRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            UpdateDatabaseDdlRequest.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.UpdateDatabaseDdlRequest();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.database = reader.string();
                                        break;
                                    case 2:
                                        if (!(message.statements && message.statements.length))
                                            message.statements = [];
                                        message.statements.push(reader.string());
                                        break;
                                    case 3:
                                        message.operationId = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an UpdateDatabaseDdlRequest message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.UpdateDatabaseDdlRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.UpdateDatabaseDdlRequest} UpdateDatabaseDdlRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            UpdateDatabaseDdlRequest.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an UpdateDatabaseDdlRequest message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.UpdateDatabaseDdlRequest
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            UpdateDatabaseDdlRequest.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.database != null && message.hasOwnProperty("database"))
                                    if (!$util.isString(message.database))
                                        return "database: string expected";
                                if (message.statements != null && message.hasOwnProperty("statements")) {
                                    if (!Array.isArray(message.statements))
                                        return "statements: array expected";
                                    for (var i = 0; i < message.statements.length; ++i)
                                        if (!$util.isString(message.statements[i]))
                                            return "statements: string[] expected";
                                }
                                if (message.operationId != null && message.hasOwnProperty("operationId"))
                                    if (!$util.isString(message.operationId))
                                        return "operationId: string expected";
                                return null;
                            };
    
                            /**
                             * Creates an UpdateDatabaseDdlRequest message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.UpdateDatabaseDdlRequest
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.UpdateDatabaseDdlRequest} UpdateDatabaseDdlRequest
                             */
                            UpdateDatabaseDdlRequest.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.UpdateDatabaseDdlRequest)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.UpdateDatabaseDdlRequest();
                                if (object.database != null)
                                    message.database = String(object.database);
                                if (object.statements) {
                                    if (!Array.isArray(object.statements))
                                        throw TypeError(".google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements: array expected");
                                    message.statements = [];
                                    for (var i = 0; i < object.statements.length; ++i)
                                        message.statements[i] = String(object.statements[i]);
                                }
                                if (object.operationId != null)
                                    message.operationId = String(object.operationId);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an UpdateDatabaseDdlRequest message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.UpdateDatabaseDdlRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.UpdateDatabaseDdlRequest} message UpdateDatabaseDdlRequest
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            UpdateDatabaseDdlRequest.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.statements = [];
                                if (options.defaults) {
                                    object.database = "";
                                    object.operationId = "";
                                }
                                if (message.database != null && message.hasOwnProperty("database"))
                                    object.database = message.database;
                                if (message.statements && message.statements.length) {
                                    object.statements = [];
                                    for (var j = 0; j < message.statements.length; ++j)
                                        object.statements[j] = message.statements[j];
                                }
                                if (message.operationId != null && message.hasOwnProperty("operationId"))
                                    object.operationId = message.operationId;
                                return object;
                            };
    
                            /**
                             * Converts this UpdateDatabaseDdlRequest to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.UpdateDatabaseDdlRequest
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            UpdateDatabaseDdlRequest.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return UpdateDatabaseDdlRequest;
                        })();
    
                        v1.UpdateDatabaseDdlMetadata = (function() {
    
                            /**
                             * Properties of an UpdateDatabaseDdlMetadata.
                             * @memberof google.spanner.admin.database.v1
                             * @interface IUpdateDatabaseDdlMetadata
                             * @property {string|null} [database] UpdateDatabaseDdlMetadata database
                             * @property {Array.<string>|null} [statements] UpdateDatabaseDdlMetadata statements
                             * @property {Array.<google.protobuf.ITimestamp>|null} [commitTimestamps] UpdateDatabaseDdlMetadata commitTimestamps
                             */
    
                            /**
                             * Constructs a new UpdateDatabaseDdlMetadata.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents an UpdateDatabaseDdlMetadata.
                             * @implements IUpdateDatabaseDdlMetadata
                             * @constructor
                             * @param {google.spanner.admin.database.v1.IUpdateDatabaseDdlMetadata=} [properties] Properties to set
                             */
                            function UpdateDatabaseDdlMetadata(properties) {
                                this.statements = [];
                                this.commitTimestamps = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * UpdateDatabaseDdlMetadata database.
                             * @member {string} database
                             * @memberof google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata
                             * @instance
                             */
                            UpdateDatabaseDdlMetadata.prototype.database = "";
    
                            /**
                             * UpdateDatabaseDdlMetadata statements.
                             * @member {Array.<string>} statements
                             * @memberof google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata
                             * @instance
                             */
                            UpdateDatabaseDdlMetadata.prototype.statements = $util.emptyArray;
    
                            /**
                             * UpdateDatabaseDdlMetadata commitTimestamps.
                             * @member {Array.<google.protobuf.ITimestamp>} commitTimestamps
                             * @memberof google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata
                             * @instance
                             */
                            UpdateDatabaseDdlMetadata.prototype.commitTimestamps = $util.emptyArray;
    
                            /**
                             * Creates a new UpdateDatabaseDdlMetadata instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata
                             * @static
                             * @param {google.spanner.admin.database.v1.IUpdateDatabaseDdlMetadata=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata} UpdateDatabaseDdlMetadata instance
                             */
                            UpdateDatabaseDdlMetadata.create = function create(properties) {
                                return new UpdateDatabaseDdlMetadata(properties);
                            };
    
                            /**
                             * Encodes the specified UpdateDatabaseDdlMetadata message. Does not implicitly {@link google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata
                             * @static
                             * @param {google.spanner.admin.database.v1.IUpdateDatabaseDdlMetadata} message UpdateDatabaseDdlMetadata message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            UpdateDatabaseDdlMetadata.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.database != null && Object.hasOwnProperty.call(message, "database"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.database);
                                if (message.statements != null && message.statements.length)
                                    for (var i = 0; i < message.statements.length; ++i)
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.statements[i]);
                                if (message.commitTimestamps != null && message.commitTimestamps.length)
                                    for (var i = 0; i < message.commitTimestamps.length; ++i)
                                        $root.google.protobuf.Timestamp.encode(message.commitTimestamps[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified UpdateDatabaseDdlMetadata message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata
                             * @static
                             * @param {google.spanner.admin.database.v1.IUpdateDatabaseDdlMetadata} message UpdateDatabaseDdlMetadata message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            UpdateDatabaseDdlMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an UpdateDatabaseDdlMetadata message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata} UpdateDatabaseDdlMetadata
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            UpdateDatabaseDdlMetadata.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.database = reader.string();
                                        break;
                                    case 2:
                                        if (!(message.statements && message.statements.length))
                                            message.statements = [];
                                        message.statements.push(reader.string());
                                        break;
                                    case 3:
                                        if (!(message.commitTimestamps && message.commitTimestamps.length))
                                            message.commitTimestamps = [];
                                        message.commitTimestamps.push($root.google.protobuf.Timestamp.decode(reader, reader.uint32()));
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an UpdateDatabaseDdlMetadata message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata} UpdateDatabaseDdlMetadata
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            UpdateDatabaseDdlMetadata.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an UpdateDatabaseDdlMetadata message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            UpdateDatabaseDdlMetadata.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.database != null && message.hasOwnProperty("database"))
                                    if (!$util.isString(message.database))
                                        return "database: string expected";
                                if (message.statements != null && message.hasOwnProperty("statements")) {
                                    if (!Array.isArray(message.statements))
                                        return "statements: array expected";
                                    for (var i = 0; i < message.statements.length; ++i)
                                        if (!$util.isString(message.statements[i]))
                                            return "statements: string[] expected";
                                }
                                if (message.commitTimestamps != null && message.hasOwnProperty("commitTimestamps")) {
                                    if (!Array.isArray(message.commitTimestamps))
                                        return "commitTimestamps: array expected";
                                    for (var i = 0; i < message.commitTimestamps.length; ++i) {
                                        var error = $root.google.protobuf.Timestamp.verify(message.commitTimestamps[i]);
                                        if (error)
                                            return "commitTimestamps." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates an UpdateDatabaseDdlMetadata message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata} UpdateDatabaseDdlMetadata
                             */
                            UpdateDatabaseDdlMetadata.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata();
                                if (object.database != null)
                                    message.database = String(object.database);
                                if (object.statements) {
                                    if (!Array.isArray(object.statements))
                                        throw TypeError(".google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements: array expected");
                                    message.statements = [];
                                    for (var i = 0; i < object.statements.length; ++i)
                                        message.statements[i] = String(object.statements[i]);
                                }
                                if (object.commitTimestamps) {
                                    if (!Array.isArray(object.commitTimestamps))
                                        throw TypeError(".google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.commitTimestamps: array expected");
                                    message.commitTimestamps = [];
                                    for (var i = 0; i < object.commitTimestamps.length; ++i) {
                                        if (typeof object.commitTimestamps[i] !== "object")
                                            throw TypeError(".google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.commitTimestamps: object expected");
                                        message.commitTimestamps[i] = $root.google.protobuf.Timestamp.fromObject(object.commitTimestamps[i]);
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an UpdateDatabaseDdlMetadata message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata
                             * @static
                             * @param {google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata} message UpdateDatabaseDdlMetadata
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            UpdateDatabaseDdlMetadata.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults) {
                                    object.statements = [];
                                    object.commitTimestamps = [];
                                }
                                if (options.defaults)
                                    object.database = "";
                                if (message.database != null && message.hasOwnProperty("database"))
                                    object.database = message.database;
                                if (message.statements && message.statements.length) {
                                    object.statements = [];
                                    for (var j = 0; j < message.statements.length; ++j)
                                        object.statements[j] = message.statements[j];
                                }
                                if (message.commitTimestamps && message.commitTimestamps.length) {
                                    object.commitTimestamps = [];
                                    for (var j = 0; j < message.commitTimestamps.length; ++j)
                                        object.commitTimestamps[j] = $root.google.protobuf.Timestamp.toObject(message.commitTimestamps[j], options);
                                }
                                return object;
                            };
    
                            /**
                             * Converts this UpdateDatabaseDdlMetadata to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            UpdateDatabaseDdlMetadata.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return UpdateDatabaseDdlMetadata;
                        })();
    
                        v1.DropDatabaseRequest = (function() {
    
                            /**
                             * Properties of a DropDatabaseRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @interface IDropDatabaseRequest
                             * @property {string|null} [database] DropDatabaseRequest database
                             */
    
                            /**
                             * Constructs a new DropDatabaseRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents a DropDatabaseRequest.
                             * @implements IDropDatabaseRequest
                             * @constructor
                             * @param {google.spanner.admin.database.v1.IDropDatabaseRequest=} [properties] Properties to set
                             */
                            function DropDatabaseRequest(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * DropDatabaseRequest database.
                             * @member {string} database
                             * @memberof google.spanner.admin.database.v1.DropDatabaseRequest
                             * @instance
                             */
                            DropDatabaseRequest.prototype.database = "";
    
                            /**
                             * Creates a new DropDatabaseRequest instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.DropDatabaseRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IDropDatabaseRequest=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.DropDatabaseRequest} DropDatabaseRequest instance
                             */
                            DropDatabaseRequest.create = function create(properties) {
                                return new DropDatabaseRequest(properties);
                            };
    
                            /**
                             * Encodes the specified DropDatabaseRequest message. Does not implicitly {@link google.spanner.admin.database.v1.DropDatabaseRequest.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.DropDatabaseRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IDropDatabaseRequest} message DropDatabaseRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            DropDatabaseRequest.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.database != null && Object.hasOwnProperty.call(message, "database"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.database);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified DropDatabaseRequest message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.DropDatabaseRequest.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.DropDatabaseRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IDropDatabaseRequest} message DropDatabaseRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            DropDatabaseRequest.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a DropDatabaseRequest message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.DropDatabaseRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.DropDatabaseRequest} DropDatabaseRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            DropDatabaseRequest.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.DropDatabaseRequest();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.database = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a DropDatabaseRequest message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.DropDatabaseRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.DropDatabaseRequest} DropDatabaseRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            DropDatabaseRequest.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a DropDatabaseRequest message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.DropDatabaseRequest
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            DropDatabaseRequest.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.database != null && message.hasOwnProperty("database"))
                                    if (!$util.isString(message.database))
                                        return "database: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a DropDatabaseRequest message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.DropDatabaseRequest
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.DropDatabaseRequest} DropDatabaseRequest
                             */
                            DropDatabaseRequest.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.DropDatabaseRequest)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.DropDatabaseRequest();
                                if (object.database != null)
                                    message.database = String(object.database);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a DropDatabaseRequest message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.DropDatabaseRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.DropDatabaseRequest} message DropDatabaseRequest
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            DropDatabaseRequest.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.database = "";
                                if (message.database != null && message.hasOwnProperty("database"))
                                    object.database = message.database;
                                return object;
                            };
    
                            /**
                             * Converts this DropDatabaseRequest to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.DropDatabaseRequest
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            DropDatabaseRequest.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return DropDatabaseRequest;
                        })();
    
                        v1.GetDatabaseDdlRequest = (function() {
    
                            /**
                             * Properties of a GetDatabaseDdlRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @interface IGetDatabaseDdlRequest
                             * @property {string|null} [database] GetDatabaseDdlRequest database
                             */
    
                            /**
                             * Constructs a new GetDatabaseDdlRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents a GetDatabaseDdlRequest.
                             * @implements IGetDatabaseDdlRequest
                             * @constructor
                             * @param {google.spanner.admin.database.v1.IGetDatabaseDdlRequest=} [properties] Properties to set
                             */
                            function GetDatabaseDdlRequest(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * GetDatabaseDdlRequest database.
                             * @member {string} database
                             * @memberof google.spanner.admin.database.v1.GetDatabaseDdlRequest
                             * @instance
                             */
                            GetDatabaseDdlRequest.prototype.database = "";
    
                            /**
                             * Creates a new GetDatabaseDdlRequest instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.GetDatabaseDdlRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IGetDatabaseDdlRequest=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.GetDatabaseDdlRequest} GetDatabaseDdlRequest instance
                             */
                            GetDatabaseDdlRequest.create = function create(properties) {
                                return new GetDatabaseDdlRequest(properties);
                            };
    
                            /**
                             * Encodes the specified GetDatabaseDdlRequest message. Does not implicitly {@link google.spanner.admin.database.v1.GetDatabaseDdlRequest.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.GetDatabaseDdlRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IGetDatabaseDdlRequest} message GetDatabaseDdlRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            GetDatabaseDdlRequest.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.database != null && Object.hasOwnProperty.call(message, "database"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.database);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified GetDatabaseDdlRequest message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.GetDatabaseDdlRequest.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.GetDatabaseDdlRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IGetDatabaseDdlRequest} message GetDatabaseDdlRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            GetDatabaseDdlRequest.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a GetDatabaseDdlRequest message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.GetDatabaseDdlRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.GetDatabaseDdlRequest} GetDatabaseDdlRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            GetDatabaseDdlRequest.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.GetDatabaseDdlRequest();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.database = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a GetDatabaseDdlRequest message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.GetDatabaseDdlRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.GetDatabaseDdlRequest} GetDatabaseDdlRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            GetDatabaseDdlRequest.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a GetDatabaseDdlRequest message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.GetDatabaseDdlRequest
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            GetDatabaseDdlRequest.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.database != null && message.hasOwnProperty("database"))
                                    if (!$util.isString(message.database))
                                        return "database: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a GetDatabaseDdlRequest message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.GetDatabaseDdlRequest
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.GetDatabaseDdlRequest} GetDatabaseDdlRequest
                             */
                            GetDatabaseDdlRequest.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.GetDatabaseDdlRequest)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.GetDatabaseDdlRequest();
                                if (object.database != null)
                                    message.database = String(object.database);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a GetDatabaseDdlRequest message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.GetDatabaseDdlRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.GetDatabaseDdlRequest} message GetDatabaseDdlRequest
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            GetDatabaseDdlRequest.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.database = "";
                                if (message.database != null && message.hasOwnProperty("database"))
                                    object.database = message.database;
                                return object;
                            };
    
                            /**
                             * Converts this GetDatabaseDdlRequest to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.GetDatabaseDdlRequest
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            GetDatabaseDdlRequest.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return GetDatabaseDdlRequest;
                        })();
    
                        v1.GetDatabaseDdlResponse = (function() {
    
                            /**
                             * Properties of a GetDatabaseDdlResponse.
                             * @memberof google.spanner.admin.database.v1
                             * @interface IGetDatabaseDdlResponse
                             * @property {Array.<string>|null} [statements] GetDatabaseDdlResponse statements
                             */
    
                            /**
                             * Constructs a new GetDatabaseDdlResponse.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents a GetDatabaseDdlResponse.
                             * @implements IGetDatabaseDdlResponse
                             * @constructor
                             * @param {google.spanner.admin.database.v1.IGetDatabaseDdlResponse=} [properties] Properties to set
                             */
                            function GetDatabaseDdlResponse(properties) {
                                this.statements = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * GetDatabaseDdlResponse statements.
                             * @member {Array.<string>} statements
                             * @memberof google.spanner.admin.database.v1.GetDatabaseDdlResponse
                             * @instance
                             */
                            GetDatabaseDdlResponse.prototype.statements = $util.emptyArray;
    
                            /**
                             * Creates a new GetDatabaseDdlResponse instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.GetDatabaseDdlResponse
                             * @static
                             * @param {google.spanner.admin.database.v1.IGetDatabaseDdlResponse=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.GetDatabaseDdlResponse} GetDatabaseDdlResponse instance
                             */
                            GetDatabaseDdlResponse.create = function create(properties) {
                                return new GetDatabaseDdlResponse(properties);
                            };
    
                            /**
                             * Encodes the specified GetDatabaseDdlResponse message. Does not implicitly {@link google.spanner.admin.database.v1.GetDatabaseDdlResponse.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.GetDatabaseDdlResponse
                             * @static
                             * @param {google.spanner.admin.database.v1.IGetDatabaseDdlResponse} message GetDatabaseDdlResponse message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            GetDatabaseDdlResponse.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.statements != null && message.statements.length)
                                    for (var i = 0; i < message.statements.length; ++i)
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.statements[i]);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified GetDatabaseDdlResponse message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.GetDatabaseDdlResponse.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.GetDatabaseDdlResponse
                             * @static
                             * @param {google.spanner.admin.database.v1.IGetDatabaseDdlResponse} message GetDatabaseDdlResponse message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            GetDatabaseDdlResponse.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a GetDatabaseDdlResponse message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.GetDatabaseDdlResponse
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.GetDatabaseDdlResponse} GetDatabaseDdlResponse
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            GetDatabaseDdlResponse.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.GetDatabaseDdlResponse();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        if (!(message.statements && message.statements.length))
                                            message.statements = [];
                                        message.statements.push(reader.string());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a GetDatabaseDdlResponse message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.GetDatabaseDdlResponse
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.GetDatabaseDdlResponse} GetDatabaseDdlResponse
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            GetDatabaseDdlResponse.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a GetDatabaseDdlResponse message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.GetDatabaseDdlResponse
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            GetDatabaseDdlResponse.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.statements != null && message.hasOwnProperty("statements")) {
                                    if (!Array.isArray(message.statements))
                                        return "statements: array expected";
                                    for (var i = 0; i < message.statements.length; ++i)
                                        if (!$util.isString(message.statements[i]))
                                            return "statements: string[] expected";
                                }
                                return null;
                            };
    
                            /**
                             * Creates a GetDatabaseDdlResponse message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.GetDatabaseDdlResponse
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.GetDatabaseDdlResponse} GetDatabaseDdlResponse
                             */
                            GetDatabaseDdlResponse.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.GetDatabaseDdlResponse)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.GetDatabaseDdlResponse();
                                if (object.statements) {
                                    if (!Array.isArray(object.statements))
                                        throw TypeError(".google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements: array expected");
                                    message.statements = [];
                                    for (var i = 0; i < object.statements.length; ++i)
                                        message.statements[i] = String(object.statements[i]);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a GetDatabaseDdlResponse message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.GetDatabaseDdlResponse
                             * @static
                             * @param {google.spanner.admin.database.v1.GetDatabaseDdlResponse} message GetDatabaseDdlResponse
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            GetDatabaseDdlResponse.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.statements = [];
                                if (message.statements && message.statements.length) {
                                    object.statements = [];
                                    for (var j = 0; j < message.statements.length; ++j)
                                        object.statements[j] = message.statements[j];
                                }
                                return object;
                            };
    
                            /**
                             * Converts this GetDatabaseDdlResponse to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.GetDatabaseDdlResponse
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            GetDatabaseDdlResponse.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return GetDatabaseDdlResponse;
                        })();
    
                        v1.ListDatabaseOperationsRequest = (function() {
    
                            /**
                             * Properties of a ListDatabaseOperationsRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @interface IListDatabaseOperationsRequest
                             * @property {string|null} [parent] ListDatabaseOperationsRequest parent
                             * @property {string|null} [filter] ListDatabaseOperationsRequest filter
                             * @property {number|null} [pageSize] ListDatabaseOperationsRequest pageSize
                             * @property {string|null} [pageToken] ListDatabaseOperationsRequest pageToken
                             */
    
                            /**
                             * Constructs a new ListDatabaseOperationsRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents a ListDatabaseOperationsRequest.
                             * @implements IListDatabaseOperationsRequest
                             * @constructor
                             * @param {google.spanner.admin.database.v1.IListDatabaseOperationsRequest=} [properties] Properties to set
                             */
                            function ListDatabaseOperationsRequest(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ListDatabaseOperationsRequest parent.
                             * @member {string} parent
                             * @memberof google.spanner.admin.database.v1.ListDatabaseOperationsRequest
                             * @instance
                             */
                            ListDatabaseOperationsRequest.prototype.parent = "";
    
                            /**
                             * ListDatabaseOperationsRequest filter.
                             * @member {string} filter
                             * @memberof google.spanner.admin.database.v1.ListDatabaseOperationsRequest
                             * @instance
                             */
                            ListDatabaseOperationsRequest.prototype.filter = "";
    
                            /**
                             * ListDatabaseOperationsRequest pageSize.
                             * @member {number} pageSize
                             * @memberof google.spanner.admin.database.v1.ListDatabaseOperationsRequest
                             * @instance
                             */
                            ListDatabaseOperationsRequest.prototype.pageSize = 0;
    
                            /**
                             * ListDatabaseOperationsRequest pageToken.
                             * @member {string} pageToken
                             * @memberof google.spanner.admin.database.v1.ListDatabaseOperationsRequest
                             * @instance
                             */
                            ListDatabaseOperationsRequest.prototype.pageToken = "";
    
                            /**
                             * Creates a new ListDatabaseOperationsRequest instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.ListDatabaseOperationsRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IListDatabaseOperationsRequest=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.ListDatabaseOperationsRequest} ListDatabaseOperationsRequest instance
                             */
                            ListDatabaseOperationsRequest.create = function create(properties) {
                                return new ListDatabaseOperationsRequest(properties);
                            };
    
                            /**
                             * Encodes the specified ListDatabaseOperationsRequest message. Does not implicitly {@link google.spanner.admin.database.v1.ListDatabaseOperationsRequest.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.ListDatabaseOperationsRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IListDatabaseOperationsRequest} message ListDatabaseOperationsRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ListDatabaseOperationsRequest.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                                if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.filter);
                                if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pageSize);
                                if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.pageToken);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ListDatabaseOperationsRequest message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.ListDatabaseOperationsRequest.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.ListDatabaseOperationsRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IListDatabaseOperationsRequest} message ListDatabaseOperationsRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ListDatabaseOperationsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a ListDatabaseOperationsRequest message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.ListDatabaseOperationsRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.ListDatabaseOperationsRequest} ListDatabaseOperationsRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ListDatabaseOperationsRequest.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.ListDatabaseOperationsRequest();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.parent = reader.string();
                                        break;
                                    case 2:
                                        message.filter = reader.string();
                                        break;
                                    case 3:
                                        message.pageSize = reader.int32();
                                        break;
                                    case 4:
                                        message.pageToken = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a ListDatabaseOperationsRequest message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.ListDatabaseOperationsRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.ListDatabaseOperationsRequest} ListDatabaseOperationsRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ListDatabaseOperationsRequest.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a ListDatabaseOperationsRequest message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.ListDatabaseOperationsRequest
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ListDatabaseOperationsRequest.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.parent != null && message.hasOwnProperty("parent"))
                                    if (!$util.isString(message.parent))
                                        return "parent: string expected";
                                if (message.filter != null && message.hasOwnProperty("filter"))
                                    if (!$util.isString(message.filter))
                                        return "filter: string expected";
                                if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                    if (!$util.isInteger(message.pageSize))
                                        return "pageSize: integer expected";
                                if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                    if (!$util.isString(message.pageToken))
                                        return "pageToken: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a ListDatabaseOperationsRequest message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.ListDatabaseOperationsRequest
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.ListDatabaseOperationsRequest} ListDatabaseOperationsRequest
                             */
                            ListDatabaseOperationsRequest.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.ListDatabaseOperationsRequest)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.ListDatabaseOperationsRequest();
                                if (object.parent != null)
                                    message.parent = String(object.parent);
                                if (object.filter != null)
                                    message.filter = String(object.filter);
                                if (object.pageSize != null)
                                    message.pageSize = object.pageSize | 0;
                                if (object.pageToken != null)
                                    message.pageToken = String(object.pageToken);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a ListDatabaseOperationsRequest message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.ListDatabaseOperationsRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.ListDatabaseOperationsRequest} message ListDatabaseOperationsRequest
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ListDatabaseOperationsRequest.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.parent = "";
                                    object.filter = "";
                                    object.pageSize = 0;
                                    object.pageToken = "";
                                }
                                if (message.parent != null && message.hasOwnProperty("parent"))
                                    object.parent = message.parent;
                                if (message.filter != null && message.hasOwnProperty("filter"))
                                    object.filter = message.filter;
                                if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                    object.pageSize = message.pageSize;
                                if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                    object.pageToken = message.pageToken;
                                return object;
                            };
    
                            /**
                             * Converts this ListDatabaseOperationsRequest to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.ListDatabaseOperationsRequest
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ListDatabaseOperationsRequest.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return ListDatabaseOperationsRequest;
                        })();
    
                        v1.ListDatabaseOperationsResponse = (function() {
    
                            /**
                             * Properties of a ListDatabaseOperationsResponse.
                             * @memberof google.spanner.admin.database.v1
                             * @interface IListDatabaseOperationsResponse
                             * @property {Array.<google.longrunning.IOperation>|null} [operations] ListDatabaseOperationsResponse operations
                             * @property {string|null} [nextPageToken] ListDatabaseOperationsResponse nextPageToken
                             */
    
                            /**
                             * Constructs a new ListDatabaseOperationsResponse.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents a ListDatabaseOperationsResponse.
                             * @implements IListDatabaseOperationsResponse
                             * @constructor
                             * @param {google.spanner.admin.database.v1.IListDatabaseOperationsResponse=} [properties] Properties to set
                             */
                            function ListDatabaseOperationsResponse(properties) {
                                this.operations = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ListDatabaseOperationsResponse operations.
                             * @member {Array.<google.longrunning.IOperation>} operations
                             * @memberof google.spanner.admin.database.v1.ListDatabaseOperationsResponse
                             * @instance
                             */
                            ListDatabaseOperationsResponse.prototype.operations = $util.emptyArray;
    
                            /**
                             * ListDatabaseOperationsResponse nextPageToken.
                             * @member {string} nextPageToken
                             * @memberof google.spanner.admin.database.v1.ListDatabaseOperationsResponse
                             * @instance
                             */
                            ListDatabaseOperationsResponse.prototype.nextPageToken = "";
    
                            /**
                             * Creates a new ListDatabaseOperationsResponse instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.ListDatabaseOperationsResponse
                             * @static
                             * @param {google.spanner.admin.database.v1.IListDatabaseOperationsResponse=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.ListDatabaseOperationsResponse} ListDatabaseOperationsResponse instance
                             */
                            ListDatabaseOperationsResponse.create = function create(properties) {
                                return new ListDatabaseOperationsResponse(properties);
                            };
    
                            /**
                             * Encodes the specified ListDatabaseOperationsResponse message. Does not implicitly {@link google.spanner.admin.database.v1.ListDatabaseOperationsResponse.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.ListDatabaseOperationsResponse
                             * @static
                             * @param {google.spanner.admin.database.v1.IListDatabaseOperationsResponse} message ListDatabaseOperationsResponse message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ListDatabaseOperationsResponse.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.operations != null && message.operations.length)
                                    for (var i = 0; i < message.operations.length; ++i)
                                        $root.google.longrunning.Operation.encode(message.operations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ListDatabaseOperationsResponse message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.ListDatabaseOperationsResponse.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.ListDatabaseOperationsResponse
                             * @static
                             * @param {google.spanner.admin.database.v1.IListDatabaseOperationsResponse} message ListDatabaseOperationsResponse message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ListDatabaseOperationsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a ListDatabaseOperationsResponse message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.ListDatabaseOperationsResponse
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.ListDatabaseOperationsResponse} ListDatabaseOperationsResponse
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ListDatabaseOperationsResponse.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.ListDatabaseOperationsResponse();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        if (!(message.operations && message.operations.length))
                                            message.operations = [];
                                        message.operations.push($root.google.longrunning.Operation.decode(reader, reader.uint32()));
                                        break;
                                    case 2:
                                        message.nextPageToken = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a ListDatabaseOperationsResponse message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.ListDatabaseOperationsResponse
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.ListDatabaseOperationsResponse} ListDatabaseOperationsResponse
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ListDatabaseOperationsResponse.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a ListDatabaseOperationsResponse message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.ListDatabaseOperationsResponse
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ListDatabaseOperationsResponse.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.operations != null && message.hasOwnProperty("operations")) {
                                    if (!Array.isArray(message.operations))
                                        return "operations: array expected";
                                    for (var i = 0; i < message.operations.length; ++i) {
                                        var error = $root.google.longrunning.Operation.verify(message.operations[i]);
                                        if (error)
                                            return "operations." + error;
                                    }
                                }
                                if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                    if (!$util.isString(message.nextPageToken))
                                        return "nextPageToken: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a ListDatabaseOperationsResponse message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.ListDatabaseOperationsResponse
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.ListDatabaseOperationsResponse} ListDatabaseOperationsResponse
                             */
                            ListDatabaseOperationsResponse.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.ListDatabaseOperationsResponse)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.ListDatabaseOperationsResponse();
                                if (object.operations) {
                                    if (!Array.isArray(object.operations))
                                        throw TypeError(".google.spanner.admin.database.v1.ListDatabaseOperationsResponse.operations: array expected");
                                    message.operations = [];
                                    for (var i = 0; i < object.operations.length; ++i) {
                                        if (typeof object.operations[i] !== "object")
                                            throw TypeError(".google.spanner.admin.database.v1.ListDatabaseOperationsResponse.operations: object expected");
                                        message.operations[i] = $root.google.longrunning.Operation.fromObject(object.operations[i]);
                                    }
                                }
                                if (object.nextPageToken != null)
                                    message.nextPageToken = String(object.nextPageToken);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a ListDatabaseOperationsResponse message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.ListDatabaseOperationsResponse
                             * @static
                             * @param {google.spanner.admin.database.v1.ListDatabaseOperationsResponse} message ListDatabaseOperationsResponse
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ListDatabaseOperationsResponse.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.operations = [];
                                if (options.defaults)
                                    object.nextPageToken = "";
                                if (message.operations && message.operations.length) {
                                    object.operations = [];
                                    for (var j = 0; j < message.operations.length; ++j)
                                        object.operations[j] = $root.google.longrunning.Operation.toObject(message.operations[j], options);
                                }
                                if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                    object.nextPageToken = message.nextPageToken;
                                return object;
                            };
    
                            /**
                             * Converts this ListDatabaseOperationsResponse to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.ListDatabaseOperationsResponse
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ListDatabaseOperationsResponse.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return ListDatabaseOperationsResponse;
                        })();
    
                        v1.RestoreDatabaseRequest = (function() {
    
                            /**
                             * Properties of a RestoreDatabaseRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @interface IRestoreDatabaseRequest
                             * @property {string|null} [parent] RestoreDatabaseRequest parent
                             * @property {string|null} [databaseId] RestoreDatabaseRequest databaseId
                             * @property {string|null} [backup] RestoreDatabaseRequest backup
                             */
    
                            /**
                             * Constructs a new RestoreDatabaseRequest.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents a RestoreDatabaseRequest.
                             * @implements IRestoreDatabaseRequest
                             * @constructor
                             * @param {google.spanner.admin.database.v1.IRestoreDatabaseRequest=} [properties] Properties to set
                             */
                            function RestoreDatabaseRequest(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * RestoreDatabaseRequest parent.
                             * @member {string} parent
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseRequest
                             * @instance
                             */
                            RestoreDatabaseRequest.prototype.parent = "";
    
                            /**
                             * RestoreDatabaseRequest databaseId.
                             * @member {string} databaseId
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseRequest
                             * @instance
                             */
                            RestoreDatabaseRequest.prototype.databaseId = "";
    
                            /**
                             * RestoreDatabaseRequest backup.
                             * @member {string} backup
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseRequest
                             * @instance
                             */
                            RestoreDatabaseRequest.prototype.backup = "";
    
                            // OneOf field names bound to virtual getters and setters
                            var $oneOfFields;
    
                            /**
                             * RestoreDatabaseRequest source.
                             * @member {"backup"|undefined} source
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseRequest
                             * @instance
                             */
                            Object.defineProperty(RestoreDatabaseRequest.prototype, "source", {
                                get: $util.oneOfGetter($oneOfFields = ["backup"]),
                                set: $util.oneOfSetter($oneOfFields)
                            });
    
                            /**
                             * Creates a new RestoreDatabaseRequest instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IRestoreDatabaseRequest=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.RestoreDatabaseRequest} RestoreDatabaseRequest instance
                             */
                            RestoreDatabaseRequest.create = function create(properties) {
                                return new RestoreDatabaseRequest(properties);
                            };
    
                            /**
                             * Encodes the specified RestoreDatabaseRequest message. Does not implicitly {@link google.spanner.admin.database.v1.RestoreDatabaseRequest.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IRestoreDatabaseRequest} message RestoreDatabaseRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            RestoreDatabaseRequest.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                                if (message.databaseId != null && Object.hasOwnProperty.call(message, "databaseId"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.databaseId);
                                if (message.backup != null && Object.hasOwnProperty.call(message, "backup"))
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.backup);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified RestoreDatabaseRequest message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.RestoreDatabaseRequest.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.IRestoreDatabaseRequest} message RestoreDatabaseRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            RestoreDatabaseRequest.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a RestoreDatabaseRequest message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.RestoreDatabaseRequest} RestoreDatabaseRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            RestoreDatabaseRequest.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.RestoreDatabaseRequest();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.parent = reader.string();
                                        break;
                                    case 2:
                                        message.databaseId = reader.string();
                                        break;
                                    case 3:
                                        message.backup = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a RestoreDatabaseRequest message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.RestoreDatabaseRequest} RestoreDatabaseRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            RestoreDatabaseRequest.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a RestoreDatabaseRequest message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseRequest
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            RestoreDatabaseRequest.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                var properties = {};
                                if (message.parent != null && message.hasOwnProperty("parent"))
                                    if (!$util.isString(message.parent))
                                        return "parent: string expected";
                                if (message.databaseId != null && message.hasOwnProperty("databaseId"))
                                    if (!$util.isString(message.databaseId))
                                        return "databaseId: string expected";
                                if (message.backup != null && message.hasOwnProperty("backup")) {
                                    properties.source = 1;
                                    if (!$util.isString(message.backup))
                                        return "backup: string expected";
                                }
                                return null;
                            };
    
                            /**
                             * Creates a RestoreDatabaseRequest message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseRequest
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.RestoreDatabaseRequest} RestoreDatabaseRequest
                             */
                            RestoreDatabaseRequest.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.RestoreDatabaseRequest)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.RestoreDatabaseRequest();
                                if (object.parent != null)
                                    message.parent = String(object.parent);
                                if (object.databaseId != null)
                                    message.databaseId = String(object.databaseId);
                                if (object.backup != null)
                                    message.backup = String(object.backup);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a RestoreDatabaseRequest message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseRequest
                             * @static
                             * @param {google.spanner.admin.database.v1.RestoreDatabaseRequest} message RestoreDatabaseRequest
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            RestoreDatabaseRequest.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.parent = "";
                                    object.databaseId = "";
                                }
                                if (message.parent != null && message.hasOwnProperty("parent"))
                                    object.parent = message.parent;
                                if (message.databaseId != null && message.hasOwnProperty("databaseId"))
                                    object.databaseId = message.databaseId;
                                if (message.backup != null && message.hasOwnProperty("backup")) {
                                    object.backup = message.backup;
                                    if (options.oneofs)
                                        object.source = "backup";
                                }
                                return object;
                            };
    
                            /**
                             * Converts this RestoreDatabaseRequest to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseRequest
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            RestoreDatabaseRequest.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return RestoreDatabaseRequest;
                        })();
    
                        v1.RestoreDatabaseMetadata = (function() {
    
                            /**
                             * Properties of a RestoreDatabaseMetadata.
                             * @memberof google.spanner.admin.database.v1
                             * @interface IRestoreDatabaseMetadata
                             * @property {string|null} [name] RestoreDatabaseMetadata name
                             * @property {google.spanner.admin.database.v1.RestoreSourceType|null} [sourceType] RestoreDatabaseMetadata sourceType
                             * @property {google.spanner.admin.database.v1.IBackupInfo|null} [backupInfo] RestoreDatabaseMetadata backupInfo
                             * @property {google.spanner.admin.database.v1.IOperationProgress|null} [progress] RestoreDatabaseMetadata progress
                             * @property {google.protobuf.ITimestamp|null} [cancelTime] RestoreDatabaseMetadata cancelTime
                             * @property {string|null} [optimizeDatabaseOperationName] RestoreDatabaseMetadata optimizeDatabaseOperationName
                             */
    
                            /**
                             * Constructs a new RestoreDatabaseMetadata.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents a RestoreDatabaseMetadata.
                             * @implements IRestoreDatabaseMetadata
                             * @constructor
                             * @param {google.spanner.admin.database.v1.IRestoreDatabaseMetadata=} [properties] Properties to set
                             */
                            function RestoreDatabaseMetadata(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * RestoreDatabaseMetadata name.
                             * @member {string} name
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseMetadata
                             * @instance
                             */
                            RestoreDatabaseMetadata.prototype.name = "";
    
                            /**
                             * RestoreDatabaseMetadata sourceType.
                             * @member {google.spanner.admin.database.v1.RestoreSourceType} sourceType
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseMetadata
                             * @instance
                             */
                            RestoreDatabaseMetadata.prototype.sourceType = 0;
    
                            /**
                             * RestoreDatabaseMetadata backupInfo.
                             * @member {google.spanner.admin.database.v1.IBackupInfo|null|undefined} backupInfo
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseMetadata
                             * @instance
                             */
                            RestoreDatabaseMetadata.prototype.backupInfo = null;
    
                            /**
                             * RestoreDatabaseMetadata progress.
                             * @member {google.spanner.admin.database.v1.IOperationProgress|null|undefined} progress
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseMetadata
                             * @instance
                             */
                            RestoreDatabaseMetadata.prototype.progress = null;
    
                            /**
                             * RestoreDatabaseMetadata cancelTime.
                             * @member {google.protobuf.ITimestamp|null|undefined} cancelTime
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseMetadata
                             * @instance
                             */
                            RestoreDatabaseMetadata.prototype.cancelTime = null;
    
                            /**
                             * RestoreDatabaseMetadata optimizeDatabaseOperationName.
                             * @member {string} optimizeDatabaseOperationName
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseMetadata
                             * @instance
                             */
                            RestoreDatabaseMetadata.prototype.optimizeDatabaseOperationName = "";
    
                            // OneOf field names bound to virtual getters and setters
                            var $oneOfFields;
    
                            /**
                             * RestoreDatabaseMetadata sourceInfo.
                             * @member {"backupInfo"|undefined} sourceInfo
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseMetadata
                             * @instance
                             */
                            Object.defineProperty(RestoreDatabaseMetadata.prototype, "sourceInfo", {
                                get: $util.oneOfGetter($oneOfFields = ["backupInfo"]),
                                set: $util.oneOfSetter($oneOfFields)
                            });
    
                            /**
                             * Creates a new RestoreDatabaseMetadata instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseMetadata
                             * @static
                             * @param {google.spanner.admin.database.v1.IRestoreDatabaseMetadata=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.RestoreDatabaseMetadata} RestoreDatabaseMetadata instance
                             */
                            RestoreDatabaseMetadata.create = function create(properties) {
                                return new RestoreDatabaseMetadata(properties);
                            };
    
                            /**
                             * Encodes the specified RestoreDatabaseMetadata message. Does not implicitly {@link google.spanner.admin.database.v1.RestoreDatabaseMetadata.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseMetadata
                             * @static
                             * @param {google.spanner.admin.database.v1.IRestoreDatabaseMetadata} message RestoreDatabaseMetadata message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            RestoreDatabaseMetadata.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                if (message.sourceType != null && Object.hasOwnProperty.call(message, "sourceType"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.sourceType);
                                if (message.backupInfo != null && Object.hasOwnProperty.call(message, "backupInfo"))
                                    $root.google.spanner.admin.database.v1.BackupInfo.encode(message.backupInfo, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                if (message.progress != null && Object.hasOwnProperty.call(message, "progress"))
                                    $root.google.spanner.admin.database.v1.OperationProgress.encode(message.progress, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                if (message.cancelTime != null && Object.hasOwnProperty.call(message, "cancelTime"))
                                    $root.google.protobuf.Timestamp.encode(message.cancelTime, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                                if (message.optimizeDatabaseOperationName != null && Object.hasOwnProperty.call(message, "optimizeDatabaseOperationName"))
                                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.optimizeDatabaseOperationName);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified RestoreDatabaseMetadata message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.RestoreDatabaseMetadata.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseMetadata
                             * @static
                             * @param {google.spanner.admin.database.v1.IRestoreDatabaseMetadata} message RestoreDatabaseMetadata message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            RestoreDatabaseMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a RestoreDatabaseMetadata message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseMetadata
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.RestoreDatabaseMetadata} RestoreDatabaseMetadata
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            RestoreDatabaseMetadata.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.RestoreDatabaseMetadata();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.name = reader.string();
                                        break;
                                    case 2:
                                        message.sourceType = reader.int32();
                                        break;
                                    case 3:
                                        message.backupInfo = $root.google.spanner.admin.database.v1.BackupInfo.decode(reader, reader.uint32());
                                        break;
                                    case 4:
                                        message.progress = $root.google.spanner.admin.database.v1.OperationProgress.decode(reader, reader.uint32());
                                        break;
                                    case 5:
                                        message.cancelTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    case 6:
                                        message.optimizeDatabaseOperationName = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a RestoreDatabaseMetadata message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseMetadata
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.RestoreDatabaseMetadata} RestoreDatabaseMetadata
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            RestoreDatabaseMetadata.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a RestoreDatabaseMetadata message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseMetadata
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            RestoreDatabaseMetadata.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                var properties = {};
                                if (message.name != null && message.hasOwnProperty("name"))
                                    if (!$util.isString(message.name))
                                        return "name: string expected";
                                if (message.sourceType != null && message.hasOwnProperty("sourceType"))
                                    switch (message.sourceType) {
                                    default:
                                        return "sourceType: enum value expected";
                                    case 0:
                                    case 1:
                                        break;
                                    }
                                if (message.backupInfo != null && message.hasOwnProperty("backupInfo")) {
                                    properties.sourceInfo = 1;
                                    {
                                        var error = $root.google.spanner.admin.database.v1.BackupInfo.verify(message.backupInfo);
                                        if (error)
                                            return "backupInfo." + error;
                                    }
                                }
                                if (message.progress != null && message.hasOwnProperty("progress")) {
                                    var error = $root.google.spanner.admin.database.v1.OperationProgress.verify(message.progress);
                                    if (error)
                                        return "progress." + error;
                                }
                                if (message.cancelTime != null && message.hasOwnProperty("cancelTime")) {
                                    var error = $root.google.protobuf.Timestamp.verify(message.cancelTime);
                                    if (error)
                                        return "cancelTime." + error;
                                }
                                if (message.optimizeDatabaseOperationName != null && message.hasOwnProperty("optimizeDatabaseOperationName"))
                                    if (!$util.isString(message.optimizeDatabaseOperationName))
                                        return "optimizeDatabaseOperationName: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a RestoreDatabaseMetadata message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseMetadata
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.RestoreDatabaseMetadata} RestoreDatabaseMetadata
                             */
                            RestoreDatabaseMetadata.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.RestoreDatabaseMetadata)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.RestoreDatabaseMetadata();
                                if (object.name != null)
                                    message.name = String(object.name);
                                switch (object.sourceType) {
                                case "TYPE_UNSPECIFIED":
                                case 0:
                                    message.sourceType = 0;
                                    break;
                                case "BACKUP":
                                case 1:
                                    message.sourceType = 1;
                                    break;
                                }
                                if (object.backupInfo != null) {
                                    if (typeof object.backupInfo !== "object")
                                        throw TypeError(".google.spanner.admin.database.v1.RestoreDatabaseMetadata.backupInfo: object expected");
                                    message.backupInfo = $root.google.spanner.admin.database.v1.BackupInfo.fromObject(object.backupInfo);
                                }
                                if (object.progress != null) {
                                    if (typeof object.progress !== "object")
                                        throw TypeError(".google.spanner.admin.database.v1.RestoreDatabaseMetadata.progress: object expected");
                                    message.progress = $root.google.spanner.admin.database.v1.OperationProgress.fromObject(object.progress);
                                }
                                if (object.cancelTime != null) {
                                    if (typeof object.cancelTime !== "object")
                                        throw TypeError(".google.spanner.admin.database.v1.RestoreDatabaseMetadata.cancelTime: object expected");
                                    message.cancelTime = $root.google.protobuf.Timestamp.fromObject(object.cancelTime);
                                }
                                if (object.optimizeDatabaseOperationName != null)
                                    message.optimizeDatabaseOperationName = String(object.optimizeDatabaseOperationName);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a RestoreDatabaseMetadata message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseMetadata
                             * @static
                             * @param {google.spanner.admin.database.v1.RestoreDatabaseMetadata} message RestoreDatabaseMetadata
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            RestoreDatabaseMetadata.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.name = "";
                                    object.sourceType = options.enums === String ? "TYPE_UNSPECIFIED" : 0;
                                    object.progress = null;
                                    object.cancelTime = null;
                                    object.optimizeDatabaseOperationName = "";
                                }
                                if (message.name != null && message.hasOwnProperty("name"))
                                    object.name = message.name;
                                if (message.sourceType != null && message.hasOwnProperty("sourceType"))
                                    object.sourceType = options.enums === String ? $root.google.spanner.admin.database.v1.RestoreSourceType[message.sourceType] : message.sourceType;
                                if (message.backupInfo != null && message.hasOwnProperty("backupInfo")) {
                                    object.backupInfo = $root.google.spanner.admin.database.v1.BackupInfo.toObject(message.backupInfo, options);
                                    if (options.oneofs)
                                        object.sourceInfo = "backupInfo";
                                }
                                if (message.progress != null && message.hasOwnProperty("progress"))
                                    object.progress = $root.google.spanner.admin.database.v1.OperationProgress.toObject(message.progress, options);
                                if (message.cancelTime != null && message.hasOwnProperty("cancelTime"))
                                    object.cancelTime = $root.google.protobuf.Timestamp.toObject(message.cancelTime, options);
                                if (message.optimizeDatabaseOperationName != null && message.hasOwnProperty("optimizeDatabaseOperationName"))
                                    object.optimizeDatabaseOperationName = message.optimizeDatabaseOperationName;
                                return object;
                            };
    
                            /**
                             * Converts this RestoreDatabaseMetadata to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.RestoreDatabaseMetadata
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            RestoreDatabaseMetadata.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return RestoreDatabaseMetadata;
                        })();
    
                        v1.OptimizeRestoredDatabaseMetadata = (function() {
    
                            /**
                             * Properties of an OptimizeRestoredDatabaseMetadata.
                             * @memberof google.spanner.admin.database.v1
                             * @interface IOptimizeRestoredDatabaseMetadata
                             * @property {string|null} [name] OptimizeRestoredDatabaseMetadata name
                             * @property {google.spanner.admin.database.v1.IOperationProgress|null} [progress] OptimizeRestoredDatabaseMetadata progress
                             */
    
                            /**
                             * Constructs a new OptimizeRestoredDatabaseMetadata.
                             * @memberof google.spanner.admin.database.v1
                             * @classdesc Represents an OptimizeRestoredDatabaseMetadata.
                             * @implements IOptimizeRestoredDatabaseMetadata
                             * @constructor
                             * @param {google.spanner.admin.database.v1.IOptimizeRestoredDatabaseMetadata=} [properties] Properties to set
                             */
                            function OptimizeRestoredDatabaseMetadata(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * OptimizeRestoredDatabaseMetadata name.
                             * @member {string} name
                             * @memberof google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata
                             * @instance
                             */
                            OptimizeRestoredDatabaseMetadata.prototype.name = "";
    
                            /**
                             * OptimizeRestoredDatabaseMetadata progress.
                             * @member {google.spanner.admin.database.v1.IOperationProgress|null|undefined} progress
                             * @memberof google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata
                             * @instance
                             */
                            OptimizeRestoredDatabaseMetadata.prototype.progress = null;
    
                            /**
                             * Creates a new OptimizeRestoredDatabaseMetadata instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata
                             * @static
                             * @param {google.spanner.admin.database.v1.IOptimizeRestoredDatabaseMetadata=} [properties] Properties to set
                             * @returns {google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata} OptimizeRestoredDatabaseMetadata instance
                             */
                            OptimizeRestoredDatabaseMetadata.create = function create(properties) {
                                return new OptimizeRestoredDatabaseMetadata(properties);
                            };
    
                            /**
                             * Encodes the specified OptimizeRestoredDatabaseMetadata message. Does not implicitly {@link google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata
                             * @static
                             * @param {google.spanner.admin.database.v1.IOptimizeRestoredDatabaseMetadata} message OptimizeRestoredDatabaseMetadata message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            OptimizeRestoredDatabaseMetadata.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                if (message.progress != null && Object.hasOwnProperty.call(message, "progress"))
                                    $root.google.spanner.admin.database.v1.OperationProgress.encode(message.progress, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified OptimizeRestoredDatabaseMetadata message, length delimited. Does not implicitly {@link google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata
                             * @static
                             * @param {google.spanner.admin.database.v1.IOptimizeRestoredDatabaseMetadata} message OptimizeRestoredDatabaseMetadata message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            OptimizeRestoredDatabaseMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an OptimizeRestoredDatabaseMetadata message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata} OptimizeRestoredDatabaseMetadata
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            OptimizeRestoredDatabaseMetadata.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.name = reader.string();
                                        break;
                                    case 2:
                                        message.progress = $root.google.spanner.admin.database.v1.OperationProgress.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an OptimizeRestoredDatabaseMetadata message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata} OptimizeRestoredDatabaseMetadata
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            OptimizeRestoredDatabaseMetadata.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an OptimizeRestoredDatabaseMetadata message.
                             * @function verify
                             * @memberof google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            OptimizeRestoredDatabaseMetadata.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    if (!$util.isString(message.name))
                                        return "name: string expected";
                                if (message.progress != null && message.hasOwnProperty("progress")) {
                                    var error = $root.google.spanner.admin.database.v1.OperationProgress.verify(message.progress);
                                    if (error)
                                        return "progress." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates an OptimizeRestoredDatabaseMetadata message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata} OptimizeRestoredDatabaseMetadata
                             */
                            OptimizeRestoredDatabaseMetadata.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata)
                                    return object;
                                var message = new $root.google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata();
                                if (object.name != null)
                                    message.name = String(object.name);
                                if (object.progress != null) {
                                    if (typeof object.progress !== "object")
                                        throw TypeError(".google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata.progress: object expected");
                                    message.progress = $root.google.spanner.admin.database.v1.OperationProgress.fromObject(object.progress);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an OptimizeRestoredDatabaseMetadata message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata
                             * @static
                             * @param {google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata} message OptimizeRestoredDatabaseMetadata
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            OptimizeRestoredDatabaseMetadata.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.name = "";
                                    object.progress = null;
                                }
                                if (message.name != null && message.hasOwnProperty("name"))
                                    object.name = message.name;
                                if (message.progress != null && message.hasOwnProperty("progress"))
                                    object.progress = $root.google.spanner.admin.database.v1.OperationProgress.toObject(message.progress, options);
                                return object;
                            };
    
                            /**
                             * Converts this OptimizeRestoredDatabaseMetadata to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            OptimizeRestoredDatabaseMetadata.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return OptimizeRestoredDatabaseMetadata;
                        })();
    
                        /**
                         * RestoreSourceType enum.
                         * @name google.spanner.admin.database.v1.RestoreSourceType
                         * @enum {number}
                         * @property {number} TYPE_UNSPECIFIED=0 TYPE_UNSPECIFIED value
                         * @property {number} BACKUP=1 BACKUP value
                         */
                        v1.RestoreSourceType = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "TYPE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "BACKUP"] = 1;
                            return values;
                        })();
    
                        return v1;
                    })();
    
                    return database;
                })();
    
                admin.instance = (function() {
    
                    /**
                     * Namespace instance.
                     * @memberof google.spanner.admin
                     * @namespace
                     */
                    var instance = {};
    
                    instance.v1 = (function() {
    
                        /**
                         * Namespace v1.
                         * @memberof google.spanner.admin.instance
                         * @namespace
                         */
                        var v1 = {};
    
                        v1.InstanceAdmin = (function() {
    
                            /**
                             * Constructs a new InstanceAdmin service.
                             * @memberof google.spanner.admin.instance.v1
                             * @classdesc Represents an InstanceAdmin
                             * @extends $protobuf.rpc.Service
                             * @constructor
                             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                             */
                            function InstanceAdmin(rpcImpl, requestDelimited, responseDelimited) {
                                $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                            }
    
                            (InstanceAdmin.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = InstanceAdmin;
    
                            /**
                             * Creates new InstanceAdmin service using the specified rpc implementation.
                             * @function create
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @static
                             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                             * @returns {InstanceAdmin} RPC service. Useful where requests and/or responses are streamed.
                             */
                            InstanceAdmin.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                                return new this(rpcImpl, requestDelimited, responseDelimited);
                            };
    
                            /**
                             * Callback as used by {@link google.spanner.admin.instance.v1.InstanceAdmin#listInstanceConfigs}.
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @typedef ListInstanceConfigsCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.spanner.admin.instance.v1.ListInstanceConfigsResponse} [response] ListInstanceConfigsResponse
                             */
    
                            /**
                             * Calls ListInstanceConfigs.
                             * @function listInstanceConfigs
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @instance
                             * @param {google.spanner.admin.instance.v1.IListInstanceConfigsRequest} request ListInstanceConfigsRequest message or plain object
                             * @param {google.spanner.admin.instance.v1.InstanceAdmin.ListInstanceConfigsCallback} callback Node-style callback called with the error, if any, and ListInstanceConfigsResponse
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(InstanceAdmin.prototype.listInstanceConfigs = function listInstanceConfigs(request, callback) {
                                return this.rpcCall(listInstanceConfigs, $root.google.spanner.admin.instance.v1.ListInstanceConfigsRequest, $root.google.spanner.admin.instance.v1.ListInstanceConfigsResponse, request, callback);
                            }, "name", { value: "ListInstanceConfigs" });
    
                            /**
                             * Calls ListInstanceConfigs.
                             * @function listInstanceConfigs
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @instance
                             * @param {google.spanner.admin.instance.v1.IListInstanceConfigsRequest} request ListInstanceConfigsRequest message or plain object
                             * @returns {Promise<google.spanner.admin.instance.v1.ListInstanceConfigsResponse>} Promise
                             * @variation 2
                             */
    
                            /**
                             * Callback as used by {@link google.spanner.admin.instance.v1.InstanceAdmin#getInstanceConfig}.
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @typedef GetInstanceConfigCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.spanner.admin.instance.v1.InstanceConfig} [response] InstanceConfig
                             */
    
                            /**
                             * Calls GetInstanceConfig.
                             * @function getInstanceConfig
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @instance
                             * @param {google.spanner.admin.instance.v1.IGetInstanceConfigRequest} request GetInstanceConfigRequest message or plain object
                             * @param {google.spanner.admin.instance.v1.InstanceAdmin.GetInstanceConfigCallback} callback Node-style callback called with the error, if any, and InstanceConfig
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(InstanceAdmin.prototype.getInstanceConfig = function getInstanceConfig(request, callback) {
                                return this.rpcCall(getInstanceConfig, $root.google.spanner.admin.instance.v1.GetInstanceConfigRequest, $root.google.spanner.admin.instance.v1.InstanceConfig, request, callback);
                            }, "name", { value: "GetInstanceConfig" });
    
                            /**
                             * Calls GetInstanceConfig.
                             * @function getInstanceConfig
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @instance
                             * @param {google.spanner.admin.instance.v1.IGetInstanceConfigRequest} request GetInstanceConfigRequest message or plain object
                             * @returns {Promise<google.spanner.admin.instance.v1.InstanceConfig>} Promise
                             * @variation 2
                             */
    
                            /**
                             * Callback as used by {@link google.spanner.admin.instance.v1.InstanceAdmin#listInstances}.
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @typedef ListInstancesCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.spanner.admin.instance.v1.ListInstancesResponse} [response] ListInstancesResponse
                             */
    
                            /**
                             * Calls ListInstances.
                             * @function listInstances
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @instance
                             * @param {google.spanner.admin.instance.v1.IListInstancesRequest} request ListInstancesRequest message or plain object
                             * @param {google.spanner.admin.instance.v1.InstanceAdmin.ListInstancesCallback} callback Node-style callback called with the error, if any, and ListInstancesResponse
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(InstanceAdmin.prototype.listInstances = function listInstances(request, callback) {
                                return this.rpcCall(listInstances, $root.google.spanner.admin.instance.v1.ListInstancesRequest, $root.google.spanner.admin.instance.v1.ListInstancesResponse, request, callback);
                            }, "name", { value: "ListInstances" });
    
                            /**
                             * Calls ListInstances.
                             * @function listInstances
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @instance
                             * @param {google.spanner.admin.instance.v1.IListInstancesRequest} request ListInstancesRequest message or plain object
                             * @returns {Promise<google.spanner.admin.instance.v1.ListInstancesResponse>} Promise
                             * @variation 2
                             */
    
                            /**
                             * Callback as used by {@link google.spanner.admin.instance.v1.InstanceAdmin#getInstance}.
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @typedef GetInstanceCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.spanner.admin.instance.v1.Instance} [response] Instance
                             */
    
                            /**
                             * Calls GetInstance.
                             * @function getInstance
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @instance
                             * @param {google.spanner.admin.instance.v1.IGetInstanceRequest} request GetInstanceRequest message or plain object
                             * @param {google.spanner.admin.instance.v1.InstanceAdmin.GetInstanceCallback} callback Node-style callback called with the error, if any, and Instance
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(InstanceAdmin.prototype.getInstance = function getInstance(request, callback) {
                                return this.rpcCall(getInstance, $root.google.spanner.admin.instance.v1.GetInstanceRequest, $root.google.spanner.admin.instance.v1.Instance, request, callback);
                            }, "name", { value: "GetInstance" });
    
                            /**
                             * Calls GetInstance.
                             * @function getInstance
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @instance
                             * @param {google.spanner.admin.instance.v1.IGetInstanceRequest} request GetInstanceRequest message or plain object
                             * @returns {Promise<google.spanner.admin.instance.v1.Instance>} Promise
                             * @variation 2
                             */
    
                            /**
                             * Callback as used by {@link google.spanner.admin.instance.v1.InstanceAdmin#createInstance}.
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @typedef CreateInstanceCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.longrunning.Operation} [response] Operation
                             */
    
                            /**
                             * Calls CreateInstance.
                             * @function createInstance
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @instance
                             * @param {google.spanner.admin.instance.v1.ICreateInstanceRequest} request CreateInstanceRequest message or plain object
                             * @param {google.spanner.admin.instance.v1.InstanceAdmin.CreateInstanceCallback} callback Node-style callback called with the error, if any, and Operation
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(InstanceAdmin.prototype.createInstance = function createInstance(request, callback) {
                                return this.rpcCall(createInstance, $root.google.spanner.admin.instance.v1.CreateInstanceRequest, $root.google.longrunning.Operation, request, callback);
                            }, "name", { value: "CreateInstance" });
    
                            /**
                             * Calls CreateInstance.
                             * @function createInstance
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @instance
                             * @param {google.spanner.admin.instance.v1.ICreateInstanceRequest} request CreateInstanceRequest message or plain object
                             * @returns {Promise<google.longrunning.Operation>} Promise
                             * @variation 2
                             */
    
                            /**
                             * Callback as used by {@link google.spanner.admin.instance.v1.InstanceAdmin#updateInstance}.
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @typedef UpdateInstanceCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.longrunning.Operation} [response] Operation
                             */
    
                            /**
                             * Calls UpdateInstance.
                             * @function updateInstance
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @instance
                             * @param {google.spanner.admin.instance.v1.IUpdateInstanceRequest} request UpdateInstanceRequest message or plain object
                             * @param {google.spanner.admin.instance.v1.InstanceAdmin.UpdateInstanceCallback} callback Node-style callback called with the error, if any, and Operation
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(InstanceAdmin.prototype.updateInstance = function updateInstance(request, callback) {
                                return this.rpcCall(updateInstance, $root.google.spanner.admin.instance.v1.UpdateInstanceRequest, $root.google.longrunning.Operation, request, callback);
                            }, "name", { value: "UpdateInstance" });
    
                            /**
                             * Calls UpdateInstance.
                             * @function updateInstance
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @instance
                             * @param {google.spanner.admin.instance.v1.IUpdateInstanceRequest} request UpdateInstanceRequest message or plain object
                             * @returns {Promise<google.longrunning.Operation>} Promise
                             * @variation 2
                             */
    
                            /**
                             * Callback as used by {@link google.spanner.admin.instance.v1.InstanceAdmin#deleteInstance}.
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @typedef DeleteInstanceCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.protobuf.Empty} [response] Empty
                             */
    
                            /**
                             * Calls DeleteInstance.
                             * @function deleteInstance
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @instance
                             * @param {google.spanner.admin.instance.v1.IDeleteInstanceRequest} request DeleteInstanceRequest message or plain object
                             * @param {google.spanner.admin.instance.v1.InstanceAdmin.DeleteInstanceCallback} callback Node-style callback called with the error, if any, and Empty
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(InstanceAdmin.prototype.deleteInstance = function deleteInstance(request, callback) {
                                return this.rpcCall(deleteInstance, $root.google.spanner.admin.instance.v1.DeleteInstanceRequest, $root.google.protobuf.Empty, request, callback);
                            }, "name", { value: "DeleteInstance" });
    
                            /**
                             * Calls DeleteInstance.
                             * @function deleteInstance
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @instance
                             * @param {google.spanner.admin.instance.v1.IDeleteInstanceRequest} request DeleteInstanceRequest message or plain object
                             * @returns {Promise<google.protobuf.Empty>} Promise
                             * @variation 2
                             */
    
                            /**
                             * Callback as used by {@link google.spanner.admin.instance.v1.InstanceAdmin#setIamPolicy}.
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @typedef SetIamPolicyCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.iam.v1.Policy} [response] Policy
                             */
    
                            /**
                             * Calls SetIamPolicy.
                             * @function setIamPolicy
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @instance
                             * @param {google.iam.v1.ISetIamPolicyRequest} request SetIamPolicyRequest message or plain object
                             * @param {google.spanner.admin.instance.v1.InstanceAdmin.SetIamPolicyCallback} callback Node-style callback called with the error, if any, and Policy
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(InstanceAdmin.prototype.setIamPolicy = function setIamPolicy(request, callback) {
                                return this.rpcCall(setIamPolicy, $root.google.iam.v1.SetIamPolicyRequest, $root.google.iam.v1.Policy, request, callback);
                            }, "name", { value: "SetIamPolicy" });
    
                            /**
                             * Calls SetIamPolicy.
                             * @function setIamPolicy
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @instance
                             * @param {google.iam.v1.ISetIamPolicyRequest} request SetIamPolicyRequest message or plain object
                             * @returns {Promise<google.iam.v1.Policy>} Promise
                             * @variation 2
                             */
    
                            /**
                             * Callback as used by {@link google.spanner.admin.instance.v1.InstanceAdmin#getIamPolicy}.
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @typedef GetIamPolicyCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.iam.v1.Policy} [response] Policy
                             */
    
                            /**
                             * Calls GetIamPolicy.
                             * @function getIamPolicy
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @instance
                             * @param {google.iam.v1.IGetIamPolicyRequest} request GetIamPolicyRequest message or plain object
                             * @param {google.spanner.admin.instance.v1.InstanceAdmin.GetIamPolicyCallback} callback Node-style callback called with the error, if any, and Policy
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(InstanceAdmin.prototype.getIamPolicy = function getIamPolicy(request, callback) {
                                return this.rpcCall(getIamPolicy, $root.google.iam.v1.GetIamPolicyRequest, $root.google.iam.v1.Policy, request, callback);
                            }, "name", { value: "GetIamPolicy" });
    
                            /**
                             * Calls GetIamPolicy.
                             * @function getIamPolicy
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @instance
                             * @param {google.iam.v1.IGetIamPolicyRequest} request GetIamPolicyRequest message or plain object
                             * @returns {Promise<google.iam.v1.Policy>} Promise
                             * @variation 2
                             */
    
                            /**
                             * Callback as used by {@link google.spanner.admin.instance.v1.InstanceAdmin#testIamPermissions}.
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @typedef TestIamPermissionsCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.iam.v1.TestIamPermissionsResponse} [response] TestIamPermissionsResponse
                             */
    
                            /**
                             * Calls TestIamPermissions.
                             * @function testIamPermissions
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @instance
                             * @param {google.iam.v1.ITestIamPermissionsRequest} request TestIamPermissionsRequest message or plain object
                             * @param {google.spanner.admin.instance.v1.InstanceAdmin.TestIamPermissionsCallback} callback Node-style callback called with the error, if any, and TestIamPermissionsResponse
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(InstanceAdmin.prototype.testIamPermissions = function testIamPermissions(request, callback) {
                                return this.rpcCall(testIamPermissions, $root.google.iam.v1.TestIamPermissionsRequest, $root.google.iam.v1.TestIamPermissionsResponse, request, callback);
                            }, "name", { value: "TestIamPermissions" });
    
                            /**
                             * Calls TestIamPermissions.
                             * @function testIamPermissions
                             * @memberof google.spanner.admin.instance.v1.InstanceAdmin
                             * @instance
                             * @param {google.iam.v1.ITestIamPermissionsRequest} request TestIamPermissionsRequest message or plain object
                             * @returns {Promise<google.iam.v1.TestIamPermissionsResponse>} Promise
                             * @variation 2
                             */
    
                            return InstanceAdmin;
                        })();
    
                        v1.ReplicaInfo = (function() {
    
                            /**
                             * Properties of a ReplicaInfo.
                             * @memberof google.spanner.admin.instance.v1
                             * @interface IReplicaInfo
                             * @property {string|null} [location] ReplicaInfo location
                             * @property {google.spanner.admin.instance.v1.ReplicaInfo.ReplicaType|null} [type] ReplicaInfo type
                             * @property {boolean|null} [defaultLeaderLocation] ReplicaInfo defaultLeaderLocation
                             */
    
                            /**
                             * Constructs a new ReplicaInfo.
                             * @memberof google.spanner.admin.instance.v1
                             * @classdesc Represents a ReplicaInfo.
                             * @implements IReplicaInfo
                             * @constructor
                             * @param {google.spanner.admin.instance.v1.IReplicaInfo=} [properties] Properties to set
                             */
                            function ReplicaInfo(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ReplicaInfo location.
                             * @member {string} location
                             * @memberof google.spanner.admin.instance.v1.ReplicaInfo
                             * @instance
                             */
                            ReplicaInfo.prototype.location = "";
    
                            /**
                             * ReplicaInfo type.
                             * @member {google.spanner.admin.instance.v1.ReplicaInfo.ReplicaType} type
                             * @memberof google.spanner.admin.instance.v1.ReplicaInfo
                             * @instance
                             */
                            ReplicaInfo.prototype.type = 0;
    
                            /**
                             * ReplicaInfo defaultLeaderLocation.
                             * @member {boolean} defaultLeaderLocation
                             * @memberof google.spanner.admin.instance.v1.ReplicaInfo
                             * @instance
                             */
                            ReplicaInfo.prototype.defaultLeaderLocation = false;
    
                            /**
                             * Creates a new ReplicaInfo instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.instance.v1.ReplicaInfo
                             * @static
                             * @param {google.spanner.admin.instance.v1.IReplicaInfo=} [properties] Properties to set
                             * @returns {google.spanner.admin.instance.v1.ReplicaInfo} ReplicaInfo instance
                             */
                            ReplicaInfo.create = function create(properties) {
                                return new ReplicaInfo(properties);
                            };
    
                            /**
                             * Encodes the specified ReplicaInfo message. Does not implicitly {@link google.spanner.admin.instance.v1.ReplicaInfo.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.instance.v1.ReplicaInfo
                             * @static
                             * @param {google.spanner.admin.instance.v1.IReplicaInfo} message ReplicaInfo message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ReplicaInfo.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.location != null && Object.hasOwnProperty.call(message, "location"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.location);
                                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                                if (message.defaultLeaderLocation != null && Object.hasOwnProperty.call(message, "defaultLeaderLocation"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.defaultLeaderLocation);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ReplicaInfo message, length delimited. Does not implicitly {@link google.spanner.admin.instance.v1.ReplicaInfo.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.instance.v1.ReplicaInfo
                             * @static
                             * @param {google.spanner.admin.instance.v1.IReplicaInfo} message ReplicaInfo message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ReplicaInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a ReplicaInfo message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.instance.v1.ReplicaInfo
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.instance.v1.ReplicaInfo} ReplicaInfo
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ReplicaInfo.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.instance.v1.ReplicaInfo();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.location = reader.string();
                                        break;
                                    case 2:
                                        message.type = reader.int32();
                                        break;
                                    case 3:
                                        message.defaultLeaderLocation = reader.bool();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a ReplicaInfo message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.instance.v1.ReplicaInfo
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.instance.v1.ReplicaInfo} ReplicaInfo
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ReplicaInfo.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a ReplicaInfo message.
                             * @function verify
                             * @memberof google.spanner.admin.instance.v1.ReplicaInfo
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ReplicaInfo.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.location != null && message.hasOwnProperty("location"))
                                    if (!$util.isString(message.location))
                                        return "location: string expected";
                                if (message.type != null && message.hasOwnProperty("type"))
                                    switch (message.type) {
                                    default:
                                        return "type: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                        break;
                                    }
                                if (message.defaultLeaderLocation != null && message.hasOwnProperty("defaultLeaderLocation"))
                                    if (typeof message.defaultLeaderLocation !== "boolean")
                                        return "defaultLeaderLocation: boolean expected";
                                return null;
                            };
    
                            /**
                             * Creates a ReplicaInfo message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.instance.v1.ReplicaInfo
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.instance.v1.ReplicaInfo} ReplicaInfo
                             */
                            ReplicaInfo.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.instance.v1.ReplicaInfo)
                                    return object;
                                var message = new $root.google.spanner.admin.instance.v1.ReplicaInfo();
                                if (object.location != null)
                                    message.location = String(object.location);
                                switch (object.type) {
                                case "TYPE_UNSPECIFIED":
                                case 0:
                                    message.type = 0;
                                    break;
                                case "READ_WRITE":
                                case 1:
                                    message.type = 1;
                                    break;
                                case "READ_ONLY":
                                case 2:
                                    message.type = 2;
                                    break;
                                case "WITNESS":
                                case 3:
                                    message.type = 3;
                                    break;
                                }
                                if (object.defaultLeaderLocation != null)
                                    message.defaultLeaderLocation = Boolean(object.defaultLeaderLocation);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a ReplicaInfo message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.instance.v1.ReplicaInfo
                             * @static
                             * @param {google.spanner.admin.instance.v1.ReplicaInfo} message ReplicaInfo
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ReplicaInfo.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.location = "";
                                    object.type = options.enums === String ? "TYPE_UNSPECIFIED" : 0;
                                    object.defaultLeaderLocation = false;
                                }
                                if (message.location != null && message.hasOwnProperty("location"))
                                    object.location = message.location;
                                if (message.type != null && message.hasOwnProperty("type"))
                                    object.type = options.enums === String ? $root.google.spanner.admin.instance.v1.ReplicaInfo.ReplicaType[message.type] : message.type;
                                if (message.defaultLeaderLocation != null && message.hasOwnProperty("defaultLeaderLocation"))
                                    object.defaultLeaderLocation = message.defaultLeaderLocation;
                                return object;
                            };
    
                            /**
                             * Converts this ReplicaInfo to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.instance.v1.ReplicaInfo
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ReplicaInfo.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * ReplicaType enum.
                             * @name google.spanner.admin.instance.v1.ReplicaInfo.ReplicaType
                             * @enum {number}
                             * @property {number} TYPE_UNSPECIFIED=0 TYPE_UNSPECIFIED value
                             * @property {number} READ_WRITE=1 READ_WRITE value
                             * @property {number} READ_ONLY=2 READ_ONLY value
                             * @property {number} WITNESS=3 WITNESS value
                             */
                            ReplicaInfo.ReplicaType = (function() {
                                var valuesById = {}, values = Object.create(valuesById);
                                values[valuesById[0] = "TYPE_UNSPECIFIED"] = 0;
                                values[valuesById[1] = "READ_WRITE"] = 1;
                                values[valuesById[2] = "READ_ONLY"] = 2;
                                values[valuesById[3] = "WITNESS"] = 3;
                                return values;
                            })();
    
                            return ReplicaInfo;
                        })();
    
                        v1.InstanceConfig = (function() {
    
                            /**
                             * Properties of an InstanceConfig.
                             * @memberof google.spanner.admin.instance.v1
                             * @interface IInstanceConfig
                             * @property {string|null} [name] InstanceConfig name
                             * @property {string|null} [displayName] InstanceConfig displayName
                             * @property {Array.<google.spanner.admin.instance.v1.IReplicaInfo>|null} [replicas] InstanceConfig replicas
                             */
    
                            /**
                             * Constructs a new InstanceConfig.
                             * @memberof google.spanner.admin.instance.v1
                             * @classdesc Represents an InstanceConfig.
                             * @implements IInstanceConfig
                             * @constructor
                             * @param {google.spanner.admin.instance.v1.IInstanceConfig=} [properties] Properties to set
                             */
                            function InstanceConfig(properties) {
                                this.replicas = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * InstanceConfig name.
                             * @member {string} name
                             * @memberof google.spanner.admin.instance.v1.InstanceConfig
                             * @instance
                             */
                            InstanceConfig.prototype.name = "";
    
                            /**
                             * InstanceConfig displayName.
                             * @member {string} displayName
                             * @memberof google.spanner.admin.instance.v1.InstanceConfig
                             * @instance
                             */
                            InstanceConfig.prototype.displayName = "";
    
                            /**
                             * InstanceConfig replicas.
                             * @member {Array.<google.spanner.admin.instance.v1.IReplicaInfo>} replicas
                             * @memberof google.spanner.admin.instance.v1.InstanceConfig
                             * @instance
                             */
                            InstanceConfig.prototype.replicas = $util.emptyArray;
    
                            /**
                             * Creates a new InstanceConfig instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.instance.v1.InstanceConfig
                             * @static
                             * @param {google.spanner.admin.instance.v1.IInstanceConfig=} [properties] Properties to set
                             * @returns {google.spanner.admin.instance.v1.InstanceConfig} InstanceConfig instance
                             */
                            InstanceConfig.create = function create(properties) {
                                return new InstanceConfig(properties);
                            };
    
                            /**
                             * Encodes the specified InstanceConfig message. Does not implicitly {@link google.spanner.admin.instance.v1.InstanceConfig.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.instance.v1.InstanceConfig
                             * @static
                             * @param {google.spanner.admin.instance.v1.IInstanceConfig} message InstanceConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            InstanceConfig.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                if (message.displayName != null && Object.hasOwnProperty.call(message, "displayName"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.displayName);
                                if (message.replicas != null && message.replicas.length)
                                    for (var i = 0; i < message.replicas.length; ++i)
                                        $root.google.spanner.admin.instance.v1.ReplicaInfo.encode(message.replicas[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified InstanceConfig message, length delimited. Does not implicitly {@link google.spanner.admin.instance.v1.InstanceConfig.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.instance.v1.InstanceConfig
                             * @static
                             * @param {google.spanner.admin.instance.v1.IInstanceConfig} message InstanceConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            InstanceConfig.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an InstanceConfig message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.instance.v1.InstanceConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.instance.v1.InstanceConfig} InstanceConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            InstanceConfig.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.instance.v1.InstanceConfig();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.name = reader.string();
                                        break;
                                    case 2:
                                        message.displayName = reader.string();
                                        break;
                                    case 3:
                                        if (!(message.replicas && message.replicas.length))
                                            message.replicas = [];
                                        message.replicas.push($root.google.spanner.admin.instance.v1.ReplicaInfo.decode(reader, reader.uint32()));
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an InstanceConfig message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.instance.v1.InstanceConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.instance.v1.InstanceConfig} InstanceConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            InstanceConfig.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an InstanceConfig message.
                             * @function verify
                             * @memberof google.spanner.admin.instance.v1.InstanceConfig
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            InstanceConfig.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    if (!$util.isString(message.name))
                                        return "name: string expected";
                                if (message.displayName != null && message.hasOwnProperty("displayName"))
                                    if (!$util.isString(message.displayName))
                                        return "displayName: string expected";
                                if (message.replicas != null && message.hasOwnProperty("replicas")) {
                                    if (!Array.isArray(message.replicas))
                                        return "replicas: array expected";
                                    for (var i = 0; i < message.replicas.length; ++i) {
                                        var error = $root.google.spanner.admin.instance.v1.ReplicaInfo.verify(message.replicas[i]);
                                        if (error)
                                            return "replicas." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates an InstanceConfig message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.instance.v1.InstanceConfig
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.instance.v1.InstanceConfig} InstanceConfig
                             */
                            InstanceConfig.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.instance.v1.InstanceConfig)
                                    return object;
                                var message = new $root.google.spanner.admin.instance.v1.InstanceConfig();
                                if (object.name != null)
                                    message.name = String(object.name);
                                if (object.displayName != null)
                                    message.displayName = String(object.displayName);
                                if (object.replicas) {
                                    if (!Array.isArray(object.replicas))
                                        throw TypeError(".google.spanner.admin.instance.v1.InstanceConfig.replicas: array expected");
                                    message.replicas = [];
                                    for (var i = 0; i < object.replicas.length; ++i) {
                                        if (typeof object.replicas[i] !== "object")
                                            throw TypeError(".google.spanner.admin.instance.v1.InstanceConfig.replicas: object expected");
                                        message.replicas[i] = $root.google.spanner.admin.instance.v1.ReplicaInfo.fromObject(object.replicas[i]);
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an InstanceConfig message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.instance.v1.InstanceConfig
                             * @static
                             * @param {google.spanner.admin.instance.v1.InstanceConfig} message InstanceConfig
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            InstanceConfig.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.replicas = [];
                                if (options.defaults) {
                                    object.name = "";
                                    object.displayName = "";
                                }
                                if (message.name != null && message.hasOwnProperty("name"))
                                    object.name = message.name;
                                if (message.displayName != null && message.hasOwnProperty("displayName"))
                                    object.displayName = message.displayName;
                                if (message.replicas && message.replicas.length) {
                                    object.replicas = [];
                                    for (var j = 0; j < message.replicas.length; ++j)
                                        object.replicas[j] = $root.google.spanner.admin.instance.v1.ReplicaInfo.toObject(message.replicas[j], options);
                                }
                                return object;
                            };
    
                            /**
                             * Converts this InstanceConfig to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.instance.v1.InstanceConfig
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            InstanceConfig.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return InstanceConfig;
                        })();
    
                        v1.Instance = (function() {
    
                            /**
                             * Properties of an Instance.
                             * @memberof google.spanner.admin.instance.v1
                             * @interface IInstance
                             * @property {string|null} [name] Instance name
                             * @property {string|null} [config] Instance config
                             * @property {string|null} [displayName] Instance displayName
                             * @property {number|null} [nodeCount] Instance nodeCount
                             * @property {google.spanner.admin.instance.v1.Instance.State|null} [state] Instance state
                             * @property {Object.<string,string>|null} [labels] Instance labels
                             * @property {Array.<string>|null} [endpointUris] Instance endpointUris
                             */
    
                            /**
                             * Constructs a new Instance.
                             * @memberof google.spanner.admin.instance.v1
                             * @classdesc Represents an Instance.
                             * @implements IInstance
                             * @constructor
                             * @param {google.spanner.admin.instance.v1.IInstance=} [properties] Properties to set
                             */
                            function Instance(properties) {
                                this.labels = {};
                                this.endpointUris = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Instance name.
                             * @member {string} name
                             * @memberof google.spanner.admin.instance.v1.Instance
                             * @instance
                             */
                            Instance.prototype.name = "";
    
                            /**
                             * Instance config.
                             * @member {string} config
                             * @memberof google.spanner.admin.instance.v1.Instance
                             * @instance
                             */
                            Instance.prototype.config = "";
    
                            /**
                             * Instance displayName.
                             * @member {string} displayName
                             * @memberof google.spanner.admin.instance.v1.Instance
                             * @instance
                             */
                            Instance.prototype.displayName = "";
    
                            /**
                             * Instance nodeCount.
                             * @member {number} nodeCount
                             * @memberof google.spanner.admin.instance.v1.Instance
                             * @instance
                             */
                            Instance.prototype.nodeCount = 0;
    
                            /**
                             * Instance state.
                             * @member {google.spanner.admin.instance.v1.Instance.State} state
                             * @memberof google.spanner.admin.instance.v1.Instance
                             * @instance
                             */
                            Instance.prototype.state = 0;
    
                            /**
                             * Instance labels.
                             * @member {Object.<string,string>} labels
                             * @memberof google.spanner.admin.instance.v1.Instance
                             * @instance
                             */
                            Instance.prototype.labels = $util.emptyObject;
    
                            /**
                             * Instance endpointUris.
                             * @member {Array.<string>} endpointUris
                             * @memberof google.spanner.admin.instance.v1.Instance
                             * @instance
                             */
                            Instance.prototype.endpointUris = $util.emptyArray;
    
                            /**
                             * Creates a new Instance instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.instance.v1.Instance
                             * @static
                             * @param {google.spanner.admin.instance.v1.IInstance=} [properties] Properties to set
                             * @returns {google.spanner.admin.instance.v1.Instance} Instance instance
                             */
                            Instance.create = function create(properties) {
                                return new Instance(properties);
                            };
    
                            /**
                             * Encodes the specified Instance message. Does not implicitly {@link google.spanner.admin.instance.v1.Instance.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.instance.v1.Instance
                             * @static
                             * @param {google.spanner.admin.instance.v1.IInstance} message Instance message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Instance.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                if (message.config != null && Object.hasOwnProperty.call(message, "config"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.config);
                                if (message.displayName != null && Object.hasOwnProperty.call(message, "displayName"))
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.displayName);
                                if (message.nodeCount != null && Object.hasOwnProperty.call(message, "nodeCount"))
                                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.nodeCount);
                                if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.state);
                                if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                                    for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                                        writer.uint32(/* id 7, wireType 2 =*/58).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.labels[keys[i]]).ldelim();
                                if (message.endpointUris != null && message.endpointUris.length)
                                    for (var i = 0; i < message.endpointUris.length; ++i)
                                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.endpointUris[i]);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Instance message, length delimited. Does not implicitly {@link google.spanner.admin.instance.v1.Instance.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.instance.v1.Instance
                             * @static
                             * @param {google.spanner.admin.instance.v1.IInstance} message Instance message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Instance.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an Instance message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.instance.v1.Instance
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.instance.v1.Instance} Instance
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Instance.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.instance.v1.Instance(), key;
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.name = reader.string();
                                        break;
                                    case 2:
                                        message.config = reader.string();
                                        break;
                                    case 3:
                                        message.displayName = reader.string();
                                        break;
                                    case 5:
                                        message.nodeCount = reader.int32();
                                        break;
                                    case 6:
                                        message.state = reader.int32();
                                        break;
                                    case 7:
                                        reader.skip().pos++;
                                        if (message.labels === $util.emptyObject)
                                            message.labels = {};
                                        key = reader.string();
                                        reader.pos++;
                                        message.labels[key] = reader.string();
                                        break;
                                    case 8:
                                        if (!(message.endpointUris && message.endpointUris.length))
                                            message.endpointUris = [];
                                        message.endpointUris.push(reader.string());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an Instance message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.instance.v1.Instance
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.instance.v1.Instance} Instance
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Instance.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an Instance message.
                             * @function verify
                             * @memberof google.spanner.admin.instance.v1.Instance
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Instance.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    if (!$util.isString(message.name))
                                        return "name: string expected";
                                if (message.config != null && message.hasOwnProperty("config"))
                                    if (!$util.isString(message.config))
                                        return "config: string expected";
                                if (message.displayName != null && message.hasOwnProperty("displayName"))
                                    if (!$util.isString(message.displayName))
                                        return "displayName: string expected";
                                if (message.nodeCount != null && message.hasOwnProperty("nodeCount"))
                                    if (!$util.isInteger(message.nodeCount))
                                        return "nodeCount: integer expected";
                                if (message.state != null && message.hasOwnProperty("state"))
                                    switch (message.state) {
                                    default:
                                        return "state: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                if (message.labels != null && message.hasOwnProperty("labels")) {
                                    if (!$util.isObject(message.labels))
                                        return "labels: object expected";
                                    var key = Object.keys(message.labels);
                                    for (var i = 0; i < key.length; ++i)
                                        if (!$util.isString(message.labels[key[i]]))
                                            return "labels: string{k:string} expected";
                                }
                                if (message.endpointUris != null && message.hasOwnProperty("endpointUris")) {
                                    if (!Array.isArray(message.endpointUris))
                                        return "endpointUris: array expected";
                                    for (var i = 0; i < message.endpointUris.length; ++i)
                                        if (!$util.isString(message.endpointUris[i]))
                                            return "endpointUris: string[] expected";
                                }
                                return null;
                            };
    
                            /**
                             * Creates an Instance message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.instance.v1.Instance
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.instance.v1.Instance} Instance
                             */
                            Instance.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.instance.v1.Instance)
                                    return object;
                                var message = new $root.google.spanner.admin.instance.v1.Instance();
                                if (object.name != null)
                                    message.name = String(object.name);
                                if (object.config != null)
                                    message.config = String(object.config);
                                if (object.displayName != null)
                                    message.displayName = String(object.displayName);
                                if (object.nodeCount != null)
                                    message.nodeCount = object.nodeCount | 0;
                                switch (object.state) {
                                case "STATE_UNSPECIFIED":
                                case 0:
                                    message.state = 0;
                                    break;
                                case "CREATING":
                                case 1:
                                    message.state = 1;
                                    break;
                                case "READY":
                                case 2:
                                    message.state = 2;
                                    break;
                                }
                                if (object.labels) {
                                    if (typeof object.labels !== "object")
                                        throw TypeError(".google.spanner.admin.instance.v1.Instance.labels: object expected");
                                    message.labels = {};
                                    for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                                        message.labels[keys[i]] = String(object.labels[keys[i]]);
                                }
                                if (object.endpointUris) {
                                    if (!Array.isArray(object.endpointUris))
                                        throw TypeError(".google.spanner.admin.instance.v1.Instance.endpointUris: array expected");
                                    message.endpointUris = [];
                                    for (var i = 0; i < object.endpointUris.length; ++i)
                                        message.endpointUris[i] = String(object.endpointUris[i]);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an Instance message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.instance.v1.Instance
                             * @static
                             * @param {google.spanner.admin.instance.v1.Instance} message Instance
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Instance.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.endpointUris = [];
                                if (options.objects || options.defaults)
                                    object.labels = {};
                                if (options.defaults) {
                                    object.name = "";
                                    object.config = "";
                                    object.displayName = "";
                                    object.nodeCount = 0;
                                    object.state = options.enums === String ? "STATE_UNSPECIFIED" : 0;
                                }
                                if (message.name != null && message.hasOwnProperty("name"))
                                    object.name = message.name;
                                if (message.config != null && message.hasOwnProperty("config"))
                                    object.config = message.config;
                                if (message.displayName != null && message.hasOwnProperty("displayName"))
                                    object.displayName = message.displayName;
                                if (message.nodeCount != null && message.hasOwnProperty("nodeCount"))
                                    object.nodeCount = message.nodeCount;
                                if (message.state != null && message.hasOwnProperty("state"))
                                    object.state = options.enums === String ? $root.google.spanner.admin.instance.v1.Instance.State[message.state] : message.state;
                                var keys2;
                                if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                                    object.labels = {};
                                    for (var j = 0; j < keys2.length; ++j)
                                        object.labels[keys2[j]] = message.labels[keys2[j]];
                                }
                                if (message.endpointUris && message.endpointUris.length) {
                                    object.endpointUris = [];
                                    for (var j = 0; j < message.endpointUris.length; ++j)
                                        object.endpointUris[j] = message.endpointUris[j];
                                }
                                return object;
                            };
    
                            /**
                             * Converts this Instance to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.instance.v1.Instance
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Instance.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * State enum.
                             * @name google.spanner.admin.instance.v1.Instance.State
                             * @enum {number}
                             * @property {number} STATE_UNSPECIFIED=0 STATE_UNSPECIFIED value
                             * @property {number} CREATING=1 CREATING value
                             * @property {number} READY=2 READY value
                             */
                            Instance.State = (function() {
                                var valuesById = {}, values = Object.create(valuesById);
                                values[valuesById[0] = "STATE_UNSPECIFIED"] = 0;
                                values[valuesById[1] = "CREATING"] = 1;
                                values[valuesById[2] = "READY"] = 2;
                                return values;
                            })();
    
                            return Instance;
                        })();
    
                        v1.ListInstanceConfigsRequest = (function() {
    
                            /**
                             * Properties of a ListInstanceConfigsRequest.
                             * @memberof google.spanner.admin.instance.v1
                             * @interface IListInstanceConfigsRequest
                             * @property {string|null} [parent] ListInstanceConfigsRequest parent
                             * @property {number|null} [pageSize] ListInstanceConfigsRequest pageSize
                             * @property {string|null} [pageToken] ListInstanceConfigsRequest pageToken
                             */
    
                            /**
                             * Constructs a new ListInstanceConfigsRequest.
                             * @memberof google.spanner.admin.instance.v1
                             * @classdesc Represents a ListInstanceConfigsRequest.
                             * @implements IListInstanceConfigsRequest
                             * @constructor
                             * @param {google.spanner.admin.instance.v1.IListInstanceConfigsRequest=} [properties] Properties to set
                             */
                            function ListInstanceConfigsRequest(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ListInstanceConfigsRequest parent.
                             * @member {string} parent
                             * @memberof google.spanner.admin.instance.v1.ListInstanceConfigsRequest
                             * @instance
                             */
                            ListInstanceConfigsRequest.prototype.parent = "";
    
                            /**
                             * ListInstanceConfigsRequest pageSize.
                             * @member {number} pageSize
                             * @memberof google.spanner.admin.instance.v1.ListInstanceConfigsRequest
                             * @instance
                             */
                            ListInstanceConfigsRequest.prototype.pageSize = 0;
    
                            /**
                             * ListInstanceConfigsRequest pageToken.
                             * @member {string} pageToken
                             * @memberof google.spanner.admin.instance.v1.ListInstanceConfigsRequest
                             * @instance
                             */
                            ListInstanceConfigsRequest.prototype.pageToken = "";
    
                            /**
                             * Creates a new ListInstanceConfigsRequest instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.instance.v1.ListInstanceConfigsRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.IListInstanceConfigsRequest=} [properties] Properties to set
                             * @returns {google.spanner.admin.instance.v1.ListInstanceConfigsRequest} ListInstanceConfigsRequest instance
                             */
                            ListInstanceConfigsRequest.create = function create(properties) {
                                return new ListInstanceConfigsRequest(properties);
                            };
    
                            /**
                             * Encodes the specified ListInstanceConfigsRequest message. Does not implicitly {@link google.spanner.admin.instance.v1.ListInstanceConfigsRequest.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.instance.v1.ListInstanceConfigsRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.IListInstanceConfigsRequest} message ListInstanceConfigsRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ListInstanceConfigsRequest.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                                if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                                if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ListInstanceConfigsRequest message, length delimited. Does not implicitly {@link google.spanner.admin.instance.v1.ListInstanceConfigsRequest.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.instance.v1.ListInstanceConfigsRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.IListInstanceConfigsRequest} message ListInstanceConfigsRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ListInstanceConfigsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a ListInstanceConfigsRequest message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.instance.v1.ListInstanceConfigsRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.instance.v1.ListInstanceConfigsRequest} ListInstanceConfigsRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ListInstanceConfigsRequest.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.instance.v1.ListInstanceConfigsRequest();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.parent = reader.string();
                                        break;
                                    case 2:
                                        message.pageSize = reader.int32();
                                        break;
                                    case 3:
                                        message.pageToken = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a ListInstanceConfigsRequest message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.instance.v1.ListInstanceConfigsRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.instance.v1.ListInstanceConfigsRequest} ListInstanceConfigsRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ListInstanceConfigsRequest.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a ListInstanceConfigsRequest message.
                             * @function verify
                             * @memberof google.spanner.admin.instance.v1.ListInstanceConfigsRequest
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ListInstanceConfigsRequest.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.parent != null && message.hasOwnProperty("parent"))
                                    if (!$util.isString(message.parent))
                                        return "parent: string expected";
                                if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                    if (!$util.isInteger(message.pageSize))
                                        return "pageSize: integer expected";
                                if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                    if (!$util.isString(message.pageToken))
                                        return "pageToken: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a ListInstanceConfigsRequest message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.instance.v1.ListInstanceConfigsRequest
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.instance.v1.ListInstanceConfigsRequest} ListInstanceConfigsRequest
                             */
                            ListInstanceConfigsRequest.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.instance.v1.ListInstanceConfigsRequest)
                                    return object;
                                var message = new $root.google.spanner.admin.instance.v1.ListInstanceConfigsRequest();
                                if (object.parent != null)
                                    message.parent = String(object.parent);
                                if (object.pageSize != null)
                                    message.pageSize = object.pageSize | 0;
                                if (object.pageToken != null)
                                    message.pageToken = String(object.pageToken);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a ListInstanceConfigsRequest message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.instance.v1.ListInstanceConfigsRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.ListInstanceConfigsRequest} message ListInstanceConfigsRequest
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ListInstanceConfigsRequest.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.parent = "";
                                    object.pageSize = 0;
                                    object.pageToken = "";
                                }
                                if (message.parent != null && message.hasOwnProperty("parent"))
                                    object.parent = message.parent;
                                if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                    object.pageSize = message.pageSize;
                                if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                    object.pageToken = message.pageToken;
                                return object;
                            };
    
                            /**
                             * Converts this ListInstanceConfigsRequest to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.instance.v1.ListInstanceConfigsRequest
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ListInstanceConfigsRequest.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return ListInstanceConfigsRequest;
                        })();
    
                        v1.ListInstanceConfigsResponse = (function() {
    
                            /**
                             * Properties of a ListInstanceConfigsResponse.
                             * @memberof google.spanner.admin.instance.v1
                             * @interface IListInstanceConfigsResponse
                             * @property {Array.<google.spanner.admin.instance.v1.IInstanceConfig>|null} [instanceConfigs] ListInstanceConfigsResponse instanceConfigs
                             * @property {string|null} [nextPageToken] ListInstanceConfigsResponse nextPageToken
                             */
    
                            /**
                             * Constructs a new ListInstanceConfigsResponse.
                             * @memberof google.spanner.admin.instance.v1
                             * @classdesc Represents a ListInstanceConfigsResponse.
                             * @implements IListInstanceConfigsResponse
                             * @constructor
                             * @param {google.spanner.admin.instance.v1.IListInstanceConfigsResponse=} [properties] Properties to set
                             */
                            function ListInstanceConfigsResponse(properties) {
                                this.instanceConfigs = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ListInstanceConfigsResponse instanceConfigs.
                             * @member {Array.<google.spanner.admin.instance.v1.IInstanceConfig>} instanceConfigs
                             * @memberof google.spanner.admin.instance.v1.ListInstanceConfigsResponse
                             * @instance
                             */
                            ListInstanceConfigsResponse.prototype.instanceConfigs = $util.emptyArray;
    
                            /**
                             * ListInstanceConfigsResponse nextPageToken.
                             * @member {string} nextPageToken
                             * @memberof google.spanner.admin.instance.v1.ListInstanceConfigsResponse
                             * @instance
                             */
                            ListInstanceConfigsResponse.prototype.nextPageToken = "";
    
                            /**
                             * Creates a new ListInstanceConfigsResponse instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.instance.v1.ListInstanceConfigsResponse
                             * @static
                             * @param {google.spanner.admin.instance.v1.IListInstanceConfigsResponse=} [properties] Properties to set
                             * @returns {google.spanner.admin.instance.v1.ListInstanceConfigsResponse} ListInstanceConfigsResponse instance
                             */
                            ListInstanceConfigsResponse.create = function create(properties) {
                                return new ListInstanceConfigsResponse(properties);
                            };
    
                            /**
                             * Encodes the specified ListInstanceConfigsResponse message. Does not implicitly {@link google.spanner.admin.instance.v1.ListInstanceConfigsResponse.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.instance.v1.ListInstanceConfigsResponse
                             * @static
                             * @param {google.spanner.admin.instance.v1.IListInstanceConfigsResponse} message ListInstanceConfigsResponse message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ListInstanceConfigsResponse.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.instanceConfigs != null && message.instanceConfigs.length)
                                    for (var i = 0; i < message.instanceConfigs.length; ++i)
                                        $root.google.spanner.admin.instance.v1.InstanceConfig.encode(message.instanceConfigs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ListInstanceConfigsResponse message, length delimited. Does not implicitly {@link google.spanner.admin.instance.v1.ListInstanceConfigsResponse.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.instance.v1.ListInstanceConfigsResponse
                             * @static
                             * @param {google.spanner.admin.instance.v1.IListInstanceConfigsResponse} message ListInstanceConfigsResponse message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ListInstanceConfigsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a ListInstanceConfigsResponse message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.instance.v1.ListInstanceConfigsResponse
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.instance.v1.ListInstanceConfigsResponse} ListInstanceConfigsResponse
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ListInstanceConfigsResponse.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.instance.v1.ListInstanceConfigsResponse();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        if (!(message.instanceConfigs && message.instanceConfigs.length))
                                            message.instanceConfigs = [];
                                        message.instanceConfigs.push($root.google.spanner.admin.instance.v1.InstanceConfig.decode(reader, reader.uint32()));
                                        break;
                                    case 2:
                                        message.nextPageToken = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a ListInstanceConfigsResponse message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.instance.v1.ListInstanceConfigsResponse
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.instance.v1.ListInstanceConfigsResponse} ListInstanceConfigsResponse
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ListInstanceConfigsResponse.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a ListInstanceConfigsResponse message.
                             * @function verify
                             * @memberof google.spanner.admin.instance.v1.ListInstanceConfigsResponse
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ListInstanceConfigsResponse.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.instanceConfigs != null && message.hasOwnProperty("instanceConfigs")) {
                                    if (!Array.isArray(message.instanceConfigs))
                                        return "instanceConfigs: array expected";
                                    for (var i = 0; i < message.instanceConfigs.length; ++i) {
                                        var error = $root.google.spanner.admin.instance.v1.InstanceConfig.verify(message.instanceConfigs[i]);
                                        if (error)
                                            return "instanceConfigs." + error;
                                    }
                                }
                                if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                    if (!$util.isString(message.nextPageToken))
                                        return "nextPageToken: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a ListInstanceConfigsResponse message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.instance.v1.ListInstanceConfigsResponse
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.instance.v1.ListInstanceConfigsResponse} ListInstanceConfigsResponse
                             */
                            ListInstanceConfigsResponse.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.instance.v1.ListInstanceConfigsResponse)
                                    return object;
                                var message = new $root.google.spanner.admin.instance.v1.ListInstanceConfigsResponse();
                                if (object.instanceConfigs) {
                                    if (!Array.isArray(object.instanceConfigs))
                                        throw TypeError(".google.spanner.admin.instance.v1.ListInstanceConfigsResponse.instanceConfigs: array expected");
                                    message.instanceConfigs = [];
                                    for (var i = 0; i < object.instanceConfigs.length; ++i) {
                                        if (typeof object.instanceConfigs[i] !== "object")
                                            throw TypeError(".google.spanner.admin.instance.v1.ListInstanceConfigsResponse.instanceConfigs: object expected");
                                        message.instanceConfigs[i] = $root.google.spanner.admin.instance.v1.InstanceConfig.fromObject(object.instanceConfigs[i]);
                                    }
                                }
                                if (object.nextPageToken != null)
                                    message.nextPageToken = String(object.nextPageToken);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a ListInstanceConfigsResponse message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.instance.v1.ListInstanceConfigsResponse
                             * @static
                             * @param {google.spanner.admin.instance.v1.ListInstanceConfigsResponse} message ListInstanceConfigsResponse
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ListInstanceConfigsResponse.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.instanceConfigs = [];
                                if (options.defaults)
                                    object.nextPageToken = "";
                                if (message.instanceConfigs && message.instanceConfigs.length) {
                                    object.instanceConfigs = [];
                                    for (var j = 0; j < message.instanceConfigs.length; ++j)
                                        object.instanceConfigs[j] = $root.google.spanner.admin.instance.v1.InstanceConfig.toObject(message.instanceConfigs[j], options);
                                }
                                if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                    object.nextPageToken = message.nextPageToken;
                                return object;
                            };
    
                            /**
                             * Converts this ListInstanceConfigsResponse to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.instance.v1.ListInstanceConfigsResponse
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ListInstanceConfigsResponse.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return ListInstanceConfigsResponse;
                        })();
    
                        v1.GetInstanceConfigRequest = (function() {
    
                            /**
                             * Properties of a GetInstanceConfigRequest.
                             * @memberof google.spanner.admin.instance.v1
                             * @interface IGetInstanceConfigRequest
                             * @property {string|null} [name] GetInstanceConfigRequest name
                             */
    
                            /**
                             * Constructs a new GetInstanceConfigRequest.
                             * @memberof google.spanner.admin.instance.v1
                             * @classdesc Represents a GetInstanceConfigRequest.
                             * @implements IGetInstanceConfigRequest
                             * @constructor
                             * @param {google.spanner.admin.instance.v1.IGetInstanceConfigRequest=} [properties] Properties to set
                             */
                            function GetInstanceConfigRequest(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * GetInstanceConfigRequest name.
                             * @member {string} name
                             * @memberof google.spanner.admin.instance.v1.GetInstanceConfigRequest
                             * @instance
                             */
                            GetInstanceConfigRequest.prototype.name = "";
    
                            /**
                             * Creates a new GetInstanceConfigRequest instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.instance.v1.GetInstanceConfigRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.IGetInstanceConfigRequest=} [properties] Properties to set
                             * @returns {google.spanner.admin.instance.v1.GetInstanceConfigRequest} GetInstanceConfigRequest instance
                             */
                            GetInstanceConfigRequest.create = function create(properties) {
                                return new GetInstanceConfigRequest(properties);
                            };
    
                            /**
                             * Encodes the specified GetInstanceConfigRequest message. Does not implicitly {@link google.spanner.admin.instance.v1.GetInstanceConfigRequest.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.instance.v1.GetInstanceConfigRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.IGetInstanceConfigRequest} message GetInstanceConfigRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            GetInstanceConfigRequest.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified GetInstanceConfigRequest message, length delimited. Does not implicitly {@link google.spanner.admin.instance.v1.GetInstanceConfigRequest.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.instance.v1.GetInstanceConfigRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.IGetInstanceConfigRequest} message GetInstanceConfigRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            GetInstanceConfigRequest.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a GetInstanceConfigRequest message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.instance.v1.GetInstanceConfigRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.instance.v1.GetInstanceConfigRequest} GetInstanceConfigRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            GetInstanceConfigRequest.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.instance.v1.GetInstanceConfigRequest();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.name = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a GetInstanceConfigRequest message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.instance.v1.GetInstanceConfigRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.instance.v1.GetInstanceConfigRequest} GetInstanceConfigRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            GetInstanceConfigRequest.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a GetInstanceConfigRequest message.
                             * @function verify
                             * @memberof google.spanner.admin.instance.v1.GetInstanceConfigRequest
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            GetInstanceConfigRequest.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    if (!$util.isString(message.name))
                                        return "name: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a GetInstanceConfigRequest message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.instance.v1.GetInstanceConfigRequest
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.instance.v1.GetInstanceConfigRequest} GetInstanceConfigRequest
                             */
                            GetInstanceConfigRequest.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.instance.v1.GetInstanceConfigRequest)
                                    return object;
                                var message = new $root.google.spanner.admin.instance.v1.GetInstanceConfigRequest();
                                if (object.name != null)
                                    message.name = String(object.name);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a GetInstanceConfigRequest message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.instance.v1.GetInstanceConfigRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.GetInstanceConfigRequest} message GetInstanceConfigRequest
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            GetInstanceConfigRequest.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.name = "";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    object.name = message.name;
                                return object;
                            };
    
                            /**
                             * Converts this GetInstanceConfigRequest to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.instance.v1.GetInstanceConfigRequest
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            GetInstanceConfigRequest.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return GetInstanceConfigRequest;
                        })();
    
                        v1.GetInstanceRequest = (function() {
    
                            /**
                             * Properties of a GetInstanceRequest.
                             * @memberof google.spanner.admin.instance.v1
                             * @interface IGetInstanceRequest
                             * @property {string|null} [name] GetInstanceRequest name
                             * @property {google.protobuf.IFieldMask|null} [fieldMask] GetInstanceRequest fieldMask
                             */
    
                            /**
                             * Constructs a new GetInstanceRequest.
                             * @memberof google.spanner.admin.instance.v1
                             * @classdesc Represents a GetInstanceRequest.
                             * @implements IGetInstanceRequest
                             * @constructor
                             * @param {google.spanner.admin.instance.v1.IGetInstanceRequest=} [properties] Properties to set
                             */
                            function GetInstanceRequest(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * GetInstanceRequest name.
                             * @member {string} name
                             * @memberof google.spanner.admin.instance.v1.GetInstanceRequest
                             * @instance
                             */
                            GetInstanceRequest.prototype.name = "";
    
                            /**
                             * GetInstanceRequest fieldMask.
                             * @member {google.protobuf.IFieldMask|null|undefined} fieldMask
                             * @memberof google.spanner.admin.instance.v1.GetInstanceRequest
                             * @instance
                             */
                            GetInstanceRequest.prototype.fieldMask = null;
    
                            /**
                             * Creates a new GetInstanceRequest instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.instance.v1.GetInstanceRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.IGetInstanceRequest=} [properties] Properties to set
                             * @returns {google.spanner.admin.instance.v1.GetInstanceRequest} GetInstanceRequest instance
                             */
                            GetInstanceRequest.create = function create(properties) {
                                return new GetInstanceRequest(properties);
                            };
    
                            /**
                             * Encodes the specified GetInstanceRequest message. Does not implicitly {@link google.spanner.admin.instance.v1.GetInstanceRequest.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.instance.v1.GetInstanceRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.IGetInstanceRequest} message GetInstanceRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            GetInstanceRequest.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                if (message.fieldMask != null && Object.hasOwnProperty.call(message, "fieldMask"))
                                    $root.google.protobuf.FieldMask.encode(message.fieldMask, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified GetInstanceRequest message, length delimited. Does not implicitly {@link google.spanner.admin.instance.v1.GetInstanceRequest.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.instance.v1.GetInstanceRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.IGetInstanceRequest} message GetInstanceRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            GetInstanceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a GetInstanceRequest message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.instance.v1.GetInstanceRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.instance.v1.GetInstanceRequest} GetInstanceRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            GetInstanceRequest.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.instance.v1.GetInstanceRequest();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.name = reader.string();
                                        break;
                                    case 2:
                                        message.fieldMask = $root.google.protobuf.FieldMask.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a GetInstanceRequest message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.instance.v1.GetInstanceRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.instance.v1.GetInstanceRequest} GetInstanceRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            GetInstanceRequest.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a GetInstanceRequest message.
                             * @function verify
                             * @memberof google.spanner.admin.instance.v1.GetInstanceRequest
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            GetInstanceRequest.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    if (!$util.isString(message.name))
                                        return "name: string expected";
                                if (message.fieldMask != null && message.hasOwnProperty("fieldMask")) {
                                    var error = $root.google.protobuf.FieldMask.verify(message.fieldMask);
                                    if (error)
                                        return "fieldMask." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a GetInstanceRequest message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.instance.v1.GetInstanceRequest
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.instance.v1.GetInstanceRequest} GetInstanceRequest
                             */
                            GetInstanceRequest.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.instance.v1.GetInstanceRequest)
                                    return object;
                                var message = new $root.google.spanner.admin.instance.v1.GetInstanceRequest();
                                if (object.name != null)
                                    message.name = String(object.name);
                                if (object.fieldMask != null) {
                                    if (typeof object.fieldMask !== "object")
                                        throw TypeError(".google.spanner.admin.instance.v1.GetInstanceRequest.fieldMask: object expected");
                                    message.fieldMask = $root.google.protobuf.FieldMask.fromObject(object.fieldMask);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a GetInstanceRequest message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.instance.v1.GetInstanceRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.GetInstanceRequest} message GetInstanceRequest
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            GetInstanceRequest.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.name = "";
                                    object.fieldMask = null;
                                }
                                if (message.name != null && message.hasOwnProperty("name"))
                                    object.name = message.name;
                                if (message.fieldMask != null && message.hasOwnProperty("fieldMask"))
                                    object.fieldMask = $root.google.protobuf.FieldMask.toObject(message.fieldMask, options);
                                return object;
                            };
    
                            /**
                             * Converts this GetInstanceRequest to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.instance.v1.GetInstanceRequest
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            GetInstanceRequest.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return GetInstanceRequest;
                        })();
    
                        v1.CreateInstanceRequest = (function() {
    
                            /**
                             * Properties of a CreateInstanceRequest.
                             * @memberof google.spanner.admin.instance.v1
                             * @interface ICreateInstanceRequest
                             * @property {string|null} [parent] CreateInstanceRequest parent
                             * @property {string|null} [instanceId] CreateInstanceRequest instanceId
                             * @property {google.spanner.admin.instance.v1.IInstance|null} [instance] CreateInstanceRequest instance
                             */
    
                            /**
                             * Constructs a new CreateInstanceRequest.
                             * @memberof google.spanner.admin.instance.v1
                             * @classdesc Represents a CreateInstanceRequest.
                             * @implements ICreateInstanceRequest
                             * @constructor
                             * @param {google.spanner.admin.instance.v1.ICreateInstanceRequest=} [properties] Properties to set
                             */
                            function CreateInstanceRequest(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * CreateInstanceRequest parent.
                             * @member {string} parent
                             * @memberof google.spanner.admin.instance.v1.CreateInstanceRequest
                             * @instance
                             */
                            CreateInstanceRequest.prototype.parent = "";
    
                            /**
                             * CreateInstanceRequest instanceId.
                             * @member {string} instanceId
                             * @memberof google.spanner.admin.instance.v1.CreateInstanceRequest
                             * @instance
                             */
                            CreateInstanceRequest.prototype.instanceId = "";
    
                            /**
                             * CreateInstanceRequest instance.
                             * @member {google.spanner.admin.instance.v1.IInstance|null|undefined} instance
                             * @memberof google.spanner.admin.instance.v1.CreateInstanceRequest
                             * @instance
                             */
                            CreateInstanceRequest.prototype.instance = null;
    
                            /**
                             * Creates a new CreateInstanceRequest instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.instance.v1.CreateInstanceRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.ICreateInstanceRequest=} [properties] Properties to set
                             * @returns {google.spanner.admin.instance.v1.CreateInstanceRequest} CreateInstanceRequest instance
                             */
                            CreateInstanceRequest.create = function create(properties) {
                                return new CreateInstanceRequest(properties);
                            };
    
                            /**
                             * Encodes the specified CreateInstanceRequest message. Does not implicitly {@link google.spanner.admin.instance.v1.CreateInstanceRequest.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.instance.v1.CreateInstanceRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.ICreateInstanceRequest} message CreateInstanceRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CreateInstanceRequest.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                                if (message.instanceId != null && Object.hasOwnProperty.call(message, "instanceId"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.instanceId);
                                if (message.instance != null && Object.hasOwnProperty.call(message, "instance"))
                                    $root.google.spanner.admin.instance.v1.Instance.encode(message.instance, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified CreateInstanceRequest message, length delimited. Does not implicitly {@link google.spanner.admin.instance.v1.CreateInstanceRequest.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.instance.v1.CreateInstanceRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.ICreateInstanceRequest} message CreateInstanceRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CreateInstanceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a CreateInstanceRequest message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.instance.v1.CreateInstanceRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.instance.v1.CreateInstanceRequest} CreateInstanceRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CreateInstanceRequest.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.instance.v1.CreateInstanceRequest();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.parent = reader.string();
                                        break;
                                    case 2:
                                        message.instanceId = reader.string();
                                        break;
                                    case 3:
                                        message.instance = $root.google.spanner.admin.instance.v1.Instance.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a CreateInstanceRequest message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.instance.v1.CreateInstanceRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.instance.v1.CreateInstanceRequest} CreateInstanceRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CreateInstanceRequest.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a CreateInstanceRequest message.
                             * @function verify
                             * @memberof google.spanner.admin.instance.v1.CreateInstanceRequest
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            CreateInstanceRequest.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.parent != null && message.hasOwnProperty("parent"))
                                    if (!$util.isString(message.parent))
                                        return "parent: string expected";
                                if (message.instanceId != null && message.hasOwnProperty("instanceId"))
                                    if (!$util.isString(message.instanceId))
                                        return "instanceId: string expected";
                                if (message.instance != null && message.hasOwnProperty("instance")) {
                                    var error = $root.google.spanner.admin.instance.v1.Instance.verify(message.instance);
                                    if (error)
                                        return "instance." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a CreateInstanceRequest message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.instance.v1.CreateInstanceRequest
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.instance.v1.CreateInstanceRequest} CreateInstanceRequest
                             */
                            CreateInstanceRequest.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.instance.v1.CreateInstanceRequest)
                                    return object;
                                var message = new $root.google.spanner.admin.instance.v1.CreateInstanceRequest();
                                if (object.parent != null)
                                    message.parent = String(object.parent);
                                if (object.instanceId != null)
                                    message.instanceId = String(object.instanceId);
                                if (object.instance != null) {
                                    if (typeof object.instance !== "object")
                                        throw TypeError(".google.spanner.admin.instance.v1.CreateInstanceRequest.instance: object expected");
                                    message.instance = $root.google.spanner.admin.instance.v1.Instance.fromObject(object.instance);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a CreateInstanceRequest message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.instance.v1.CreateInstanceRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.CreateInstanceRequest} message CreateInstanceRequest
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            CreateInstanceRequest.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.parent = "";
                                    object.instanceId = "";
                                    object.instance = null;
                                }
                                if (message.parent != null && message.hasOwnProperty("parent"))
                                    object.parent = message.parent;
                                if (message.instanceId != null && message.hasOwnProperty("instanceId"))
                                    object.instanceId = message.instanceId;
                                if (message.instance != null && message.hasOwnProperty("instance"))
                                    object.instance = $root.google.spanner.admin.instance.v1.Instance.toObject(message.instance, options);
                                return object;
                            };
    
                            /**
                             * Converts this CreateInstanceRequest to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.instance.v1.CreateInstanceRequest
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            CreateInstanceRequest.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return CreateInstanceRequest;
                        })();
    
                        v1.ListInstancesRequest = (function() {
    
                            /**
                             * Properties of a ListInstancesRequest.
                             * @memberof google.spanner.admin.instance.v1
                             * @interface IListInstancesRequest
                             * @property {string|null} [parent] ListInstancesRequest parent
                             * @property {number|null} [pageSize] ListInstancesRequest pageSize
                             * @property {string|null} [pageToken] ListInstancesRequest pageToken
                             * @property {string|null} [filter] ListInstancesRequest filter
                             */
    
                            /**
                             * Constructs a new ListInstancesRequest.
                             * @memberof google.spanner.admin.instance.v1
                             * @classdesc Represents a ListInstancesRequest.
                             * @implements IListInstancesRequest
                             * @constructor
                             * @param {google.spanner.admin.instance.v1.IListInstancesRequest=} [properties] Properties to set
                             */
                            function ListInstancesRequest(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ListInstancesRequest parent.
                             * @member {string} parent
                             * @memberof google.spanner.admin.instance.v1.ListInstancesRequest
                             * @instance
                             */
                            ListInstancesRequest.prototype.parent = "";
    
                            /**
                             * ListInstancesRequest pageSize.
                             * @member {number} pageSize
                             * @memberof google.spanner.admin.instance.v1.ListInstancesRequest
                             * @instance
                             */
                            ListInstancesRequest.prototype.pageSize = 0;
    
                            /**
                             * ListInstancesRequest pageToken.
                             * @member {string} pageToken
                             * @memberof google.spanner.admin.instance.v1.ListInstancesRequest
                             * @instance
                             */
                            ListInstancesRequest.prototype.pageToken = "";
    
                            /**
                             * ListInstancesRequest filter.
                             * @member {string} filter
                             * @memberof google.spanner.admin.instance.v1.ListInstancesRequest
                             * @instance
                             */
                            ListInstancesRequest.prototype.filter = "";
    
                            /**
                             * Creates a new ListInstancesRequest instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.instance.v1.ListInstancesRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.IListInstancesRequest=} [properties] Properties to set
                             * @returns {google.spanner.admin.instance.v1.ListInstancesRequest} ListInstancesRequest instance
                             */
                            ListInstancesRequest.create = function create(properties) {
                                return new ListInstancesRequest(properties);
                            };
    
                            /**
                             * Encodes the specified ListInstancesRequest message. Does not implicitly {@link google.spanner.admin.instance.v1.ListInstancesRequest.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.instance.v1.ListInstancesRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.IListInstancesRequest} message ListInstancesRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ListInstancesRequest.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                                if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                                if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                                if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.filter);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ListInstancesRequest message, length delimited. Does not implicitly {@link google.spanner.admin.instance.v1.ListInstancesRequest.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.instance.v1.ListInstancesRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.IListInstancesRequest} message ListInstancesRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ListInstancesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a ListInstancesRequest message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.instance.v1.ListInstancesRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.instance.v1.ListInstancesRequest} ListInstancesRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ListInstancesRequest.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.instance.v1.ListInstancesRequest();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.parent = reader.string();
                                        break;
                                    case 2:
                                        message.pageSize = reader.int32();
                                        break;
                                    case 3:
                                        message.pageToken = reader.string();
                                        break;
                                    case 4:
                                        message.filter = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a ListInstancesRequest message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.instance.v1.ListInstancesRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.instance.v1.ListInstancesRequest} ListInstancesRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ListInstancesRequest.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a ListInstancesRequest message.
                             * @function verify
                             * @memberof google.spanner.admin.instance.v1.ListInstancesRequest
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ListInstancesRequest.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.parent != null && message.hasOwnProperty("parent"))
                                    if (!$util.isString(message.parent))
                                        return "parent: string expected";
                                if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                    if (!$util.isInteger(message.pageSize))
                                        return "pageSize: integer expected";
                                if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                    if (!$util.isString(message.pageToken))
                                        return "pageToken: string expected";
                                if (message.filter != null && message.hasOwnProperty("filter"))
                                    if (!$util.isString(message.filter))
                                        return "filter: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a ListInstancesRequest message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.instance.v1.ListInstancesRequest
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.instance.v1.ListInstancesRequest} ListInstancesRequest
                             */
                            ListInstancesRequest.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.instance.v1.ListInstancesRequest)
                                    return object;
                                var message = new $root.google.spanner.admin.instance.v1.ListInstancesRequest();
                                if (object.parent != null)
                                    message.parent = String(object.parent);
                                if (object.pageSize != null)
                                    message.pageSize = object.pageSize | 0;
                                if (object.pageToken != null)
                                    message.pageToken = String(object.pageToken);
                                if (object.filter != null)
                                    message.filter = String(object.filter);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a ListInstancesRequest message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.instance.v1.ListInstancesRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.ListInstancesRequest} message ListInstancesRequest
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ListInstancesRequest.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.parent = "";
                                    object.pageSize = 0;
                                    object.pageToken = "";
                                    object.filter = "";
                                }
                                if (message.parent != null && message.hasOwnProperty("parent"))
                                    object.parent = message.parent;
                                if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                    object.pageSize = message.pageSize;
                                if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                    object.pageToken = message.pageToken;
                                if (message.filter != null && message.hasOwnProperty("filter"))
                                    object.filter = message.filter;
                                return object;
                            };
    
                            /**
                             * Converts this ListInstancesRequest to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.instance.v1.ListInstancesRequest
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ListInstancesRequest.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return ListInstancesRequest;
                        })();
    
                        v1.ListInstancesResponse = (function() {
    
                            /**
                             * Properties of a ListInstancesResponse.
                             * @memberof google.spanner.admin.instance.v1
                             * @interface IListInstancesResponse
                             * @property {Array.<google.spanner.admin.instance.v1.IInstance>|null} [instances] ListInstancesResponse instances
                             * @property {string|null} [nextPageToken] ListInstancesResponse nextPageToken
                             */
    
                            /**
                             * Constructs a new ListInstancesResponse.
                             * @memberof google.spanner.admin.instance.v1
                             * @classdesc Represents a ListInstancesResponse.
                             * @implements IListInstancesResponse
                             * @constructor
                             * @param {google.spanner.admin.instance.v1.IListInstancesResponse=} [properties] Properties to set
                             */
                            function ListInstancesResponse(properties) {
                                this.instances = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ListInstancesResponse instances.
                             * @member {Array.<google.spanner.admin.instance.v1.IInstance>} instances
                             * @memberof google.spanner.admin.instance.v1.ListInstancesResponse
                             * @instance
                             */
                            ListInstancesResponse.prototype.instances = $util.emptyArray;
    
                            /**
                             * ListInstancesResponse nextPageToken.
                             * @member {string} nextPageToken
                             * @memberof google.spanner.admin.instance.v1.ListInstancesResponse
                             * @instance
                             */
                            ListInstancesResponse.prototype.nextPageToken = "";
    
                            /**
                             * Creates a new ListInstancesResponse instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.instance.v1.ListInstancesResponse
                             * @static
                             * @param {google.spanner.admin.instance.v1.IListInstancesResponse=} [properties] Properties to set
                             * @returns {google.spanner.admin.instance.v1.ListInstancesResponse} ListInstancesResponse instance
                             */
                            ListInstancesResponse.create = function create(properties) {
                                return new ListInstancesResponse(properties);
                            };
    
                            /**
                             * Encodes the specified ListInstancesResponse message. Does not implicitly {@link google.spanner.admin.instance.v1.ListInstancesResponse.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.instance.v1.ListInstancesResponse
                             * @static
                             * @param {google.spanner.admin.instance.v1.IListInstancesResponse} message ListInstancesResponse message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ListInstancesResponse.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.instances != null && message.instances.length)
                                    for (var i = 0; i < message.instances.length; ++i)
                                        $root.google.spanner.admin.instance.v1.Instance.encode(message.instances[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ListInstancesResponse message, length delimited. Does not implicitly {@link google.spanner.admin.instance.v1.ListInstancesResponse.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.instance.v1.ListInstancesResponse
                             * @static
                             * @param {google.spanner.admin.instance.v1.IListInstancesResponse} message ListInstancesResponse message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ListInstancesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a ListInstancesResponse message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.instance.v1.ListInstancesResponse
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.instance.v1.ListInstancesResponse} ListInstancesResponse
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ListInstancesResponse.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.instance.v1.ListInstancesResponse();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        if (!(message.instances && message.instances.length))
                                            message.instances = [];
                                        message.instances.push($root.google.spanner.admin.instance.v1.Instance.decode(reader, reader.uint32()));
                                        break;
                                    case 2:
                                        message.nextPageToken = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a ListInstancesResponse message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.instance.v1.ListInstancesResponse
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.instance.v1.ListInstancesResponse} ListInstancesResponse
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ListInstancesResponse.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a ListInstancesResponse message.
                             * @function verify
                             * @memberof google.spanner.admin.instance.v1.ListInstancesResponse
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ListInstancesResponse.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.instances != null && message.hasOwnProperty("instances")) {
                                    if (!Array.isArray(message.instances))
                                        return "instances: array expected";
                                    for (var i = 0; i < message.instances.length; ++i) {
                                        var error = $root.google.spanner.admin.instance.v1.Instance.verify(message.instances[i]);
                                        if (error)
                                            return "instances." + error;
                                    }
                                }
                                if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                    if (!$util.isString(message.nextPageToken))
                                        return "nextPageToken: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a ListInstancesResponse message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.instance.v1.ListInstancesResponse
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.instance.v1.ListInstancesResponse} ListInstancesResponse
                             */
                            ListInstancesResponse.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.instance.v1.ListInstancesResponse)
                                    return object;
                                var message = new $root.google.spanner.admin.instance.v1.ListInstancesResponse();
                                if (object.instances) {
                                    if (!Array.isArray(object.instances))
                                        throw TypeError(".google.spanner.admin.instance.v1.ListInstancesResponse.instances: array expected");
                                    message.instances = [];
                                    for (var i = 0; i < object.instances.length; ++i) {
                                        if (typeof object.instances[i] !== "object")
                                            throw TypeError(".google.spanner.admin.instance.v1.ListInstancesResponse.instances: object expected");
                                        message.instances[i] = $root.google.spanner.admin.instance.v1.Instance.fromObject(object.instances[i]);
                                    }
                                }
                                if (object.nextPageToken != null)
                                    message.nextPageToken = String(object.nextPageToken);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a ListInstancesResponse message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.instance.v1.ListInstancesResponse
                             * @static
                             * @param {google.spanner.admin.instance.v1.ListInstancesResponse} message ListInstancesResponse
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ListInstancesResponse.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.instances = [];
                                if (options.defaults)
                                    object.nextPageToken = "";
                                if (message.instances && message.instances.length) {
                                    object.instances = [];
                                    for (var j = 0; j < message.instances.length; ++j)
                                        object.instances[j] = $root.google.spanner.admin.instance.v1.Instance.toObject(message.instances[j], options);
                                }
                                if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                    object.nextPageToken = message.nextPageToken;
                                return object;
                            };
    
                            /**
                             * Converts this ListInstancesResponse to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.instance.v1.ListInstancesResponse
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ListInstancesResponse.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return ListInstancesResponse;
                        })();
    
                        v1.UpdateInstanceRequest = (function() {
    
                            /**
                             * Properties of an UpdateInstanceRequest.
                             * @memberof google.spanner.admin.instance.v1
                             * @interface IUpdateInstanceRequest
                             * @property {google.spanner.admin.instance.v1.IInstance|null} [instance] UpdateInstanceRequest instance
                             * @property {google.protobuf.IFieldMask|null} [fieldMask] UpdateInstanceRequest fieldMask
                             */
    
                            /**
                             * Constructs a new UpdateInstanceRequest.
                             * @memberof google.spanner.admin.instance.v1
                             * @classdesc Represents an UpdateInstanceRequest.
                             * @implements IUpdateInstanceRequest
                             * @constructor
                             * @param {google.spanner.admin.instance.v1.IUpdateInstanceRequest=} [properties] Properties to set
                             */
                            function UpdateInstanceRequest(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * UpdateInstanceRequest instance.
                             * @member {google.spanner.admin.instance.v1.IInstance|null|undefined} instance
                             * @memberof google.spanner.admin.instance.v1.UpdateInstanceRequest
                             * @instance
                             */
                            UpdateInstanceRequest.prototype.instance = null;
    
                            /**
                             * UpdateInstanceRequest fieldMask.
                             * @member {google.protobuf.IFieldMask|null|undefined} fieldMask
                             * @memberof google.spanner.admin.instance.v1.UpdateInstanceRequest
                             * @instance
                             */
                            UpdateInstanceRequest.prototype.fieldMask = null;
    
                            /**
                             * Creates a new UpdateInstanceRequest instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.instance.v1.UpdateInstanceRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.IUpdateInstanceRequest=} [properties] Properties to set
                             * @returns {google.spanner.admin.instance.v1.UpdateInstanceRequest} UpdateInstanceRequest instance
                             */
                            UpdateInstanceRequest.create = function create(properties) {
                                return new UpdateInstanceRequest(properties);
                            };
    
                            /**
                             * Encodes the specified UpdateInstanceRequest message. Does not implicitly {@link google.spanner.admin.instance.v1.UpdateInstanceRequest.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.instance.v1.UpdateInstanceRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.IUpdateInstanceRequest} message UpdateInstanceRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            UpdateInstanceRequest.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.instance != null && Object.hasOwnProperty.call(message, "instance"))
                                    $root.google.spanner.admin.instance.v1.Instance.encode(message.instance, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.fieldMask != null && Object.hasOwnProperty.call(message, "fieldMask"))
                                    $root.google.protobuf.FieldMask.encode(message.fieldMask, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified UpdateInstanceRequest message, length delimited. Does not implicitly {@link google.spanner.admin.instance.v1.UpdateInstanceRequest.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.instance.v1.UpdateInstanceRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.IUpdateInstanceRequest} message UpdateInstanceRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            UpdateInstanceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an UpdateInstanceRequest message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.instance.v1.UpdateInstanceRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.instance.v1.UpdateInstanceRequest} UpdateInstanceRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            UpdateInstanceRequest.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.instance.v1.UpdateInstanceRequest();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.instance = $root.google.spanner.admin.instance.v1.Instance.decode(reader, reader.uint32());
                                        break;
                                    case 2:
                                        message.fieldMask = $root.google.protobuf.FieldMask.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an UpdateInstanceRequest message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.instance.v1.UpdateInstanceRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.instance.v1.UpdateInstanceRequest} UpdateInstanceRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            UpdateInstanceRequest.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an UpdateInstanceRequest message.
                             * @function verify
                             * @memberof google.spanner.admin.instance.v1.UpdateInstanceRequest
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            UpdateInstanceRequest.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.instance != null && message.hasOwnProperty("instance")) {
                                    var error = $root.google.spanner.admin.instance.v1.Instance.verify(message.instance);
                                    if (error)
                                        return "instance." + error;
                                }
                                if (message.fieldMask != null && message.hasOwnProperty("fieldMask")) {
                                    var error = $root.google.protobuf.FieldMask.verify(message.fieldMask);
                                    if (error)
                                        return "fieldMask." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates an UpdateInstanceRequest message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.instance.v1.UpdateInstanceRequest
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.instance.v1.UpdateInstanceRequest} UpdateInstanceRequest
                             */
                            UpdateInstanceRequest.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.instance.v1.UpdateInstanceRequest)
                                    return object;
                                var message = new $root.google.spanner.admin.instance.v1.UpdateInstanceRequest();
                                if (object.instance != null) {
                                    if (typeof object.instance !== "object")
                                        throw TypeError(".google.spanner.admin.instance.v1.UpdateInstanceRequest.instance: object expected");
                                    message.instance = $root.google.spanner.admin.instance.v1.Instance.fromObject(object.instance);
                                }
                                if (object.fieldMask != null) {
                                    if (typeof object.fieldMask !== "object")
                                        throw TypeError(".google.spanner.admin.instance.v1.UpdateInstanceRequest.fieldMask: object expected");
                                    message.fieldMask = $root.google.protobuf.FieldMask.fromObject(object.fieldMask);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an UpdateInstanceRequest message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.instance.v1.UpdateInstanceRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.UpdateInstanceRequest} message UpdateInstanceRequest
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            UpdateInstanceRequest.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.instance = null;
                                    object.fieldMask = null;
                                }
                                if (message.instance != null && message.hasOwnProperty("instance"))
                                    object.instance = $root.google.spanner.admin.instance.v1.Instance.toObject(message.instance, options);
                                if (message.fieldMask != null && message.hasOwnProperty("fieldMask"))
                                    object.fieldMask = $root.google.protobuf.FieldMask.toObject(message.fieldMask, options);
                                return object;
                            };
    
                            /**
                             * Converts this UpdateInstanceRequest to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.instance.v1.UpdateInstanceRequest
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            UpdateInstanceRequest.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return UpdateInstanceRequest;
                        })();
    
                        v1.DeleteInstanceRequest = (function() {
    
                            /**
                             * Properties of a DeleteInstanceRequest.
                             * @memberof google.spanner.admin.instance.v1
                             * @interface IDeleteInstanceRequest
                             * @property {string|null} [name] DeleteInstanceRequest name
                             */
    
                            /**
                             * Constructs a new DeleteInstanceRequest.
                             * @memberof google.spanner.admin.instance.v1
                             * @classdesc Represents a DeleteInstanceRequest.
                             * @implements IDeleteInstanceRequest
                             * @constructor
                             * @param {google.spanner.admin.instance.v1.IDeleteInstanceRequest=} [properties] Properties to set
                             */
                            function DeleteInstanceRequest(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * DeleteInstanceRequest name.
                             * @member {string} name
                             * @memberof google.spanner.admin.instance.v1.DeleteInstanceRequest
                             * @instance
                             */
                            DeleteInstanceRequest.prototype.name = "";
    
                            /**
                             * Creates a new DeleteInstanceRequest instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.instance.v1.DeleteInstanceRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.IDeleteInstanceRequest=} [properties] Properties to set
                             * @returns {google.spanner.admin.instance.v1.DeleteInstanceRequest} DeleteInstanceRequest instance
                             */
                            DeleteInstanceRequest.create = function create(properties) {
                                return new DeleteInstanceRequest(properties);
                            };
    
                            /**
                             * Encodes the specified DeleteInstanceRequest message. Does not implicitly {@link google.spanner.admin.instance.v1.DeleteInstanceRequest.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.instance.v1.DeleteInstanceRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.IDeleteInstanceRequest} message DeleteInstanceRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            DeleteInstanceRequest.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified DeleteInstanceRequest message, length delimited. Does not implicitly {@link google.spanner.admin.instance.v1.DeleteInstanceRequest.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.instance.v1.DeleteInstanceRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.IDeleteInstanceRequest} message DeleteInstanceRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            DeleteInstanceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a DeleteInstanceRequest message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.instance.v1.DeleteInstanceRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.instance.v1.DeleteInstanceRequest} DeleteInstanceRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            DeleteInstanceRequest.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.instance.v1.DeleteInstanceRequest();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.name = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a DeleteInstanceRequest message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.instance.v1.DeleteInstanceRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.instance.v1.DeleteInstanceRequest} DeleteInstanceRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            DeleteInstanceRequest.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a DeleteInstanceRequest message.
                             * @function verify
                             * @memberof google.spanner.admin.instance.v1.DeleteInstanceRequest
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            DeleteInstanceRequest.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    if (!$util.isString(message.name))
                                        return "name: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a DeleteInstanceRequest message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.instance.v1.DeleteInstanceRequest
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.instance.v1.DeleteInstanceRequest} DeleteInstanceRequest
                             */
                            DeleteInstanceRequest.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.instance.v1.DeleteInstanceRequest)
                                    return object;
                                var message = new $root.google.spanner.admin.instance.v1.DeleteInstanceRequest();
                                if (object.name != null)
                                    message.name = String(object.name);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a DeleteInstanceRequest message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.instance.v1.DeleteInstanceRequest
                             * @static
                             * @param {google.spanner.admin.instance.v1.DeleteInstanceRequest} message DeleteInstanceRequest
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            DeleteInstanceRequest.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.name = "";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    object.name = message.name;
                                return object;
                            };
    
                            /**
                             * Converts this DeleteInstanceRequest to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.instance.v1.DeleteInstanceRequest
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            DeleteInstanceRequest.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return DeleteInstanceRequest;
                        })();
    
                        v1.CreateInstanceMetadata = (function() {
    
                            /**
                             * Properties of a CreateInstanceMetadata.
                             * @memberof google.spanner.admin.instance.v1
                             * @interface ICreateInstanceMetadata
                             * @property {google.spanner.admin.instance.v1.IInstance|null} [instance] CreateInstanceMetadata instance
                             * @property {google.protobuf.ITimestamp|null} [startTime] CreateInstanceMetadata startTime
                             * @property {google.protobuf.ITimestamp|null} [cancelTime] CreateInstanceMetadata cancelTime
                             * @property {google.protobuf.ITimestamp|null} [endTime] CreateInstanceMetadata endTime
                             */
    
                            /**
                             * Constructs a new CreateInstanceMetadata.
                             * @memberof google.spanner.admin.instance.v1
                             * @classdesc Represents a CreateInstanceMetadata.
                             * @implements ICreateInstanceMetadata
                             * @constructor
                             * @param {google.spanner.admin.instance.v1.ICreateInstanceMetadata=} [properties] Properties to set
                             */
                            function CreateInstanceMetadata(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * CreateInstanceMetadata instance.
                             * @member {google.spanner.admin.instance.v1.IInstance|null|undefined} instance
                             * @memberof google.spanner.admin.instance.v1.CreateInstanceMetadata
                             * @instance
                             */
                            CreateInstanceMetadata.prototype.instance = null;
    
                            /**
                             * CreateInstanceMetadata startTime.
                             * @member {google.protobuf.ITimestamp|null|undefined} startTime
                             * @memberof google.spanner.admin.instance.v1.CreateInstanceMetadata
                             * @instance
                             */
                            CreateInstanceMetadata.prototype.startTime = null;
    
                            /**
                             * CreateInstanceMetadata cancelTime.
                             * @member {google.protobuf.ITimestamp|null|undefined} cancelTime
                             * @memberof google.spanner.admin.instance.v1.CreateInstanceMetadata
                             * @instance
                             */
                            CreateInstanceMetadata.prototype.cancelTime = null;
    
                            /**
                             * CreateInstanceMetadata endTime.
                             * @member {google.protobuf.ITimestamp|null|undefined} endTime
                             * @memberof google.spanner.admin.instance.v1.CreateInstanceMetadata
                             * @instance
                             */
                            CreateInstanceMetadata.prototype.endTime = null;
    
                            /**
                             * Creates a new CreateInstanceMetadata instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.instance.v1.CreateInstanceMetadata
                             * @static
                             * @param {google.spanner.admin.instance.v1.ICreateInstanceMetadata=} [properties] Properties to set
                             * @returns {google.spanner.admin.instance.v1.CreateInstanceMetadata} CreateInstanceMetadata instance
                             */
                            CreateInstanceMetadata.create = function create(properties) {
                                return new CreateInstanceMetadata(properties);
                            };
    
                            /**
                             * Encodes the specified CreateInstanceMetadata message. Does not implicitly {@link google.spanner.admin.instance.v1.CreateInstanceMetadata.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.instance.v1.CreateInstanceMetadata
                             * @static
                             * @param {google.spanner.admin.instance.v1.ICreateInstanceMetadata} message CreateInstanceMetadata message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CreateInstanceMetadata.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.instance != null && Object.hasOwnProperty.call(message, "instance"))
                                    $root.google.spanner.admin.instance.v1.Instance.encode(message.instance, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                                    $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.cancelTime != null && Object.hasOwnProperty.call(message, "cancelTime"))
                                    $root.google.protobuf.Timestamp.encode(message.cancelTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                                    $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified CreateInstanceMetadata message, length delimited. Does not implicitly {@link google.spanner.admin.instance.v1.CreateInstanceMetadata.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.instance.v1.CreateInstanceMetadata
                             * @static
                             * @param {google.spanner.admin.instance.v1.ICreateInstanceMetadata} message CreateInstanceMetadata message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CreateInstanceMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a CreateInstanceMetadata message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.instance.v1.CreateInstanceMetadata
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.instance.v1.CreateInstanceMetadata} CreateInstanceMetadata
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CreateInstanceMetadata.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.instance.v1.CreateInstanceMetadata();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.instance = $root.google.spanner.admin.instance.v1.Instance.decode(reader, reader.uint32());
                                        break;
                                    case 2:
                                        message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    case 3:
                                        message.cancelTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    case 4:
                                        message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a CreateInstanceMetadata message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.instance.v1.CreateInstanceMetadata
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.instance.v1.CreateInstanceMetadata} CreateInstanceMetadata
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CreateInstanceMetadata.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a CreateInstanceMetadata message.
                             * @function verify
                             * @memberof google.spanner.admin.instance.v1.CreateInstanceMetadata
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            CreateInstanceMetadata.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.instance != null && message.hasOwnProperty("instance")) {
                                    var error = $root.google.spanner.admin.instance.v1.Instance.verify(message.instance);
                                    if (error)
                                        return "instance." + error;
                                }
                                if (message.startTime != null && message.hasOwnProperty("startTime")) {
                                    var error = $root.google.protobuf.Timestamp.verify(message.startTime);
                                    if (error)
                                        return "startTime." + error;
                                }
                                if (message.cancelTime != null && message.hasOwnProperty("cancelTime")) {
                                    var error = $root.google.protobuf.Timestamp.verify(message.cancelTime);
                                    if (error)
                                        return "cancelTime." + error;
                                }
                                if (message.endTime != null && message.hasOwnProperty("endTime")) {
                                    var error = $root.google.protobuf.Timestamp.verify(message.endTime);
                                    if (error)
                                        return "endTime." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a CreateInstanceMetadata message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.instance.v1.CreateInstanceMetadata
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.instance.v1.CreateInstanceMetadata} CreateInstanceMetadata
                             */
                            CreateInstanceMetadata.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.instance.v1.CreateInstanceMetadata)
                                    return object;
                                var message = new $root.google.spanner.admin.instance.v1.CreateInstanceMetadata();
                                if (object.instance != null) {
                                    if (typeof object.instance !== "object")
                                        throw TypeError(".google.spanner.admin.instance.v1.CreateInstanceMetadata.instance: object expected");
                                    message.instance = $root.google.spanner.admin.instance.v1.Instance.fromObject(object.instance);
                                }
                                if (object.startTime != null) {
                                    if (typeof object.startTime !== "object")
                                        throw TypeError(".google.spanner.admin.instance.v1.CreateInstanceMetadata.startTime: object expected");
                                    message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);
                                }
                                if (object.cancelTime != null) {
                                    if (typeof object.cancelTime !== "object")
                                        throw TypeError(".google.spanner.admin.instance.v1.CreateInstanceMetadata.cancelTime: object expected");
                                    message.cancelTime = $root.google.protobuf.Timestamp.fromObject(object.cancelTime);
                                }
                                if (object.endTime != null) {
                                    if (typeof object.endTime !== "object")
                                        throw TypeError(".google.spanner.admin.instance.v1.CreateInstanceMetadata.endTime: object expected");
                                    message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a CreateInstanceMetadata message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.instance.v1.CreateInstanceMetadata
                             * @static
                             * @param {google.spanner.admin.instance.v1.CreateInstanceMetadata} message CreateInstanceMetadata
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            CreateInstanceMetadata.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.instance = null;
                                    object.startTime = null;
                                    object.cancelTime = null;
                                    object.endTime = null;
                                }
                                if (message.instance != null && message.hasOwnProperty("instance"))
                                    object.instance = $root.google.spanner.admin.instance.v1.Instance.toObject(message.instance, options);
                                if (message.startTime != null && message.hasOwnProperty("startTime"))
                                    object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);
                                if (message.cancelTime != null && message.hasOwnProperty("cancelTime"))
                                    object.cancelTime = $root.google.protobuf.Timestamp.toObject(message.cancelTime, options);
                                if (message.endTime != null && message.hasOwnProperty("endTime"))
                                    object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
                                return object;
                            };
    
                            /**
                             * Converts this CreateInstanceMetadata to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.instance.v1.CreateInstanceMetadata
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            CreateInstanceMetadata.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return CreateInstanceMetadata;
                        })();
    
                        v1.UpdateInstanceMetadata = (function() {
    
                            /**
                             * Properties of an UpdateInstanceMetadata.
                             * @memberof google.spanner.admin.instance.v1
                             * @interface IUpdateInstanceMetadata
                             * @property {google.spanner.admin.instance.v1.IInstance|null} [instance] UpdateInstanceMetadata instance
                             * @property {google.protobuf.ITimestamp|null} [startTime] UpdateInstanceMetadata startTime
                             * @property {google.protobuf.ITimestamp|null} [cancelTime] UpdateInstanceMetadata cancelTime
                             * @property {google.protobuf.ITimestamp|null} [endTime] UpdateInstanceMetadata endTime
                             */
    
                            /**
                             * Constructs a new UpdateInstanceMetadata.
                             * @memberof google.spanner.admin.instance.v1
                             * @classdesc Represents an UpdateInstanceMetadata.
                             * @implements IUpdateInstanceMetadata
                             * @constructor
                             * @param {google.spanner.admin.instance.v1.IUpdateInstanceMetadata=} [properties] Properties to set
                             */
                            function UpdateInstanceMetadata(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * UpdateInstanceMetadata instance.
                             * @member {google.spanner.admin.instance.v1.IInstance|null|undefined} instance
                             * @memberof google.spanner.admin.instance.v1.UpdateInstanceMetadata
                             * @instance
                             */
                            UpdateInstanceMetadata.prototype.instance = null;
    
                            /**
                             * UpdateInstanceMetadata startTime.
                             * @member {google.protobuf.ITimestamp|null|undefined} startTime
                             * @memberof google.spanner.admin.instance.v1.UpdateInstanceMetadata
                             * @instance
                             */
                            UpdateInstanceMetadata.prototype.startTime = null;
    
                            /**
                             * UpdateInstanceMetadata cancelTime.
                             * @member {google.protobuf.ITimestamp|null|undefined} cancelTime
                             * @memberof google.spanner.admin.instance.v1.UpdateInstanceMetadata
                             * @instance
                             */
                            UpdateInstanceMetadata.prototype.cancelTime = null;
    
                            /**
                             * UpdateInstanceMetadata endTime.
                             * @member {google.protobuf.ITimestamp|null|undefined} endTime
                             * @memberof google.spanner.admin.instance.v1.UpdateInstanceMetadata
                             * @instance
                             */
                            UpdateInstanceMetadata.prototype.endTime = null;
    
                            /**
                             * Creates a new UpdateInstanceMetadata instance using the specified properties.
                             * @function create
                             * @memberof google.spanner.admin.instance.v1.UpdateInstanceMetadata
                             * @static
                             * @param {google.spanner.admin.instance.v1.IUpdateInstanceMetadata=} [properties] Properties to set
                             * @returns {google.spanner.admin.instance.v1.UpdateInstanceMetadata} UpdateInstanceMetadata instance
                             */
                            UpdateInstanceMetadata.create = function create(properties) {
                                return new UpdateInstanceMetadata(properties);
                            };
    
                            /**
                             * Encodes the specified UpdateInstanceMetadata message. Does not implicitly {@link google.spanner.admin.instance.v1.UpdateInstanceMetadata.verify|verify} messages.
                             * @function encode
                             * @memberof google.spanner.admin.instance.v1.UpdateInstanceMetadata
                             * @static
                             * @param {google.spanner.admin.instance.v1.IUpdateInstanceMetadata} message UpdateInstanceMetadata message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            UpdateInstanceMetadata.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.instance != null && Object.hasOwnProperty.call(message, "instance"))
                                    $root.google.spanner.admin.instance.v1.Instance.encode(message.instance, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                                    $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.cancelTime != null && Object.hasOwnProperty.call(message, "cancelTime"))
                                    $root.google.protobuf.Timestamp.encode(message.cancelTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                                    $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified UpdateInstanceMetadata message, length delimited. Does not implicitly {@link google.spanner.admin.instance.v1.UpdateInstanceMetadata.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.spanner.admin.instance.v1.UpdateInstanceMetadata
                             * @static
                             * @param {google.spanner.admin.instance.v1.IUpdateInstanceMetadata} message UpdateInstanceMetadata message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            UpdateInstanceMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an UpdateInstanceMetadata message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.spanner.admin.instance.v1.UpdateInstanceMetadata
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.spanner.admin.instance.v1.UpdateInstanceMetadata} UpdateInstanceMetadata
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            UpdateInstanceMetadata.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.admin.instance.v1.UpdateInstanceMetadata();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.instance = $root.google.spanner.admin.instance.v1.Instance.decode(reader, reader.uint32());
                                        break;
                                    case 2:
                                        message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    case 3:
                                        message.cancelTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    case 4:
                                        message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an UpdateInstanceMetadata message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.spanner.admin.instance.v1.UpdateInstanceMetadata
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.spanner.admin.instance.v1.UpdateInstanceMetadata} UpdateInstanceMetadata
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            UpdateInstanceMetadata.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an UpdateInstanceMetadata message.
                             * @function verify
                             * @memberof google.spanner.admin.instance.v1.UpdateInstanceMetadata
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            UpdateInstanceMetadata.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.instance != null && message.hasOwnProperty("instance")) {
                                    var error = $root.google.spanner.admin.instance.v1.Instance.verify(message.instance);
                                    if (error)
                                        return "instance." + error;
                                }
                                if (message.startTime != null && message.hasOwnProperty("startTime")) {
                                    var error = $root.google.protobuf.Timestamp.verify(message.startTime);
                                    if (error)
                                        return "startTime." + error;
                                }
                                if (message.cancelTime != null && message.hasOwnProperty("cancelTime")) {
                                    var error = $root.google.protobuf.Timestamp.verify(message.cancelTime);
                                    if (error)
                                        return "cancelTime." + error;
                                }
                                if (message.endTime != null && message.hasOwnProperty("endTime")) {
                                    var error = $root.google.protobuf.Timestamp.verify(message.endTime);
                                    if (error)
                                        return "endTime." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates an UpdateInstanceMetadata message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.spanner.admin.instance.v1.UpdateInstanceMetadata
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.spanner.admin.instance.v1.UpdateInstanceMetadata} UpdateInstanceMetadata
                             */
                            UpdateInstanceMetadata.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.spanner.admin.instance.v1.UpdateInstanceMetadata)
                                    return object;
                                var message = new $root.google.spanner.admin.instance.v1.UpdateInstanceMetadata();
                                if (object.instance != null) {
                                    if (typeof object.instance !== "object")
                                        throw TypeError(".google.spanner.admin.instance.v1.UpdateInstanceMetadata.instance: object expected");
                                    message.instance = $root.google.spanner.admin.instance.v1.Instance.fromObject(object.instance);
                                }
                                if (object.startTime != null) {
                                    if (typeof object.startTime !== "object")
                                        throw TypeError(".google.spanner.admin.instance.v1.UpdateInstanceMetadata.startTime: object expected");
                                    message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);
                                }
                                if (object.cancelTime != null) {
                                    if (typeof object.cancelTime !== "object")
                                        throw TypeError(".google.spanner.admin.instance.v1.UpdateInstanceMetadata.cancelTime: object expected");
                                    message.cancelTime = $root.google.protobuf.Timestamp.fromObject(object.cancelTime);
                                }
                                if (object.endTime != null) {
                                    if (typeof object.endTime !== "object")
                                        throw TypeError(".google.spanner.admin.instance.v1.UpdateInstanceMetadata.endTime: object expected");
                                    message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an UpdateInstanceMetadata message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.spanner.admin.instance.v1.UpdateInstanceMetadata
                             * @static
                             * @param {google.spanner.admin.instance.v1.UpdateInstanceMetadata} message UpdateInstanceMetadata
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            UpdateInstanceMetadata.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.instance = null;
                                    object.startTime = null;
                                    object.cancelTime = null;
                                    object.endTime = null;
                                }
                                if (message.instance != null && message.hasOwnProperty("instance"))
                                    object.instance = $root.google.spanner.admin.instance.v1.Instance.toObject(message.instance, options);
                                if (message.startTime != null && message.hasOwnProperty("startTime"))
                                    object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);
                                if (message.cancelTime != null && message.hasOwnProperty("cancelTime"))
                                    object.cancelTime = $root.google.protobuf.Timestamp.toObject(message.cancelTime, options);
                                if (message.endTime != null && message.hasOwnProperty("endTime"))
                                    object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
                                return object;
                            };
    
                            /**
                             * Converts this UpdateInstanceMetadata to JSON.
                             * @function toJSON
                             * @memberof google.spanner.admin.instance.v1.UpdateInstanceMetadata
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            UpdateInstanceMetadata.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return UpdateInstanceMetadata;
                        })();
    
                        return v1;
                    })();
    
                    return instance;
                })();
    
                return admin;
            })();
    
            spanner.v1 = (function() {
    
                /**
                 * Namespace v1.
                 * @memberof google.spanner
                 * @namespace
                 */
                var v1 = {};
    
                v1.KeyRange = (function() {
    
                    /**
                     * Properties of a KeyRange.
                     * @memberof google.spanner.v1
                     * @interface IKeyRange
                     * @property {google.protobuf.IListValue|null} [startClosed] KeyRange startClosed
                     * @property {google.protobuf.IListValue|null} [startOpen] KeyRange startOpen
                     * @property {google.protobuf.IListValue|null} [endClosed] KeyRange endClosed
                     * @property {google.protobuf.IListValue|null} [endOpen] KeyRange endOpen
                     */
    
                    /**
                     * Constructs a new KeyRange.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a KeyRange.
                     * @implements IKeyRange
                     * @constructor
                     * @param {google.spanner.v1.IKeyRange=} [properties] Properties to set
                     */
                    function KeyRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * KeyRange startClosed.
                     * @member {google.protobuf.IListValue|null|undefined} startClosed
                     * @memberof google.spanner.v1.KeyRange
                     * @instance
                     */
                    KeyRange.prototype.startClosed = null;
    
                    /**
                     * KeyRange startOpen.
                     * @member {google.protobuf.IListValue|null|undefined} startOpen
                     * @memberof google.spanner.v1.KeyRange
                     * @instance
                     */
                    KeyRange.prototype.startOpen = null;
    
                    /**
                     * KeyRange endClosed.
                     * @member {google.protobuf.IListValue|null|undefined} endClosed
                     * @memberof google.spanner.v1.KeyRange
                     * @instance
                     */
                    KeyRange.prototype.endClosed = null;
    
                    /**
                     * KeyRange endOpen.
                     * @member {google.protobuf.IListValue|null|undefined} endOpen
                     * @memberof google.spanner.v1.KeyRange
                     * @instance
                     */
                    KeyRange.prototype.endOpen = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * KeyRange startKeyType.
                     * @member {"startClosed"|"startOpen"|undefined} startKeyType
                     * @memberof google.spanner.v1.KeyRange
                     * @instance
                     */
                    Object.defineProperty(KeyRange.prototype, "startKeyType", {
                        get: $util.oneOfGetter($oneOfFields = ["startClosed", "startOpen"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * KeyRange endKeyType.
                     * @member {"endClosed"|"endOpen"|undefined} endKeyType
                     * @memberof google.spanner.v1.KeyRange
                     * @instance
                     */
                    Object.defineProperty(KeyRange.prototype, "endKeyType", {
                        get: $util.oneOfGetter($oneOfFields = ["endClosed", "endOpen"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new KeyRange instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.KeyRange
                     * @static
                     * @param {google.spanner.v1.IKeyRange=} [properties] Properties to set
                     * @returns {google.spanner.v1.KeyRange} KeyRange instance
                     */
                    KeyRange.create = function create(properties) {
                        return new KeyRange(properties);
                    };
    
                    /**
                     * Encodes the specified KeyRange message. Does not implicitly {@link google.spanner.v1.KeyRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.KeyRange
                     * @static
                     * @param {google.spanner.v1.IKeyRange} message KeyRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    KeyRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.startClosed != null && Object.hasOwnProperty.call(message, "startClosed"))
                            $root.google.protobuf.ListValue.encode(message.startClosed, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.startOpen != null && Object.hasOwnProperty.call(message, "startOpen"))
                            $root.google.protobuf.ListValue.encode(message.startOpen, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.endClosed != null && Object.hasOwnProperty.call(message, "endClosed"))
                            $root.google.protobuf.ListValue.encode(message.endClosed, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.endOpen != null && Object.hasOwnProperty.call(message, "endOpen"))
                            $root.google.protobuf.ListValue.encode(message.endOpen, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified KeyRange message, length delimited. Does not implicitly {@link google.spanner.v1.KeyRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.KeyRange
                     * @static
                     * @param {google.spanner.v1.IKeyRange} message KeyRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    KeyRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a KeyRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.KeyRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.KeyRange} KeyRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    KeyRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.KeyRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.startClosed = $root.google.protobuf.ListValue.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.startOpen = $root.google.protobuf.ListValue.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.endClosed = $root.google.protobuf.ListValue.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.endOpen = $root.google.protobuf.ListValue.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a KeyRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.KeyRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.KeyRange} KeyRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    KeyRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a KeyRange message.
                     * @function verify
                     * @memberof google.spanner.v1.KeyRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    KeyRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.startClosed != null && message.hasOwnProperty("startClosed")) {
                            properties.startKeyType = 1;
                            {
                                var error = $root.google.protobuf.ListValue.verify(message.startClosed);
                                if (error)
                                    return "startClosed." + error;
                            }
                        }
                        if (message.startOpen != null && message.hasOwnProperty("startOpen")) {
                            if (properties.startKeyType === 1)
                                return "startKeyType: multiple values";
                            properties.startKeyType = 1;
                            {
                                var error = $root.google.protobuf.ListValue.verify(message.startOpen);
                                if (error)
                                    return "startOpen." + error;
                            }
                        }
                        if (message.endClosed != null && message.hasOwnProperty("endClosed")) {
                            properties.endKeyType = 1;
                            {
                                var error = $root.google.protobuf.ListValue.verify(message.endClosed);
                                if (error)
                                    return "endClosed." + error;
                            }
                        }
                        if (message.endOpen != null && message.hasOwnProperty("endOpen")) {
                            if (properties.endKeyType === 1)
                                return "endKeyType: multiple values";
                            properties.endKeyType = 1;
                            {
                                var error = $root.google.protobuf.ListValue.verify(message.endOpen);
                                if (error)
                                    return "endOpen." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a KeyRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.KeyRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.KeyRange} KeyRange
                     */
                    KeyRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.KeyRange)
                            return object;
                        var message = new $root.google.spanner.v1.KeyRange();
                        if (object.startClosed != null) {
                            if (typeof object.startClosed !== "object")
                                throw TypeError(".google.spanner.v1.KeyRange.startClosed: object expected");
                            message.startClosed = $root.google.protobuf.ListValue.fromObject(object.startClosed);
                        }
                        if (object.startOpen != null) {
                            if (typeof object.startOpen !== "object")
                                throw TypeError(".google.spanner.v1.KeyRange.startOpen: object expected");
                            message.startOpen = $root.google.protobuf.ListValue.fromObject(object.startOpen);
                        }
                        if (object.endClosed != null) {
                            if (typeof object.endClosed !== "object")
                                throw TypeError(".google.spanner.v1.KeyRange.endClosed: object expected");
                            message.endClosed = $root.google.protobuf.ListValue.fromObject(object.endClosed);
                        }
                        if (object.endOpen != null) {
                            if (typeof object.endOpen !== "object")
                                throw TypeError(".google.spanner.v1.KeyRange.endOpen: object expected");
                            message.endOpen = $root.google.protobuf.ListValue.fromObject(object.endOpen);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a KeyRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.KeyRange
                     * @static
                     * @param {google.spanner.v1.KeyRange} message KeyRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    KeyRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.startClosed != null && message.hasOwnProperty("startClosed")) {
                            object.startClosed = $root.google.protobuf.ListValue.toObject(message.startClosed, options);
                            if (options.oneofs)
                                object.startKeyType = "startClosed";
                        }
                        if (message.startOpen != null && message.hasOwnProperty("startOpen")) {
                            object.startOpen = $root.google.protobuf.ListValue.toObject(message.startOpen, options);
                            if (options.oneofs)
                                object.startKeyType = "startOpen";
                        }
                        if (message.endClosed != null && message.hasOwnProperty("endClosed")) {
                            object.endClosed = $root.google.protobuf.ListValue.toObject(message.endClosed, options);
                            if (options.oneofs)
                                object.endKeyType = "endClosed";
                        }
                        if (message.endOpen != null && message.hasOwnProperty("endOpen")) {
                            object.endOpen = $root.google.protobuf.ListValue.toObject(message.endOpen, options);
                            if (options.oneofs)
                                object.endKeyType = "endOpen";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this KeyRange to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.KeyRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    KeyRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return KeyRange;
                })();
    
                v1.KeySet = (function() {
    
                    /**
                     * Properties of a KeySet.
                     * @memberof google.spanner.v1
                     * @interface IKeySet
                     * @property {Array.<google.protobuf.IListValue>|null} [keys] KeySet keys
                     * @property {Array.<google.spanner.v1.IKeyRange>|null} [ranges] KeySet ranges
                     * @property {boolean|null} [all] KeySet all
                     */
    
                    /**
                     * Constructs a new KeySet.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a KeySet.
                     * @implements IKeySet
                     * @constructor
                     * @param {google.spanner.v1.IKeySet=} [properties] Properties to set
                     */
                    function KeySet(properties) {
                        this.keys = [];
                        this.ranges = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * KeySet keys.
                     * @member {Array.<google.protobuf.IListValue>} keys
                     * @memberof google.spanner.v1.KeySet
                     * @instance
                     */
                    KeySet.prototype.keys = $util.emptyArray;
    
                    /**
                     * KeySet ranges.
                     * @member {Array.<google.spanner.v1.IKeyRange>} ranges
                     * @memberof google.spanner.v1.KeySet
                     * @instance
                     */
                    KeySet.prototype.ranges = $util.emptyArray;
    
                    /**
                     * KeySet all.
                     * @member {boolean} all
                     * @memberof google.spanner.v1.KeySet
                     * @instance
                     */
                    KeySet.prototype.all = false;
    
                    /**
                     * Creates a new KeySet instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.KeySet
                     * @static
                     * @param {google.spanner.v1.IKeySet=} [properties] Properties to set
                     * @returns {google.spanner.v1.KeySet} KeySet instance
                     */
                    KeySet.create = function create(properties) {
                        return new KeySet(properties);
                    };
    
                    /**
                     * Encodes the specified KeySet message. Does not implicitly {@link google.spanner.v1.KeySet.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.KeySet
                     * @static
                     * @param {google.spanner.v1.IKeySet} message KeySet message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    KeySet.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.keys != null && message.keys.length)
                            for (var i = 0; i < message.keys.length; ++i)
                                $root.google.protobuf.ListValue.encode(message.keys[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.ranges != null && message.ranges.length)
                            for (var i = 0; i < message.ranges.length; ++i)
                                $root.google.spanner.v1.KeyRange.encode(message.ranges[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.all != null && Object.hasOwnProperty.call(message, "all"))
                            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.all);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified KeySet message, length delimited. Does not implicitly {@link google.spanner.v1.KeySet.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.KeySet
                     * @static
                     * @param {google.spanner.v1.IKeySet} message KeySet message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    KeySet.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a KeySet message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.KeySet
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.KeySet} KeySet
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    KeySet.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.KeySet();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.keys && message.keys.length))
                                    message.keys = [];
                                message.keys.push($root.google.protobuf.ListValue.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                if (!(message.ranges && message.ranges.length))
                                    message.ranges = [];
                                message.ranges.push($root.google.spanner.v1.KeyRange.decode(reader, reader.uint32()));
                                break;
                            case 3:
                                message.all = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a KeySet message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.KeySet
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.KeySet} KeySet
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    KeySet.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a KeySet message.
                     * @function verify
                     * @memberof google.spanner.v1.KeySet
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    KeySet.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.keys != null && message.hasOwnProperty("keys")) {
                            if (!Array.isArray(message.keys))
                                return "keys: array expected";
                            for (var i = 0; i < message.keys.length; ++i) {
                                var error = $root.google.protobuf.ListValue.verify(message.keys[i]);
                                if (error)
                                    return "keys." + error;
                            }
                        }
                        if (message.ranges != null && message.hasOwnProperty("ranges")) {
                            if (!Array.isArray(message.ranges))
                                return "ranges: array expected";
                            for (var i = 0; i < message.ranges.length; ++i) {
                                var error = $root.google.spanner.v1.KeyRange.verify(message.ranges[i]);
                                if (error)
                                    return "ranges." + error;
                            }
                        }
                        if (message.all != null && message.hasOwnProperty("all"))
                            if (typeof message.all !== "boolean")
                                return "all: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a KeySet message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.KeySet
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.KeySet} KeySet
                     */
                    KeySet.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.KeySet)
                            return object;
                        var message = new $root.google.spanner.v1.KeySet();
                        if (object.keys) {
                            if (!Array.isArray(object.keys))
                                throw TypeError(".google.spanner.v1.KeySet.keys: array expected");
                            message.keys = [];
                            for (var i = 0; i < object.keys.length; ++i) {
                                if (typeof object.keys[i] !== "object")
                                    throw TypeError(".google.spanner.v1.KeySet.keys: object expected");
                                message.keys[i] = $root.google.protobuf.ListValue.fromObject(object.keys[i]);
                            }
                        }
                        if (object.ranges) {
                            if (!Array.isArray(object.ranges))
                                throw TypeError(".google.spanner.v1.KeySet.ranges: array expected");
                            message.ranges = [];
                            for (var i = 0; i < object.ranges.length; ++i) {
                                if (typeof object.ranges[i] !== "object")
                                    throw TypeError(".google.spanner.v1.KeySet.ranges: object expected");
                                message.ranges[i] = $root.google.spanner.v1.KeyRange.fromObject(object.ranges[i]);
                            }
                        }
                        if (object.all != null)
                            message.all = Boolean(object.all);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a KeySet message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.KeySet
                     * @static
                     * @param {google.spanner.v1.KeySet} message KeySet
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    KeySet.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.keys = [];
                            object.ranges = [];
                        }
                        if (options.defaults)
                            object.all = false;
                        if (message.keys && message.keys.length) {
                            object.keys = [];
                            for (var j = 0; j < message.keys.length; ++j)
                                object.keys[j] = $root.google.protobuf.ListValue.toObject(message.keys[j], options);
                        }
                        if (message.ranges && message.ranges.length) {
                            object.ranges = [];
                            for (var j = 0; j < message.ranges.length; ++j)
                                object.ranges[j] = $root.google.spanner.v1.KeyRange.toObject(message.ranges[j], options);
                        }
                        if (message.all != null && message.hasOwnProperty("all"))
                            object.all = message.all;
                        return object;
                    };
    
                    /**
                     * Converts this KeySet to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.KeySet
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    KeySet.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return KeySet;
                })();
    
                v1.Mutation = (function() {
    
                    /**
                     * Properties of a Mutation.
                     * @memberof google.spanner.v1
                     * @interface IMutation
                     * @property {google.spanner.v1.Mutation.IWrite|null} [insert] Mutation insert
                     * @property {google.spanner.v1.Mutation.IWrite|null} [update] Mutation update
                     * @property {google.spanner.v1.Mutation.IWrite|null} [insertOrUpdate] Mutation insertOrUpdate
                     * @property {google.spanner.v1.Mutation.IWrite|null} [replace] Mutation replace
                     * @property {google.spanner.v1.Mutation.IDelete|null} ["delete"] Mutation delete
                     */
    
                    /**
                     * Constructs a new Mutation.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a Mutation.
                     * @implements IMutation
                     * @constructor
                     * @param {google.spanner.v1.IMutation=} [properties] Properties to set
                     */
                    function Mutation(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Mutation insert.
                     * @member {google.spanner.v1.Mutation.IWrite|null|undefined} insert
                     * @memberof google.spanner.v1.Mutation
                     * @instance
                     */
                    Mutation.prototype.insert = null;
    
                    /**
                     * Mutation update.
                     * @member {google.spanner.v1.Mutation.IWrite|null|undefined} update
                     * @memberof google.spanner.v1.Mutation
                     * @instance
                     */
                    Mutation.prototype.update = null;
    
                    /**
                     * Mutation insertOrUpdate.
                     * @member {google.spanner.v1.Mutation.IWrite|null|undefined} insertOrUpdate
                     * @memberof google.spanner.v1.Mutation
                     * @instance
                     */
                    Mutation.prototype.insertOrUpdate = null;
    
                    /**
                     * Mutation replace.
                     * @member {google.spanner.v1.Mutation.IWrite|null|undefined} replace
                     * @memberof google.spanner.v1.Mutation
                     * @instance
                     */
                    Mutation.prototype.replace = null;
    
                    /**
                     * Mutation delete.
                     * @member {google.spanner.v1.Mutation.IDelete|null|undefined} delete
                     * @memberof google.spanner.v1.Mutation
                     * @instance
                     */
                    Mutation.prototype["delete"] = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * Mutation operation.
                     * @member {"insert"|"update"|"insertOrUpdate"|"replace"|"delete"|undefined} operation
                     * @memberof google.spanner.v1.Mutation
                     * @instance
                     */
                    Object.defineProperty(Mutation.prototype, "operation", {
                        get: $util.oneOfGetter($oneOfFields = ["insert", "update", "insertOrUpdate", "replace", "delete"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new Mutation instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.Mutation
                     * @static
                     * @param {google.spanner.v1.IMutation=} [properties] Properties to set
                     * @returns {google.spanner.v1.Mutation} Mutation instance
                     */
                    Mutation.create = function create(properties) {
                        return new Mutation(properties);
                    };
    
                    /**
                     * Encodes the specified Mutation message. Does not implicitly {@link google.spanner.v1.Mutation.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.Mutation
                     * @static
                     * @param {google.spanner.v1.IMutation} message Mutation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Mutation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.insert != null && Object.hasOwnProperty.call(message, "insert"))
                            $root.google.spanner.v1.Mutation.Write.encode(message.insert, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.update != null && Object.hasOwnProperty.call(message, "update"))
                            $root.google.spanner.v1.Mutation.Write.encode(message.update, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.insertOrUpdate != null && Object.hasOwnProperty.call(message, "insertOrUpdate"))
                            $root.google.spanner.v1.Mutation.Write.encode(message.insertOrUpdate, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.replace != null && Object.hasOwnProperty.call(message, "replace"))
                            $root.google.spanner.v1.Mutation.Write.encode(message.replace, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                            $root.google.spanner.v1.Mutation.Delete.encode(message["delete"], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Mutation message, length delimited. Does not implicitly {@link google.spanner.v1.Mutation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.Mutation
                     * @static
                     * @param {google.spanner.v1.IMutation} message Mutation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Mutation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Mutation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.Mutation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.Mutation} Mutation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Mutation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.Mutation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.insert = $root.google.spanner.v1.Mutation.Write.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.update = $root.google.spanner.v1.Mutation.Write.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.insertOrUpdate = $root.google.spanner.v1.Mutation.Write.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.replace = $root.google.spanner.v1.Mutation.Write.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message["delete"] = $root.google.spanner.v1.Mutation.Delete.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Mutation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.Mutation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.Mutation} Mutation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Mutation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Mutation message.
                     * @function verify
                     * @memberof google.spanner.v1.Mutation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Mutation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.insert != null && message.hasOwnProperty("insert")) {
                            properties.operation = 1;
                            {
                                var error = $root.google.spanner.v1.Mutation.Write.verify(message.insert);
                                if (error)
                                    return "insert." + error;
                            }
                        }
                        if (message.update != null && message.hasOwnProperty("update")) {
                            if (properties.operation === 1)
                                return "operation: multiple values";
                            properties.operation = 1;
                            {
                                var error = $root.google.spanner.v1.Mutation.Write.verify(message.update);
                                if (error)
                                    return "update." + error;
                            }
                        }
                        if (message.insertOrUpdate != null && message.hasOwnProperty("insertOrUpdate")) {
                            if (properties.operation === 1)
                                return "operation: multiple values";
                            properties.operation = 1;
                            {
                                var error = $root.google.spanner.v1.Mutation.Write.verify(message.insertOrUpdate);
                                if (error)
                                    return "insertOrUpdate." + error;
                            }
                        }
                        if (message.replace != null && message.hasOwnProperty("replace")) {
                            if (properties.operation === 1)
                                return "operation: multiple values";
                            properties.operation = 1;
                            {
                                var error = $root.google.spanner.v1.Mutation.Write.verify(message.replace);
                                if (error)
                                    return "replace." + error;
                            }
                        }
                        if (message["delete"] != null && message.hasOwnProperty("delete")) {
                            if (properties.operation === 1)
                                return "operation: multiple values";
                            properties.operation = 1;
                            {
                                var error = $root.google.spanner.v1.Mutation.Delete.verify(message["delete"]);
                                if (error)
                                    return "delete." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Mutation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.Mutation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.Mutation} Mutation
                     */
                    Mutation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.Mutation)
                            return object;
                        var message = new $root.google.spanner.v1.Mutation();
                        if (object.insert != null) {
                            if (typeof object.insert !== "object")
                                throw TypeError(".google.spanner.v1.Mutation.insert: object expected");
                            message.insert = $root.google.spanner.v1.Mutation.Write.fromObject(object.insert);
                        }
                        if (object.update != null) {
                            if (typeof object.update !== "object")
                                throw TypeError(".google.spanner.v1.Mutation.update: object expected");
                            message.update = $root.google.spanner.v1.Mutation.Write.fromObject(object.update);
                        }
                        if (object.insertOrUpdate != null) {
                            if (typeof object.insertOrUpdate !== "object")
                                throw TypeError(".google.spanner.v1.Mutation.insertOrUpdate: object expected");
                            message.insertOrUpdate = $root.google.spanner.v1.Mutation.Write.fromObject(object.insertOrUpdate);
                        }
                        if (object.replace != null) {
                            if (typeof object.replace !== "object")
                                throw TypeError(".google.spanner.v1.Mutation.replace: object expected");
                            message.replace = $root.google.spanner.v1.Mutation.Write.fromObject(object.replace);
                        }
                        if (object["delete"] != null) {
                            if (typeof object["delete"] !== "object")
                                throw TypeError(".google.spanner.v1.Mutation.delete: object expected");
                            message["delete"] = $root.google.spanner.v1.Mutation.Delete.fromObject(object["delete"]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Mutation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.Mutation
                     * @static
                     * @param {google.spanner.v1.Mutation} message Mutation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Mutation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.insert != null && message.hasOwnProperty("insert")) {
                            object.insert = $root.google.spanner.v1.Mutation.Write.toObject(message.insert, options);
                            if (options.oneofs)
                                object.operation = "insert";
                        }
                        if (message.update != null && message.hasOwnProperty("update")) {
                            object.update = $root.google.spanner.v1.Mutation.Write.toObject(message.update, options);
                            if (options.oneofs)
                                object.operation = "update";
                        }
                        if (message.insertOrUpdate != null && message.hasOwnProperty("insertOrUpdate")) {
                            object.insertOrUpdate = $root.google.spanner.v1.Mutation.Write.toObject(message.insertOrUpdate, options);
                            if (options.oneofs)
                                object.operation = "insertOrUpdate";
                        }
                        if (message.replace != null && message.hasOwnProperty("replace")) {
                            object.replace = $root.google.spanner.v1.Mutation.Write.toObject(message.replace, options);
                            if (options.oneofs)
                                object.operation = "replace";
                        }
                        if (message["delete"] != null && message.hasOwnProperty("delete")) {
                            object["delete"] = $root.google.spanner.v1.Mutation.Delete.toObject(message["delete"], options);
                            if (options.oneofs)
                                object.operation = "delete";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Mutation to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.Mutation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Mutation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    Mutation.Write = (function() {
    
                        /**
                         * Properties of a Write.
                         * @memberof google.spanner.v1.Mutation
                         * @interface IWrite
                         * @property {string|null} [table] Write table
                         * @property {Array.<string>|null} [columns] Write columns
                         * @property {Array.<google.protobuf.IListValue>|null} [values] Write values
                         */
    
                        /**
                         * Constructs a new Write.
                         * @memberof google.spanner.v1.Mutation
                         * @classdesc Represents a Write.
                         * @implements IWrite
                         * @constructor
                         * @param {google.spanner.v1.Mutation.IWrite=} [properties] Properties to set
                         */
                        function Write(properties) {
                            this.columns = [];
                            this.values = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Write table.
                         * @member {string} table
                         * @memberof google.spanner.v1.Mutation.Write
                         * @instance
                         */
                        Write.prototype.table = "";
    
                        /**
                         * Write columns.
                         * @member {Array.<string>} columns
                         * @memberof google.spanner.v1.Mutation.Write
                         * @instance
                         */
                        Write.prototype.columns = $util.emptyArray;
    
                        /**
                         * Write values.
                         * @member {Array.<google.protobuf.IListValue>} values
                         * @memberof google.spanner.v1.Mutation.Write
                         * @instance
                         */
                        Write.prototype.values = $util.emptyArray;
    
                        /**
                         * Creates a new Write instance using the specified properties.
                         * @function create
                         * @memberof google.spanner.v1.Mutation.Write
                         * @static
                         * @param {google.spanner.v1.Mutation.IWrite=} [properties] Properties to set
                         * @returns {google.spanner.v1.Mutation.Write} Write instance
                         */
                        Write.create = function create(properties) {
                            return new Write(properties);
                        };
    
                        /**
                         * Encodes the specified Write message. Does not implicitly {@link google.spanner.v1.Mutation.Write.verify|verify} messages.
                         * @function encode
                         * @memberof google.spanner.v1.Mutation.Write
                         * @static
                         * @param {google.spanner.v1.Mutation.IWrite} message Write message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Write.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.table != null && Object.hasOwnProperty.call(message, "table"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.table);
                            if (message.columns != null && message.columns.length)
                                for (var i = 0; i < message.columns.length; ++i)
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.columns[i]);
                            if (message.values != null && message.values.length)
                                for (var i = 0; i < message.values.length; ++i)
                                    $root.google.protobuf.ListValue.encode(message.values[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Write message, length delimited. Does not implicitly {@link google.spanner.v1.Mutation.Write.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.spanner.v1.Mutation.Write
                         * @static
                         * @param {google.spanner.v1.Mutation.IWrite} message Write message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Write.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Write message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.spanner.v1.Mutation.Write
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.spanner.v1.Mutation.Write} Write
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Write.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.Mutation.Write();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.table = reader.string();
                                    break;
                                case 2:
                                    if (!(message.columns && message.columns.length))
                                        message.columns = [];
                                    message.columns.push(reader.string());
                                    break;
                                case 3:
                                    if (!(message.values && message.values.length))
                                        message.values = [];
                                    message.values.push($root.google.protobuf.ListValue.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Write message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.spanner.v1.Mutation.Write
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.spanner.v1.Mutation.Write} Write
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Write.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Write message.
                         * @function verify
                         * @memberof google.spanner.v1.Mutation.Write
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Write.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.table != null && message.hasOwnProperty("table"))
                                if (!$util.isString(message.table))
                                    return "table: string expected";
                            if (message.columns != null && message.hasOwnProperty("columns")) {
                                if (!Array.isArray(message.columns))
                                    return "columns: array expected";
                                for (var i = 0; i < message.columns.length; ++i)
                                    if (!$util.isString(message.columns[i]))
                                        return "columns: string[] expected";
                            }
                            if (message.values != null && message.hasOwnProperty("values")) {
                                if (!Array.isArray(message.values))
                                    return "values: array expected";
                                for (var i = 0; i < message.values.length; ++i) {
                                    var error = $root.google.protobuf.ListValue.verify(message.values[i]);
                                    if (error)
                                        return "values." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Write message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.spanner.v1.Mutation.Write
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.spanner.v1.Mutation.Write} Write
                         */
                        Write.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.spanner.v1.Mutation.Write)
                                return object;
                            var message = new $root.google.spanner.v1.Mutation.Write();
                            if (object.table != null)
                                message.table = String(object.table);
                            if (object.columns) {
                                if (!Array.isArray(object.columns))
                                    throw TypeError(".google.spanner.v1.Mutation.Write.columns: array expected");
                                message.columns = [];
                                for (var i = 0; i < object.columns.length; ++i)
                                    message.columns[i] = String(object.columns[i]);
                            }
                            if (object.values) {
                                if (!Array.isArray(object.values))
                                    throw TypeError(".google.spanner.v1.Mutation.Write.values: array expected");
                                message.values = [];
                                for (var i = 0; i < object.values.length; ++i) {
                                    if (typeof object.values[i] !== "object")
                                        throw TypeError(".google.spanner.v1.Mutation.Write.values: object expected");
                                    message.values[i] = $root.google.protobuf.ListValue.fromObject(object.values[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Write message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.spanner.v1.Mutation.Write
                         * @static
                         * @param {google.spanner.v1.Mutation.Write} message Write
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Write.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.columns = [];
                                object.values = [];
                            }
                            if (options.defaults)
                                object.table = "";
                            if (message.table != null && message.hasOwnProperty("table"))
                                object.table = message.table;
                            if (message.columns && message.columns.length) {
                                object.columns = [];
                                for (var j = 0; j < message.columns.length; ++j)
                                    object.columns[j] = message.columns[j];
                            }
                            if (message.values && message.values.length) {
                                object.values = [];
                                for (var j = 0; j < message.values.length; ++j)
                                    object.values[j] = $root.google.protobuf.ListValue.toObject(message.values[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Write to JSON.
                         * @function toJSON
                         * @memberof google.spanner.v1.Mutation.Write
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Write.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Write;
                    })();
    
                    Mutation.Delete = (function() {
    
                        /**
                         * Properties of a Delete.
                         * @memberof google.spanner.v1.Mutation
                         * @interface IDelete
                         * @property {string|null} [table] Delete table
                         * @property {google.spanner.v1.IKeySet|null} [keySet] Delete keySet
                         */
    
                        /**
                         * Constructs a new Delete.
                         * @memberof google.spanner.v1.Mutation
                         * @classdesc Represents a Delete.
                         * @implements IDelete
                         * @constructor
                         * @param {google.spanner.v1.Mutation.IDelete=} [properties] Properties to set
                         */
                        function Delete(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Delete table.
                         * @member {string} table
                         * @memberof google.spanner.v1.Mutation.Delete
                         * @instance
                         */
                        Delete.prototype.table = "";
    
                        /**
                         * Delete keySet.
                         * @member {google.spanner.v1.IKeySet|null|undefined} keySet
                         * @memberof google.spanner.v1.Mutation.Delete
                         * @instance
                         */
                        Delete.prototype.keySet = null;
    
                        /**
                         * Creates a new Delete instance using the specified properties.
                         * @function create
                         * @memberof google.spanner.v1.Mutation.Delete
                         * @static
                         * @param {google.spanner.v1.Mutation.IDelete=} [properties] Properties to set
                         * @returns {google.spanner.v1.Mutation.Delete} Delete instance
                         */
                        Delete.create = function create(properties) {
                            return new Delete(properties);
                        };
    
                        /**
                         * Encodes the specified Delete message. Does not implicitly {@link google.spanner.v1.Mutation.Delete.verify|verify} messages.
                         * @function encode
                         * @memberof google.spanner.v1.Mutation.Delete
                         * @static
                         * @param {google.spanner.v1.Mutation.IDelete} message Delete message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Delete.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.table != null && Object.hasOwnProperty.call(message, "table"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.table);
                            if (message.keySet != null && Object.hasOwnProperty.call(message, "keySet"))
                                $root.google.spanner.v1.KeySet.encode(message.keySet, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Delete message, length delimited. Does not implicitly {@link google.spanner.v1.Mutation.Delete.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.spanner.v1.Mutation.Delete
                         * @static
                         * @param {google.spanner.v1.Mutation.IDelete} message Delete message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Delete.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Delete message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.spanner.v1.Mutation.Delete
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.spanner.v1.Mutation.Delete} Delete
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Delete.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.Mutation.Delete();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.table = reader.string();
                                    break;
                                case 2:
                                    message.keySet = $root.google.spanner.v1.KeySet.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Delete message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.spanner.v1.Mutation.Delete
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.spanner.v1.Mutation.Delete} Delete
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Delete.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Delete message.
                         * @function verify
                         * @memberof google.spanner.v1.Mutation.Delete
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Delete.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.table != null && message.hasOwnProperty("table"))
                                if (!$util.isString(message.table))
                                    return "table: string expected";
                            if (message.keySet != null && message.hasOwnProperty("keySet")) {
                                var error = $root.google.spanner.v1.KeySet.verify(message.keySet);
                                if (error)
                                    return "keySet." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Delete message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.spanner.v1.Mutation.Delete
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.spanner.v1.Mutation.Delete} Delete
                         */
                        Delete.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.spanner.v1.Mutation.Delete)
                                return object;
                            var message = new $root.google.spanner.v1.Mutation.Delete();
                            if (object.table != null)
                                message.table = String(object.table);
                            if (object.keySet != null) {
                                if (typeof object.keySet !== "object")
                                    throw TypeError(".google.spanner.v1.Mutation.Delete.keySet: object expected");
                                message.keySet = $root.google.spanner.v1.KeySet.fromObject(object.keySet);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Delete message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.spanner.v1.Mutation.Delete
                         * @static
                         * @param {google.spanner.v1.Mutation.Delete} message Delete
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Delete.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.table = "";
                                object.keySet = null;
                            }
                            if (message.table != null && message.hasOwnProperty("table"))
                                object.table = message.table;
                            if (message.keySet != null && message.hasOwnProperty("keySet"))
                                object.keySet = $root.google.spanner.v1.KeySet.toObject(message.keySet, options);
                            return object;
                        };
    
                        /**
                         * Converts this Delete to JSON.
                         * @function toJSON
                         * @memberof google.spanner.v1.Mutation.Delete
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Delete.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Delete;
                    })();
    
                    return Mutation;
                })();
    
                v1.PlanNode = (function() {
    
                    /**
                     * Properties of a PlanNode.
                     * @memberof google.spanner.v1
                     * @interface IPlanNode
                     * @property {number|null} [index] PlanNode index
                     * @property {google.spanner.v1.PlanNode.Kind|null} [kind] PlanNode kind
                     * @property {string|null} [displayName] PlanNode displayName
                     * @property {Array.<google.spanner.v1.PlanNode.IChildLink>|null} [childLinks] PlanNode childLinks
                     * @property {google.spanner.v1.PlanNode.IShortRepresentation|null} [shortRepresentation] PlanNode shortRepresentation
                     * @property {google.protobuf.IStruct|null} [metadata] PlanNode metadata
                     * @property {google.protobuf.IStruct|null} [executionStats] PlanNode executionStats
                     */
    
                    /**
                     * Constructs a new PlanNode.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a PlanNode.
                     * @implements IPlanNode
                     * @constructor
                     * @param {google.spanner.v1.IPlanNode=} [properties] Properties to set
                     */
                    function PlanNode(properties) {
                        this.childLinks = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PlanNode index.
                     * @member {number} index
                     * @memberof google.spanner.v1.PlanNode
                     * @instance
                     */
                    PlanNode.prototype.index = 0;
    
                    /**
                     * PlanNode kind.
                     * @member {google.spanner.v1.PlanNode.Kind} kind
                     * @memberof google.spanner.v1.PlanNode
                     * @instance
                     */
                    PlanNode.prototype.kind = 0;
    
                    /**
                     * PlanNode displayName.
                     * @member {string} displayName
                     * @memberof google.spanner.v1.PlanNode
                     * @instance
                     */
                    PlanNode.prototype.displayName = "";
    
                    /**
                     * PlanNode childLinks.
                     * @member {Array.<google.spanner.v1.PlanNode.IChildLink>} childLinks
                     * @memberof google.spanner.v1.PlanNode
                     * @instance
                     */
                    PlanNode.prototype.childLinks = $util.emptyArray;
    
                    /**
                     * PlanNode shortRepresentation.
                     * @member {google.spanner.v1.PlanNode.IShortRepresentation|null|undefined} shortRepresentation
                     * @memberof google.spanner.v1.PlanNode
                     * @instance
                     */
                    PlanNode.prototype.shortRepresentation = null;
    
                    /**
                     * PlanNode metadata.
                     * @member {google.protobuf.IStruct|null|undefined} metadata
                     * @memberof google.spanner.v1.PlanNode
                     * @instance
                     */
                    PlanNode.prototype.metadata = null;
    
                    /**
                     * PlanNode executionStats.
                     * @member {google.protobuf.IStruct|null|undefined} executionStats
                     * @memberof google.spanner.v1.PlanNode
                     * @instance
                     */
                    PlanNode.prototype.executionStats = null;
    
                    /**
                     * Creates a new PlanNode instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.PlanNode
                     * @static
                     * @param {google.spanner.v1.IPlanNode=} [properties] Properties to set
                     * @returns {google.spanner.v1.PlanNode} PlanNode instance
                     */
                    PlanNode.create = function create(properties) {
                        return new PlanNode(properties);
                    };
    
                    /**
                     * Encodes the specified PlanNode message. Does not implicitly {@link google.spanner.v1.PlanNode.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.PlanNode
                     * @static
                     * @param {google.spanner.v1.IPlanNode} message PlanNode message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PlanNode.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.index);
                        if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.kind);
                        if (message.displayName != null && Object.hasOwnProperty.call(message, "displayName"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.displayName);
                        if (message.childLinks != null && message.childLinks.length)
                            for (var i = 0; i < message.childLinks.length; ++i)
                                $root.google.spanner.v1.PlanNode.ChildLink.encode(message.childLinks[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.shortRepresentation != null && Object.hasOwnProperty.call(message, "shortRepresentation"))
                            $root.google.spanner.v1.PlanNode.ShortRepresentation.encode(message.shortRepresentation, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                            $root.google.protobuf.Struct.encode(message.metadata, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.executionStats != null && Object.hasOwnProperty.call(message, "executionStats"))
                            $root.google.protobuf.Struct.encode(message.executionStats, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PlanNode message, length delimited. Does not implicitly {@link google.spanner.v1.PlanNode.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.PlanNode
                     * @static
                     * @param {google.spanner.v1.IPlanNode} message PlanNode message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PlanNode.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PlanNode message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.PlanNode
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.PlanNode} PlanNode
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PlanNode.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.PlanNode();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.index = reader.int32();
                                break;
                            case 2:
                                message.kind = reader.int32();
                                break;
                            case 3:
                                message.displayName = reader.string();
                                break;
                            case 4:
                                if (!(message.childLinks && message.childLinks.length))
                                    message.childLinks = [];
                                message.childLinks.push($root.google.spanner.v1.PlanNode.ChildLink.decode(reader, reader.uint32()));
                                break;
                            case 5:
                                message.shortRepresentation = $root.google.spanner.v1.PlanNode.ShortRepresentation.decode(reader, reader.uint32());
                                break;
                            case 6:
                                message.metadata = $root.google.protobuf.Struct.decode(reader, reader.uint32());
                                break;
                            case 7:
                                message.executionStats = $root.google.protobuf.Struct.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PlanNode message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.PlanNode
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.PlanNode} PlanNode
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PlanNode.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PlanNode message.
                     * @function verify
                     * @memberof google.spanner.v1.PlanNode
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PlanNode.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.index != null && message.hasOwnProperty("index"))
                            if (!$util.isInteger(message.index))
                                return "index: integer expected";
                        if (message.kind != null && message.hasOwnProperty("kind"))
                            switch (message.kind) {
                            default:
                                return "kind: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.displayName != null && message.hasOwnProperty("displayName"))
                            if (!$util.isString(message.displayName))
                                return "displayName: string expected";
                        if (message.childLinks != null && message.hasOwnProperty("childLinks")) {
                            if (!Array.isArray(message.childLinks))
                                return "childLinks: array expected";
                            for (var i = 0; i < message.childLinks.length; ++i) {
                                var error = $root.google.spanner.v1.PlanNode.ChildLink.verify(message.childLinks[i]);
                                if (error)
                                    return "childLinks." + error;
                            }
                        }
                        if (message.shortRepresentation != null && message.hasOwnProperty("shortRepresentation")) {
                            var error = $root.google.spanner.v1.PlanNode.ShortRepresentation.verify(message.shortRepresentation);
                            if (error)
                                return "shortRepresentation." + error;
                        }
                        if (message.metadata != null && message.hasOwnProperty("metadata")) {
                            var error = $root.google.protobuf.Struct.verify(message.metadata);
                            if (error)
                                return "metadata." + error;
                        }
                        if (message.executionStats != null && message.hasOwnProperty("executionStats")) {
                            var error = $root.google.protobuf.Struct.verify(message.executionStats);
                            if (error)
                                return "executionStats." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a PlanNode message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.PlanNode
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.PlanNode} PlanNode
                     */
                    PlanNode.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.PlanNode)
                            return object;
                        var message = new $root.google.spanner.v1.PlanNode();
                        if (object.index != null)
                            message.index = object.index | 0;
                        switch (object.kind) {
                        case "KIND_UNSPECIFIED":
                        case 0:
                            message.kind = 0;
                            break;
                        case "RELATIONAL":
                        case 1:
                            message.kind = 1;
                            break;
                        case "SCALAR":
                        case 2:
                            message.kind = 2;
                            break;
                        }
                        if (object.displayName != null)
                            message.displayName = String(object.displayName);
                        if (object.childLinks) {
                            if (!Array.isArray(object.childLinks))
                                throw TypeError(".google.spanner.v1.PlanNode.childLinks: array expected");
                            message.childLinks = [];
                            for (var i = 0; i < object.childLinks.length; ++i) {
                                if (typeof object.childLinks[i] !== "object")
                                    throw TypeError(".google.spanner.v1.PlanNode.childLinks: object expected");
                                message.childLinks[i] = $root.google.spanner.v1.PlanNode.ChildLink.fromObject(object.childLinks[i]);
                            }
                        }
                        if (object.shortRepresentation != null) {
                            if (typeof object.shortRepresentation !== "object")
                                throw TypeError(".google.spanner.v1.PlanNode.shortRepresentation: object expected");
                            message.shortRepresentation = $root.google.spanner.v1.PlanNode.ShortRepresentation.fromObject(object.shortRepresentation);
                        }
                        if (object.metadata != null) {
                            if (typeof object.metadata !== "object")
                                throw TypeError(".google.spanner.v1.PlanNode.metadata: object expected");
                            message.metadata = $root.google.protobuf.Struct.fromObject(object.metadata);
                        }
                        if (object.executionStats != null) {
                            if (typeof object.executionStats !== "object")
                                throw TypeError(".google.spanner.v1.PlanNode.executionStats: object expected");
                            message.executionStats = $root.google.protobuf.Struct.fromObject(object.executionStats);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PlanNode message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.PlanNode
                     * @static
                     * @param {google.spanner.v1.PlanNode} message PlanNode
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PlanNode.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.childLinks = [];
                        if (options.defaults) {
                            object.index = 0;
                            object.kind = options.enums === String ? "KIND_UNSPECIFIED" : 0;
                            object.displayName = "";
                            object.shortRepresentation = null;
                            object.metadata = null;
                            object.executionStats = null;
                        }
                        if (message.index != null && message.hasOwnProperty("index"))
                            object.index = message.index;
                        if (message.kind != null && message.hasOwnProperty("kind"))
                            object.kind = options.enums === String ? $root.google.spanner.v1.PlanNode.Kind[message.kind] : message.kind;
                        if (message.displayName != null && message.hasOwnProperty("displayName"))
                            object.displayName = message.displayName;
                        if (message.childLinks && message.childLinks.length) {
                            object.childLinks = [];
                            for (var j = 0; j < message.childLinks.length; ++j)
                                object.childLinks[j] = $root.google.spanner.v1.PlanNode.ChildLink.toObject(message.childLinks[j], options);
                        }
                        if (message.shortRepresentation != null && message.hasOwnProperty("shortRepresentation"))
                            object.shortRepresentation = $root.google.spanner.v1.PlanNode.ShortRepresentation.toObject(message.shortRepresentation, options);
                        if (message.metadata != null && message.hasOwnProperty("metadata"))
                            object.metadata = $root.google.protobuf.Struct.toObject(message.metadata, options);
                        if (message.executionStats != null && message.hasOwnProperty("executionStats"))
                            object.executionStats = $root.google.protobuf.Struct.toObject(message.executionStats, options);
                        return object;
                    };
    
                    /**
                     * Converts this PlanNode to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.PlanNode
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PlanNode.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    PlanNode.ChildLink = (function() {
    
                        /**
                         * Properties of a ChildLink.
                         * @memberof google.spanner.v1.PlanNode
                         * @interface IChildLink
                         * @property {number|null} [childIndex] ChildLink childIndex
                         * @property {string|null} [type] ChildLink type
                         * @property {string|null} [variable] ChildLink variable
                         */
    
                        /**
                         * Constructs a new ChildLink.
                         * @memberof google.spanner.v1.PlanNode
                         * @classdesc Represents a ChildLink.
                         * @implements IChildLink
                         * @constructor
                         * @param {google.spanner.v1.PlanNode.IChildLink=} [properties] Properties to set
                         */
                        function ChildLink(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ChildLink childIndex.
                         * @member {number} childIndex
                         * @memberof google.spanner.v1.PlanNode.ChildLink
                         * @instance
                         */
                        ChildLink.prototype.childIndex = 0;
    
                        /**
                         * ChildLink type.
                         * @member {string} type
                         * @memberof google.spanner.v1.PlanNode.ChildLink
                         * @instance
                         */
                        ChildLink.prototype.type = "";
    
                        /**
                         * ChildLink variable.
                         * @member {string} variable
                         * @memberof google.spanner.v1.PlanNode.ChildLink
                         * @instance
                         */
                        ChildLink.prototype.variable = "";
    
                        /**
                         * Creates a new ChildLink instance using the specified properties.
                         * @function create
                         * @memberof google.spanner.v1.PlanNode.ChildLink
                         * @static
                         * @param {google.spanner.v1.PlanNode.IChildLink=} [properties] Properties to set
                         * @returns {google.spanner.v1.PlanNode.ChildLink} ChildLink instance
                         */
                        ChildLink.create = function create(properties) {
                            return new ChildLink(properties);
                        };
    
                        /**
                         * Encodes the specified ChildLink message. Does not implicitly {@link google.spanner.v1.PlanNode.ChildLink.verify|verify} messages.
                         * @function encode
                         * @memberof google.spanner.v1.PlanNode.ChildLink
                         * @static
                         * @param {google.spanner.v1.PlanNode.IChildLink} message ChildLink message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ChildLink.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.childIndex != null && Object.hasOwnProperty.call(message, "childIndex"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.childIndex);
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.type);
                            if (message.variable != null && Object.hasOwnProperty.call(message, "variable"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.variable);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ChildLink message, length delimited. Does not implicitly {@link google.spanner.v1.PlanNode.ChildLink.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.spanner.v1.PlanNode.ChildLink
                         * @static
                         * @param {google.spanner.v1.PlanNode.IChildLink} message ChildLink message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ChildLink.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ChildLink message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.spanner.v1.PlanNode.ChildLink
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.spanner.v1.PlanNode.ChildLink} ChildLink
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ChildLink.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.PlanNode.ChildLink();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.childIndex = reader.int32();
                                    break;
                                case 2:
                                    message.type = reader.string();
                                    break;
                                case 3:
                                    message.variable = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ChildLink message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.spanner.v1.PlanNode.ChildLink
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.spanner.v1.PlanNode.ChildLink} ChildLink
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ChildLink.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ChildLink message.
                         * @function verify
                         * @memberof google.spanner.v1.PlanNode.ChildLink
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ChildLink.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.childIndex != null && message.hasOwnProperty("childIndex"))
                                if (!$util.isInteger(message.childIndex))
                                    return "childIndex: integer expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                if (!$util.isString(message.type))
                                    return "type: string expected";
                            if (message.variable != null && message.hasOwnProperty("variable"))
                                if (!$util.isString(message.variable))
                                    return "variable: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ChildLink message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.spanner.v1.PlanNode.ChildLink
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.spanner.v1.PlanNode.ChildLink} ChildLink
                         */
                        ChildLink.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.spanner.v1.PlanNode.ChildLink)
                                return object;
                            var message = new $root.google.spanner.v1.PlanNode.ChildLink();
                            if (object.childIndex != null)
                                message.childIndex = object.childIndex | 0;
                            if (object.type != null)
                                message.type = String(object.type);
                            if (object.variable != null)
                                message.variable = String(object.variable);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ChildLink message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.spanner.v1.PlanNode.ChildLink
                         * @static
                         * @param {google.spanner.v1.PlanNode.ChildLink} message ChildLink
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ChildLink.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.childIndex = 0;
                                object.type = "";
                                object.variable = "";
                            }
                            if (message.childIndex != null && message.hasOwnProperty("childIndex"))
                                object.childIndex = message.childIndex;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = message.type;
                            if (message.variable != null && message.hasOwnProperty("variable"))
                                object.variable = message.variable;
                            return object;
                        };
    
                        /**
                         * Converts this ChildLink to JSON.
                         * @function toJSON
                         * @memberof google.spanner.v1.PlanNode.ChildLink
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ChildLink.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ChildLink;
                    })();
    
                    PlanNode.ShortRepresentation = (function() {
    
                        /**
                         * Properties of a ShortRepresentation.
                         * @memberof google.spanner.v1.PlanNode
                         * @interface IShortRepresentation
                         * @property {string|null} [description] ShortRepresentation description
                         * @property {Object.<string,number>|null} [subqueries] ShortRepresentation subqueries
                         */
    
                        /**
                         * Constructs a new ShortRepresentation.
                         * @memberof google.spanner.v1.PlanNode
                         * @classdesc Represents a ShortRepresentation.
                         * @implements IShortRepresentation
                         * @constructor
                         * @param {google.spanner.v1.PlanNode.IShortRepresentation=} [properties] Properties to set
                         */
                        function ShortRepresentation(properties) {
                            this.subqueries = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ShortRepresentation description.
                         * @member {string} description
                         * @memberof google.spanner.v1.PlanNode.ShortRepresentation
                         * @instance
                         */
                        ShortRepresentation.prototype.description = "";
    
                        /**
                         * ShortRepresentation subqueries.
                         * @member {Object.<string,number>} subqueries
                         * @memberof google.spanner.v1.PlanNode.ShortRepresentation
                         * @instance
                         */
                        ShortRepresentation.prototype.subqueries = $util.emptyObject;
    
                        /**
                         * Creates a new ShortRepresentation instance using the specified properties.
                         * @function create
                         * @memberof google.spanner.v1.PlanNode.ShortRepresentation
                         * @static
                         * @param {google.spanner.v1.PlanNode.IShortRepresentation=} [properties] Properties to set
                         * @returns {google.spanner.v1.PlanNode.ShortRepresentation} ShortRepresentation instance
                         */
                        ShortRepresentation.create = function create(properties) {
                            return new ShortRepresentation(properties);
                        };
    
                        /**
                         * Encodes the specified ShortRepresentation message. Does not implicitly {@link google.spanner.v1.PlanNode.ShortRepresentation.verify|verify} messages.
                         * @function encode
                         * @memberof google.spanner.v1.PlanNode.ShortRepresentation
                         * @static
                         * @param {google.spanner.v1.PlanNode.IShortRepresentation} message ShortRepresentation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ShortRepresentation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.description);
                            if (message.subqueries != null && Object.hasOwnProperty.call(message, "subqueries"))
                                for (var keys = Object.keys(message.subqueries), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 0 =*/16).int32(message.subqueries[keys[i]]).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ShortRepresentation message, length delimited. Does not implicitly {@link google.spanner.v1.PlanNode.ShortRepresentation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.spanner.v1.PlanNode.ShortRepresentation
                         * @static
                         * @param {google.spanner.v1.PlanNode.IShortRepresentation} message ShortRepresentation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ShortRepresentation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ShortRepresentation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.spanner.v1.PlanNode.ShortRepresentation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.spanner.v1.PlanNode.ShortRepresentation} ShortRepresentation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ShortRepresentation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.PlanNode.ShortRepresentation(), key;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.description = reader.string();
                                    break;
                                case 2:
                                    reader.skip().pos++;
                                    if (message.subqueries === $util.emptyObject)
                                        message.subqueries = {};
                                    key = reader.string();
                                    reader.pos++;
                                    message.subqueries[key] = reader.int32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ShortRepresentation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.spanner.v1.PlanNode.ShortRepresentation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.spanner.v1.PlanNode.ShortRepresentation} ShortRepresentation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ShortRepresentation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ShortRepresentation message.
                         * @function verify
                         * @memberof google.spanner.v1.PlanNode.ShortRepresentation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ShortRepresentation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.description != null && message.hasOwnProperty("description"))
                                if (!$util.isString(message.description))
                                    return "description: string expected";
                            if (message.subqueries != null && message.hasOwnProperty("subqueries")) {
                                if (!$util.isObject(message.subqueries))
                                    return "subqueries: object expected";
                                var key = Object.keys(message.subqueries);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isInteger(message.subqueries[key[i]]))
                                        return "subqueries: integer{k:string} expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a ShortRepresentation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.spanner.v1.PlanNode.ShortRepresentation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.spanner.v1.PlanNode.ShortRepresentation} ShortRepresentation
                         */
                        ShortRepresentation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.spanner.v1.PlanNode.ShortRepresentation)
                                return object;
                            var message = new $root.google.spanner.v1.PlanNode.ShortRepresentation();
                            if (object.description != null)
                                message.description = String(object.description);
                            if (object.subqueries) {
                                if (typeof object.subqueries !== "object")
                                    throw TypeError(".google.spanner.v1.PlanNode.ShortRepresentation.subqueries: object expected");
                                message.subqueries = {};
                                for (var keys = Object.keys(object.subqueries), i = 0; i < keys.length; ++i)
                                    message.subqueries[keys[i]] = object.subqueries[keys[i]] | 0;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ShortRepresentation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.spanner.v1.PlanNode.ShortRepresentation
                         * @static
                         * @param {google.spanner.v1.PlanNode.ShortRepresentation} message ShortRepresentation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ShortRepresentation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.objects || options.defaults)
                                object.subqueries = {};
                            if (options.defaults)
                                object.description = "";
                            if (message.description != null && message.hasOwnProperty("description"))
                                object.description = message.description;
                            var keys2;
                            if (message.subqueries && (keys2 = Object.keys(message.subqueries)).length) {
                                object.subqueries = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.subqueries[keys2[j]] = message.subqueries[keys2[j]];
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ShortRepresentation to JSON.
                         * @function toJSON
                         * @memberof google.spanner.v1.PlanNode.ShortRepresentation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ShortRepresentation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ShortRepresentation;
                    })();
    
                    /**
                     * Kind enum.
                     * @name google.spanner.v1.PlanNode.Kind
                     * @enum {number}
                     * @property {number} KIND_UNSPECIFIED=0 KIND_UNSPECIFIED value
                     * @property {number} RELATIONAL=1 RELATIONAL value
                     * @property {number} SCALAR=2 SCALAR value
                     */
                    PlanNode.Kind = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "KIND_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "RELATIONAL"] = 1;
                        values[valuesById[2] = "SCALAR"] = 2;
                        return values;
                    })();
    
                    return PlanNode;
                })();
    
                v1.QueryPlan = (function() {
    
                    /**
                     * Properties of a QueryPlan.
                     * @memberof google.spanner.v1
                     * @interface IQueryPlan
                     * @property {Array.<google.spanner.v1.IPlanNode>|null} [planNodes] QueryPlan planNodes
                     */
    
                    /**
                     * Constructs a new QueryPlan.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a QueryPlan.
                     * @implements IQueryPlan
                     * @constructor
                     * @param {google.spanner.v1.IQueryPlan=} [properties] Properties to set
                     */
                    function QueryPlan(properties) {
                        this.planNodes = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * QueryPlan planNodes.
                     * @member {Array.<google.spanner.v1.IPlanNode>} planNodes
                     * @memberof google.spanner.v1.QueryPlan
                     * @instance
                     */
                    QueryPlan.prototype.planNodes = $util.emptyArray;
    
                    /**
                     * Creates a new QueryPlan instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.QueryPlan
                     * @static
                     * @param {google.spanner.v1.IQueryPlan=} [properties] Properties to set
                     * @returns {google.spanner.v1.QueryPlan} QueryPlan instance
                     */
                    QueryPlan.create = function create(properties) {
                        return new QueryPlan(properties);
                    };
    
                    /**
                     * Encodes the specified QueryPlan message. Does not implicitly {@link google.spanner.v1.QueryPlan.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.QueryPlan
                     * @static
                     * @param {google.spanner.v1.IQueryPlan} message QueryPlan message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPlan.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.planNodes != null && message.planNodes.length)
                            for (var i = 0; i < message.planNodes.length; ++i)
                                $root.google.spanner.v1.PlanNode.encode(message.planNodes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified QueryPlan message, length delimited. Does not implicitly {@link google.spanner.v1.QueryPlan.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.QueryPlan
                     * @static
                     * @param {google.spanner.v1.IQueryPlan} message QueryPlan message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPlan.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a QueryPlan message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.QueryPlan
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.QueryPlan} QueryPlan
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPlan.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.QueryPlan();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.planNodes && message.planNodes.length))
                                    message.planNodes = [];
                                message.planNodes.push($root.google.spanner.v1.PlanNode.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a QueryPlan message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.QueryPlan
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.QueryPlan} QueryPlan
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPlan.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a QueryPlan message.
                     * @function verify
                     * @memberof google.spanner.v1.QueryPlan
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryPlan.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.planNodes != null && message.hasOwnProperty("planNodes")) {
                            if (!Array.isArray(message.planNodes))
                                return "planNodes: array expected";
                            for (var i = 0; i < message.planNodes.length; ++i) {
                                var error = $root.google.spanner.v1.PlanNode.verify(message.planNodes[i]);
                                if (error)
                                    return "planNodes." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a QueryPlan message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.QueryPlan
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.QueryPlan} QueryPlan
                     */
                    QueryPlan.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.QueryPlan)
                            return object;
                        var message = new $root.google.spanner.v1.QueryPlan();
                        if (object.planNodes) {
                            if (!Array.isArray(object.planNodes))
                                throw TypeError(".google.spanner.v1.QueryPlan.planNodes: array expected");
                            message.planNodes = [];
                            for (var i = 0; i < object.planNodes.length; ++i) {
                                if (typeof object.planNodes[i] !== "object")
                                    throw TypeError(".google.spanner.v1.QueryPlan.planNodes: object expected");
                                message.planNodes[i] = $root.google.spanner.v1.PlanNode.fromObject(object.planNodes[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a QueryPlan message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.QueryPlan
                     * @static
                     * @param {google.spanner.v1.QueryPlan} message QueryPlan
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryPlan.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.planNodes = [];
                        if (message.planNodes && message.planNodes.length) {
                            object.planNodes = [];
                            for (var j = 0; j < message.planNodes.length; ++j)
                                object.planNodes[j] = $root.google.spanner.v1.PlanNode.toObject(message.planNodes[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this QueryPlan to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.QueryPlan
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryPlan.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return QueryPlan;
                })();
    
                v1.ResultSet = (function() {
    
                    /**
                     * Properties of a ResultSet.
                     * @memberof google.spanner.v1
                     * @interface IResultSet
                     * @property {google.spanner.v1.IResultSetMetadata|null} [metadata] ResultSet metadata
                     * @property {Array.<google.protobuf.IListValue>|null} [rows] ResultSet rows
                     * @property {google.spanner.v1.IResultSetStats|null} [stats] ResultSet stats
                     */
    
                    /**
                     * Constructs a new ResultSet.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a ResultSet.
                     * @implements IResultSet
                     * @constructor
                     * @param {google.spanner.v1.IResultSet=} [properties] Properties to set
                     */
                    function ResultSet(properties) {
                        this.rows = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ResultSet metadata.
                     * @member {google.spanner.v1.IResultSetMetadata|null|undefined} metadata
                     * @memberof google.spanner.v1.ResultSet
                     * @instance
                     */
                    ResultSet.prototype.metadata = null;
    
                    /**
                     * ResultSet rows.
                     * @member {Array.<google.protobuf.IListValue>} rows
                     * @memberof google.spanner.v1.ResultSet
                     * @instance
                     */
                    ResultSet.prototype.rows = $util.emptyArray;
    
                    /**
                     * ResultSet stats.
                     * @member {google.spanner.v1.IResultSetStats|null|undefined} stats
                     * @memberof google.spanner.v1.ResultSet
                     * @instance
                     */
                    ResultSet.prototype.stats = null;
    
                    /**
                     * Creates a new ResultSet instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.ResultSet
                     * @static
                     * @param {google.spanner.v1.IResultSet=} [properties] Properties to set
                     * @returns {google.spanner.v1.ResultSet} ResultSet instance
                     */
                    ResultSet.create = function create(properties) {
                        return new ResultSet(properties);
                    };
    
                    /**
                     * Encodes the specified ResultSet message. Does not implicitly {@link google.spanner.v1.ResultSet.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.ResultSet
                     * @static
                     * @param {google.spanner.v1.IResultSet} message ResultSet message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ResultSet.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                            $root.google.spanner.v1.ResultSetMetadata.encode(message.metadata, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.rows != null && message.rows.length)
                            for (var i = 0; i < message.rows.length; ++i)
                                $root.google.protobuf.ListValue.encode(message.rows[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.stats != null && Object.hasOwnProperty.call(message, "stats"))
                            $root.google.spanner.v1.ResultSetStats.encode(message.stats, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ResultSet message, length delimited. Does not implicitly {@link google.spanner.v1.ResultSet.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.ResultSet
                     * @static
                     * @param {google.spanner.v1.IResultSet} message ResultSet message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ResultSet.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ResultSet message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.ResultSet
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.ResultSet} ResultSet
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ResultSet.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.ResultSet();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.metadata = $root.google.spanner.v1.ResultSetMetadata.decode(reader, reader.uint32());
                                break;
                            case 2:
                                if (!(message.rows && message.rows.length))
                                    message.rows = [];
                                message.rows.push($root.google.protobuf.ListValue.decode(reader, reader.uint32()));
                                break;
                            case 3:
                                message.stats = $root.google.spanner.v1.ResultSetStats.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ResultSet message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.ResultSet
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.ResultSet} ResultSet
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ResultSet.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ResultSet message.
                     * @function verify
                     * @memberof google.spanner.v1.ResultSet
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ResultSet.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.metadata != null && message.hasOwnProperty("metadata")) {
                            var error = $root.google.spanner.v1.ResultSetMetadata.verify(message.metadata);
                            if (error)
                                return "metadata." + error;
                        }
                        if (message.rows != null && message.hasOwnProperty("rows")) {
                            if (!Array.isArray(message.rows))
                                return "rows: array expected";
                            for (var i = 0; i < message.rows.length; ++i) {
                                var error = $root.google.protobuf.ListValue.verify(message.rows[i]);
                                if (error)
                                    return "rows." + error;
                            }
                        }
                        if (message.stats != null && message.hasOwnProperty("stats")) {
                            var error = $root.google.spanner.v1.ResultSetStats.verify(message.stats);
                            if (error)
                                return "stats." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a ResultSet message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.ResultSet
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.ResultSet} ResultSet
                     */
                    ResultSet.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.ResultSet)
                            return object;
                        var message = new $root.google.spanner.v1.ResultSet();
                        if (object.metadata != null) {
                            if (typeof object.metadata !== "object")
                                throw TypeError(".google.spanner.v1.ResultSet.metadata: object expected");
                            message.metadata = $root.google.spanner.v1.ResultSetMetadata.fromObject(object.metadata);
                        }
                        if (object.rows) {
                            if (!Array.isArray(object.rows))
                                throw TypeError(".google.spanner.v1.ResultSet.rows: array expected");
                            message.rows = [];
                            for (var i = 0; i < object.rows.length; ++i) {
                                if (typeof object.rows[i] !== "object")
                                    throw TypeError(".google.spanner.v1.ResultSet.rows: object expected");
                                message.rows[i] = $root.google.protobuf.ListValue.fromObject(object.rows[i]);
                            }
                        }
                        if (object.stats != null) {
                            if (typeof object.stats !== "object")
                                throw TypeError(".google.spanner.v1.ResultSet.stats: object expected");
                            message.stats = $root.google.spanner.v1.ResultSetStats.fromObject(object.stats);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ResultSet message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.ResultSet
                     * @static
                     * @param {google.spanner.v1.ResultSet} message ResultSet
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ResultSet.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.rows = [];
                        if (options.defaults) {
                            object.metadata = null;
                            object.stats = null;
                        }
                        if (message.metadata != null && message.hasOwnProperty("metadata"))
                            object.metadata = $root.google.spanner.v1.ResultSetMetadata.toObject(message.metadata, options);
                        if (message.rows && message.rows.length) {
                            object.rows = [];
                            for (var j = 0; j < message.rows.length; ++j)
                                object.rows[j] = $root.google.protobuf.ListValue.toObject(message.rows[j], options);
                        }
                        if (message.stats != null && message.hasOwnProperty("stats"))
                            object.stats = $root.google.spanner.v1.ResultSetStats.toObject(message.stats, options);
                        return object;
                    };
    
                    /**
                     * Converts this ResultSet to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.ResultSet
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ResultSet.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ResultSet;
                })();
    
                v1.PartialResultSet = (function() {
    
                    /**
                     * Properties of a PartialResultSet.
                     * @memberof google.spanner.v1
                     * @interface IPartialResultSet
                     * @property {google.spanner.v1.IResultSetMetadata|null} [metadata] PartialResultSet metadata
                     * @property {Array.<google.protobuf.IValue>|null} [values] PartialResultSet values
                     * @property {boolean|null} [chunkedValue] PartialResultSet chunkedValue
                     * @property {Uint8Array|null} [resumeToken] PartialResultSet resumeToken
                     * @property {google.spanner.v1.IResultSetStats|null} [stats] PartialResultSet stats
                     */
    
                    /**
                     * Constructs a new PartialResultSet.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a PartialResultSet.
                     * @implements IPartialResultSet
                     * @constructor
                     * @param {google.spanner.v1.IPartialResultSet=} [properties] Properties to set
                     */
                    function PartialResultSet(properties) {
                        this.values = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PartialResultSet metadata.
                     * @member {google.spanner.v1.IResultSetMetadata|null|undefined} metadata
                     * @memberof google.spanner.v1.PartialResultSet
                     * @instance
                     */
                    PartialResultSet.prototype.metadata = null;
    
                    /**
                     * PartialResultSet values.
                     * @member {Array.<google.protobuf.IValue>} values
                     * @memberof google.spanner.v1.PartialResultSet
                     * @instance
                     */
                    PartialResultSet.prototype.values = $util.emptyArray;
    
                    /**
                     * PartialResultSet chunkedValue.
                     * @member {boolean} chunkedValue
                     * @memberof google.spanner.v1.PartialResultSet
                     * @instance
                     */
                    PartialResultSet.prototype.chunkedValue = false;
    
                    /**
                     * PartialResultSet resumeToken.
                     * @member {Uint8Array} resumeToken
                     * @memberof google.spanner.v1.PartialResultSet
                     * @instance
                     */
                    PartialResultSet.prototype.resumeToken = $util.newBuffer([]);
    
                    /**
                     * PartialResultSet stats.
                     * @member {google.spanner.v1.IResultSetStats|null|undefined} stats
                     * @memberof google.spanner.v1.PartialResultSet
                     * @instance
                     */
                    PartialResultSet.prototype.stats = null;
    
                    /**
                     * Creates a new PartialResultSet instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.PartialResultSet
                     * @static
                     * @param {google.spanner.v1.IPartialResultSet=} [properties] Properties to set
                     * @returns {google.spanner.v1.PartialResultSet} PartialResultSet instance
                     */
                    PartialResultSet.create = function create(properties) {
                        return new PartialResultSet(properties);
                    };
    
                    /**
                     * Encodes the specified PartialResultSet message. Does not implicitly {@link google.spanner.v1.PartialResultSet.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.PartialResultSet
                     * @static
                     * @param {google.spanner.v1.IPartialResultSet} message PartialResultSet message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PartialResultSet.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                            $root.google.spanner.v1.ResultSetMetadata.encode(message.metadata, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.values != null && message.values.length)
                            for (var i = 0; i < message.values.length; ++i)
                                $root.google.protobuf.Value.encode(message.values[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.chunkedValue != null && Object.hasOwnProperty.call(message, "chunkedValue"))
                            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.chunkedValue);
                        if (message.resumeToken != null && Object.hasOwnProperty.call(message, "resumeToken"))
                            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.resumeToken);
                        if (message.stats != null && Object.hasOwnProperty.call(message, "stats"))
                            $root.google.spanner.v1.ResultSetStats.encode(message.stats, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PartialResultSet message, length delimited. Does not implicitly {@link google.spanner.v1.PartialResultSet.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.PartialResultSet
                     * @static
                     * @param {google.spanner.v1.IPartialResultSet} message PartialResultSet message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PartialResultSet.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PartialResultSet message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.PartialResultSet
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.PartialResultSet} PartialResultSet
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PartialResultSet.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.PartialResultSet();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.metadata = $root.google.spanner.v1.ResultSetMetadata.decode(reader, reader.uint32());
                                break;
                            case 2:
                                if (!(message.values && message.values.length))
                                    message.values = [];
                                message.values.push($root.google.protobuf.Value.decode(reader, reader.uint32()));
                                break;
                            case 3:
                                message.chunkedValue = reader.bool();
                                break;
                            case 4:
                                message.resumeToken = reader.bytes();
                                break;
                            case 5:
                                message.stats = $root.google.spanner.v1.ResultSetStats.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PartialResultSet message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.PartialResultSet
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.PartialResultSet} PartialResultSet
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PartialResultSet.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PartialResultSet message.
                     * @function verify
                     * @memberof google.spanner.v1.PartialResultSet
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PartialResultSet.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.metadata != null && message.hasOwnProperty("metadata")) {
                            var error = $root.google.spanner.v1.ResultSetMetadata.verify(message.metadata);
                            if (error)
                                return "metadata." + error;
                        }
                        if (message.values != null && message.hasOwnProperty("values")) {
                            if (!Array.isArray(message.values))
                                return "values: array expected";
                            for (var i = 0; i < message.values.length; ++i) {
                                var error = $root.google.protobuf.Value.verify(message.values[i]);
                                if (error)
                                    return "values." + error;
                            }
                        }
                        if (message.chunkedValue != null && message.hasOwnProperty("chunkedValue"))
                            if (typeof message.chunkedValue !== "boolean")
                                return "chunkedValue: boolean expected";
                        if (message.resumeToken != null && message.hasOwnProperty("resumeToken"))
                            if (!(message.resumeToken && typeof message.resumeToken.length === "number" || $util.isString(message.resumeToken)))
                                return "resumeToken: buffer expected";
                        if (message.stats != null && message.hasOwnProperty("stats")) {
                            var error = $root.google.spanner.v1.ResultSetStats.verify(message.stats);
                            if (error)
                                return "stats." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a PartialResultSet message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.PartialResultSet
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.PartialResultSet} PartialResultSet
                     */
                    PartialResultSet.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.PartialResultSet)
                            return object;
                        var message = new $root.google.spanner.v1.PartialResultSet();
                        if (object.metadata != null) {
                            if (typeof object.metadata !== "object")
                                throw TypeError(".google.spanner.v1.PartialResultSet.metadata: object expected");
                            message.metadata = $root.google.spanner.v1.ResultSetMetadata.fromObject(object.metadata);
                        }
                        if (object.values) {
                            if (!Array.isArray(object.values))
                                throw TypeError(".google.spanner.v1.PartialResultSet.values: array expected");
                            message.values = [];
                            for (var i = 0; i < object.values.length; ++i) {
                                if (typeof object.values[i] !== "object")
                                    throw TypeError(".google.spanner.v1.PartialResultSet.values: object expected");
                                message.values[i] = $root.google.protobuf.Value.fromObject(object.values[i]);
                            }
                        }
                        if (object.chunkedValue != null)
                            message.chunkedValue = Boolean(object.chunkedValue);
                        if (object.resumeToken != null)
                            if (typeof object.resumeToken === "string")
                                $util.base64.decode(object.resumeToken, message.resumeToken = $util.newBuffer($util.base64.length(object.resumeToken)), 0);
                            else if (object.resumeToken.length)
                                message.resumeToken = object.resumeToken;
                        if (object.stats != null) {
                            if (typeof object.stats !== "object")
                                throw TypeError(".google.spanner.v1.PartialResultSet.stats: object expected");
                            message.stats = $root.google.spanner.v1.ResultSetStats.fromObject(object.stats);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PartialResultSet message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.PartialResultSet
                     * @static
                     * @param {google.spanner.v1.PartialResultSet} message PartialResultSet
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PartialResultSet.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.values = [];
                        if (options.defaults) {
                            object.metadata = null;
                            object.chunkedValue = false;
                            if (options.bytes === String)
                                object.resumeToken = "";
                            else {
                                object.resumeToken = [];
                                if (options.bytes !== Array)
                                    object.resumeToken = $util.newBuffer(object.resumeToken);
                            }
                            object.stats = null;
                        }
                        if (message.metadata != null && message.hasOwnProperty("metadata"))
                            object.metadata = $root.google.spanner.v1.ResultSetMetadata.toObject(message.metadata, options);
                        if (message.values && message.values.length) {
                            object.values = [];
                            for (var j = 0; j < message.values.length; ++j)
                                object.values[j] = $root.google.protobuf.Value.toObject(message.values[j], options);
                        }
                        if (message.chunkedValue != null && message.hasOwnProperty("chunkedValue"))
                            object.chunkedValue = message.chunkedValue;
                        if (message.resumeToken != null && message.hasOwnProperty("resumeToken"))
                            object.resumeToken = options.bytes === String ? $util.base64.encode(message.resumeToken, 0, message.resumeToken.length) : options.bytes === Array ? Array.prototype.slice.call(message.resumeToken) : message.resumeToken;
                        if (message.stats != null && message.hasOwnProperty("stats"))
                            object.stats = $root.google.spanner.v1.ResultSetStats.toObject(message.stats, options);
                        return object;
                    };
    
                    /**
                     * Converts this PartialResultSet to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.PartialResultSet
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PartialResultSet.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PartialResultSet;
                })();
    
                v1.ResultSetMetadata = (function() {
    
                    /**
                     * Properties of a ResultSetMetadata.
                     * @memberof google.spanner.v1
                     * @interface IResultSetMetadata
                     * @property {google.spanner.v1.IStructType|null} [rowType] ResultSetMetadata rowType
                     * @property {google.spanner.v1.ITransaction|null} [transaction] ResultSetMetadata transaction
                     */
    
                    /**
                     * Constructs a new ResultSetMetadata.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a ResultSetMetadata.
                     * @implements IResultSetMetadata
                     * @constructor
                     * @param {google.spanner.v1.IResultSetMetadata=} [properties] Properties to set
                     */
                    function ResultSetMetadata(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ResultSetMetadata rowType.
                     * @member {google.spanner.v1.IStructType|null|undefined} rowType
                     * @memberof google.spanner.v1.ResultSetMetadata
                     * @instance
                     */
                    ResultSetMetadata.prototype.rowType = null;
    
                    /**
                     * ResultSetMetadata transaction.
                     * @member {google.spanner.v1.ITransaction|null|undefined} transaction
                     * @memberof google.spanner.v1.ResultSetMetadata
                     * @instance
                     */
                    ResultSetMetadata.prototype.transaction = null;
    
                    /**
                     * Creates a new ResultSetMetadata instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.ResultSetMetadata
                     * @static
                     * @param {google.spanner.v1.IResultSetMetadata=} [properties] Properties to set
                     * @returns {google.spanner.v1.ResultSetMetadata} ResultSetMetadata instance
                     */
                    ResultSetMetadata.create = function create(properties) {
                        return new ResultSetMetadata(properties);
                    };
    
                    /**
                     * Encodes the specified ResultSetMetadata message. Does not implicitly {@link google.spanner.v1.ResultSetMetadata.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.ResultSetMetadata
                     * @static
                     * @param {google.spanner.v1.IResultSetMetadata} message ResultSetMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ResultSetMetadata.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.rowType != null && Object.hasOwnProperty.call(message, "rowType"))
                            $root.google.spanner.v1.StructType.encode(message.rowType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.transaction != null && Object.hasOwnProperty.call(message, "transaction"))
                            $root.google.spanner.v1.Transaction.encode(message.transaction, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ResultSetMetadata message, length delimited. Does not implicitly {@link google.spanner.v1.ResultSetMetadata.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.ResultSetMetadata
                     * @static
                     * @param {google.spanner.v1.IResultSetMetadata} message ResultSetMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ResultSetMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ResultSetMetadata message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.ResultSetMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.ResultSetMetadata} ResultSetMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ResultSetMetadata.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.ResultSetMetadata();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.rowType = $root.google.spanner.v1.StructType.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.transaction = $root.google.spanner.v1.Transaction.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ResultSetMetadata message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.ResultSetMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.ResultSetMetadata} ResultSetMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ResultSetMetadata.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ResultSetMetadata message.
                     * @function verify
                     * @memberof google.spanner.v1.ResultSetMetadata
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ResultSetMetadata.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.rowType != null && message.hasOwnProperty("rowType")) {
                            var error = $root.google.spanner.v1.StructType.verify(message.rowType);
                            if (error)
                                return "rowType." + error;
                        }
                        if (message.transaction != null && message.hasOwnProperty("transaction")) {
                            var error = $root.google.spanner.v1.Transaction.verify(message.transaction);
                            if (error)
                                return "transaction." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a ResultSetMetadata message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.ResultSetMetadata
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.ResultSetMetadata} ResultSetMetadata
                     */
                    ResultSetMetadata.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.ResultSetMetadata)
                            return object;
                        var message = new $root.google.spanner.v1.ResultSetMetadata();
                        if (object.rowType != null) {
                            if (typeof object.rowType !== "object")
                                throw TypeError(".google.spanner.v1.ResultSetMetadata.rowType: object expected");
                            message.rowType = $root.google.spanner.v1.StructType.fromObject(object.rowType);
                        }
                        if (object.transaction != null) {
                            if (typeof object.transaction !== "object")
                                throw TypeError(".google.spanner.v1.ResultSetMetadata.transaction: object expected");
                            message.transaction = $root.google.spanner.v1.Transaction.fromObject(object.transaction);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ResultSetMetadata message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.ResultSetMetadata
                     * @static
                     * @param {google.spanner.v1.ResultSetMetadata} message ResultSetMetadata
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ResultSetMetadata.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.rowType = null;
                            object.transaction = null;
                        }
                        if (message.rowType != null && message.hasOwnProperty("rowType"))
                            object.rowType = $root.google.spanner.v1.StructType.toObject(message.rowType, options);
                        if (message.transaction != null && message.hasOwnProperty("transaction"))
                            object.transaction = $root.google.spanner.v1.Transaction.toObject(message.transaction, options);
                        return object;
                    };
    
                    /**
                     * Converts this ResultSetMetadata to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.ResultSetMetadata
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ResultSetMetadata.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ResultSetMetadata;
                })();
    
                v1.ResultSetStats = (function() {
    
                    /**
                     * Properties of a ResultSetStats.
                     * @memberof google.spanner.v1
                     * @interface IResultSetStats
                     * @property {google.spanner.v1.IQueryPlan|null} [queryPlan] ResultSetStats queryPlan
                     * @property {google.protobuf.IStruct|null} [queryStats] ResultSetStats queryStats
                     * @property {number|Long|null} [rowCountExact] ResultSetStats rowCountExact
                     * @property {number|Long|null} [rowCountLowerBound] ResultSetStats rowCountLowerBound
                     */
    
                    /**
                     * Constructs a new ResultSetStats.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a ResultSetStats.
                     * @implements IResultSetStats
                     * @constructor
                     * @param {google.spanner.v1.IResultSetStats=} [properties] Properties to set
                     */
                    function ResultSetStats(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ResultSetStats queryPlan.
                     * @member {google.spanner.v1.IQueryPlan|null|undefined} queryPlan
                     * @memberof google.spanner.v1.ResultSetStats
                     * @instance
                     */
                    ResultSetStats.prototype.queryPlan = null;
    
                    /**
                     * ResultSetStats queryStats.
                     * @member {google.protobuf.IStruct|null|undefined} queryStats
                     * @memberof google.spanner.v1.ResultSetStats
                     * @instance
                     */
                    ResultSetStats.prototype.queryStats = null;
    
                    /**
                     * ResultSetStats rowCountExact.
                     * @member {number|Long} rowCountExact
                     * @memberof google.spanner.v1.ResultSetStats
                     * @instance
                     */
                    ResultSetStats.prototype.rowCountExact = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * ResultSetStats rowCountLowerBound.
                     * @member {number|Long} rowCountLowerBound
                     * @memberof google.spanner.v1.ResultSetStats
                     * @instance
                     */
                    ResultSetStats.prototype.rowCountLowerBound = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * ResultSetStats rowCount.
                     * @member {"rowCountExact"|"rowCountLowerBound"|undefined} rowCount
                     * @memberof google.spanner.v1.ResultSetStats
                     * @instance
                     */
                    Object.defineProperty(ResultSetStats.prototype, "rowCount", {
                        get: $util.oneOfGetter($oneOfFields = ["rowCountExact", "rowCountLowerBound"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new ResultSetStats instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.ResultSetStats
                     * @static
                     * @param {google.spanner.v1.IResultSetStats=} [properties] Properties to set
                     * @returns {google.spanner.v1.ResultSetStats} ResultSetStats instance
                     */
                    ResultSetStats.create = function create(properties) {
                        return new ResultSetStats(properties);
                    };
    
                    /**
                     * Encodes the specified ResultSetStats message. Does not implicitly {@link google.spanner.v1.ResultSetStats.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.ResultSetStats
                     * @static
                     * @param {google.spanner.v1.IResultSetStats} message ResultSetStats message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ResultSetStats.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.queryPlan != null && Object.hasOwnProperty.call(message, "queryPlan"))
                            $root.google.spanner.v1.QueryPlan.encode(message.queryPlan, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.queryStats != null && Object.hasOwnProperty.call(message, "queryStats"))
                            $root.google.protobuf.Struct.encode(message.queryStats, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.rowCountExact != null && Object.hasOwnProperty.call(message, "rowCountExact"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.rowCountExact);
                        if (message.rowCountLowerBound != null && Object.hasOwnProperty.call(message, "rowCountLowerBound"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.rowCountLowerBound);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ResultSetStats message, length delimited. Does not implicitly {@link google.spanner.v1.ResultSetStats.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.ResultSetStats
                     * @static
                     * @param {google.spanner.v1.IResultSetStats} message ResultSetStats message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ResultSetStats.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ResultSetStats message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.ResultSetStats
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.ResultSetStats} ResultSetStats
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ResultSetStats.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.ResultSetStats();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.queryPlan = $root.google.spanner.v1.QueryPlan.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.queryStats = $root.google.protobuf.Struct.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.rowCountExact = reader.int64();
                                break;
                            case 4:
                                message.rowCountLowerBound = reader.int64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ResultSetStats message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.ResultSetStats
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.ResultSetStats} ResultSetStats
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ResultSetStats.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ResultSetStats message.
                     * @function verify
                     * @memberof google.spanner.v1.ResultSetStats
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ResultSetStats.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.queryPlan != null && message.hasOwnProperty("queryPlan")) {
                            var error = $root.google.spanner.v1.QueryPlan.verify(message.queryPlan);
                            if (error)
                                return "queryPlan." + error;
                        }
                        if (message.queryStats != null && message.hasOwnProperty("queryStats")) {
                            var error = $root.google.protobuf.Struct.verify(message.queryStats);
                            if (error)
                                return "queryStats." + error;
                        }
                        if (message.rowCountExact != null && message.hasOwnProperty("rowCountExact")) {
                            properties.rowCount = 1;
                            if (!$util.isInteger(message.rowCountExact) && !(message.rowCountExact && $util.isInteger(message.rowCountExact.low) && $util.isInteger(message.rowCountExact.high)))
                                return "rowCountExact: integer|Long expected";
                        }
                        if (message.rowCountLowerBound != null && message.hasOwnProperty("rowCountLowerBound")) {
                            if (properties.rowCount === 1)
                                return "rowCount: multiple values";
                            properties.rowCount = 1;
                            if (!$util.isInteger(message.rowCountLowerBound) && !(message.rowCountLowerBound && $util.isInteger(message.rowCountLowerBound.low) && $util.isInteger(message.rowCountLowerBound.high)))
                                return "rowCountLowerBound: integer|Long expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a ResultSetStats message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.ResultSetStats
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.ResultSetStats} ResultSetStats
                     */
                    ResultSetStats.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.ResultSetStats)
                            return object;
                        var message = new $root.google.spanner.v1.ResultSetStats();
                        if (object.queryPlan != null) {
                            if (typeof object.queryPlan !== "object")
                                throw TypeError(".google.spanner.v1.ResultSetStats.queryPlan: object expected");
                            message.queryPlan = $root.google.spanner.v1.QueryPlan.fromObject(object.queryPlan);
                        }
                        if (object.queryStats != null) {
                            if (typeof object.queryStats !== "object")
                                throw TypeError(".google.spanner.v1.ResultSetStats.queryStats: object expected");
                            message.queryStats = $root.google.protobuf.Struct.fromObject(object.queryStats);
                        }
                        if (object.rowCountExact != null)
                            if ($util.Long)
                                (message.rowCountExact = $util.Long.fromValue(object.rowCountExact)).unsigned = false;
                            else if (typeof object.rowCountExact === "string")
                                message.rowCountExact = parseInt(object.rowCountExact, 10);
                            else if (typeof object.rowCountExact === "number")
                                message.rowCountExact = object.rowCountExact;
                            else if (typeof object.rowCountExact === "object")
                                message.rowCountExact = new $util.LongBits(object.rowCountExact.low >>> 0, object.rowCountExact.high >>> 0).toNumber();
                        if (object.rowCountLowerBound != null)
                            if ($util.Long)
                                (message.rowCountLowerBound = $util.Long.fromValue(object.rowCountLowerBound)).unsigned = false;
                            else if (typeof object.rowCountLowerBound === "string")
                                message.rowCountLowerBound = parseInt(object.rowCountLowerBound, 10);
                            else if (typeof object.rowCountLowerBound === "number")
                                message.rowCountLowerBound = object.rowCountLowerBound;
                            else if (typeof object.rowCountLowerBound === "object")
                                message.rowCountLowerBound = new $util.LongBits(object.rowCountLowerBound.low >>> 0, object.rowCountLowerBound.high >>> 0).toNumber();
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ResultSetStats message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.ResultSetStats
                     * @static
                     * @param {google.spanner.v1.ResultSetStats} message ResultSetStats
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ResultSetStats.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.queryPlan = null;
                            object.queryStats = null;
                        }
                        if (message.queryPlan != null && message.hasOwnProperty("queryPlan"))
                            object.queryPlan = $root.google.spanner.v1.QueryPlan.toObject(message.queryPlan, options);
                        if (message.queryStats != null && message.hasOwnProperty("queryStats"))
                            object.queryStats = $root.google.protobuf.Struct.toObject(message.queryStats, options);
                        if (message.rowCountExact != null && message.hasOwnProperty("rowCountExact")) {
                            if (typeof message.rowCountExact === "number")
                                object.rowCountExact = options.longs === String ? String(message.rowCountExact) : message.rowCountExact;
                            else
                                object.rowCountExact = options.longs === String ? $util.Long.prototype.toString.call(message.rowCountExact) : options.longs === Number ? new $util.LongBits(message.rowCountExact.low >>> 0, message.rowCountExact.high >>> 0).toNumber() : message.rowCountExact;
                            if (options.oneofs)
                                object.rowCount = "rowCountExact";
                        }
                        if (message.rowCountLowerBound != null && message.hasOwnProperty("rowCountLowerBound")) {
                            if (typeof message.rowCountLowerBound === "number")
                                object.rowCountLowerBound = options.longs === String ? String(message.rowCountLowerBound) : message.rowCountLowerBound;
                            else
                                object.rowCountLowerBound = options.longs === String ? $util.Long.prototype.toString.call(message.rowCountLowerBound) : options.longs === Number ? new $util.LongBits(message.rowCountLowerBound.low >>> 0, message.rowCountLowerBound.high >>> 0).toNumber() : message.rowCountLowerBound;
                            if (options.oneofs)
                                object.rowCount = "rowCountLowerBound";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this ResultSetStats to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.ResultSetStats
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ResultSetStats.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ResultSetStats;
                })();
    
                v1.TransactionOptions = (function() {
    
                    /**
                     * Properties of a TransactionOptions.
                     * @memberof google.spanner.v1
                     * @interface ITransactionOptions
                     * @property {google.spanner.v1.TransactionOptions.IReadWrite|null} [readWrite] TransactionOptions readWrite
                     * @property {google.spanner.v1.TransactionOptions.IPartitionedDml|null} [partitionedDml] TransactionOptions partitionedDml
                     * @property {google.spanner.v1.TransactionOptions.IReadOnly|null} [readOnly] TransactionOptions readOnly
                     */
    
                    /**
                     * Constructs a new TransactionOptions.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a TransactionOptions.
                     * @implements ITransactionOptions
                     * @constructor
                     * @param {google.spanner.v1.ITransactionOptions=} [properties] Properties to set
                     */
                    function TransactionOptions(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * TransactionOptions readWrite.
                     * @member {google.spanner.v1.TransactionOptions.IReadWrite|null|undefined} readWrite
                     * @memberof google.spanner.v1.TransactionOptions
                     * @instance
                     */
                    TransactionOptions.prototype.readWrite = null;
    
                    /**
                     * TransactionOptions partitionedDml.
                     * @member {google.spanner.v1.TransactionOptions.IPartitionedDml|null|undefined} partitionedDml
                     * @memberof google.spanner.v1.TransactionOptions
                     * @instance
                     */
                    TransactionOptions.prototype.partitionedDml = null;
    
                    /**
                     * TransactionOptions readOnly.
                     * @member {google.spanner.v1.TransactionOptions.IReadOnly|null|undefined} readOnly
                     * @memberof google.spanner.v1.TransactionOptions
                     * @instance
                     */
                    TransactionOptions.prototype.readOnly = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * TransactionOptions mode.
                     * @member {"readWrite"|"partitionedDml"|"readOnly"|undefined} mode
                     * @memberof google.spanner.v1.TransactionOptions
                     * @instance
                     */
                    Object.defineProperty(TransactionOptions.prototype, "mode", {
                        get: $util.oneOfGetter($oneOfFields = ["readWrite", "partitionedDml", "readOnly"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new TransactionOptions instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.TransactionOptions
                     * @static
                     * @param {google.spanner.v1.ITransactionOptions=} [properties] Properties to set
                     * @returns {google.spanner.v1.TransactionOptions} TransactionOptions instance
                     */
                    TransactionOptions.create = function create(properties) {
                        return new TransactionOptions(properties);
                    };
    
                    /**
                     * Encodes the specified TransactionOptions message. Does not implicitly {@link google.spanner.v1.TransactionOptions.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.TransactionOptions
                     * @static
                     * @param {google.spanner.v1.ITransactionOptions} message TransactionOptions message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TransactionOptions.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.readWrite != null && Object.hasOwnProperty.call(message, "readWrite"))
                            $root.google.spanner.v1.TransactionOptions.ReadWrite.encode(message.readWrite, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.readOnly != null && Object.hasOwnProperty.call(message, "readOnly"))
                            $root.google.spanner.v1.TransactionOptions.ReadOnly.encode(message.readOnly, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.partitionedDml != null && Object.hasOwnProperty.call(message, "partitionedDml"))
                            $root.google.spanner.v1.TransactionOptions.PartitionedDml.encode(message.partitionedDml, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified TransactionOptions message, length delimited. Does not implicitly {@link google.spanner.v1.TransactionOptions.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.TransactionOptions
                     * @static
                     * @param {google.spanner.v1.ITransactionOptions} message TransactionOptions message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TransactionOptions.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a TransactionOptions message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.TransactionOptions
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.TransactionOptions} TransactionOptions
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TransactionOptions.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.TransactionOptions();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.readWrite = $root.google.spanner.v1.TransactionOptions.ReadWrite.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.partitionedDml = $root.google.spanner.v1.TransactionOptions.PartitionedDml.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.readOnly = $root.google.spanner.v1.TransactionOptions.ReadOnly.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a TransactionOptions message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.TransactionOptions
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.TransactionOptions} TransactionOptions
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TransactionOptions.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a TransactionOptions message.
                     * @function verify
                     * @memberof google.spanner.v1.TransactionOptions
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TransactionOptions.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.readWrite != null && message.hasOwnProperty("readWrite")) {
                            properties.mode = 1;
                            {
                                var error = $root.google.spanner.v1.TransactionOptions.ReadWrite.verify(message.readWrite);
                                if (error)
                                    return "readWrite." + error;
                            }
                        }
                        if (message.partitionedDml != null && message.hasOwnProperty("partitionedDml")) {
                            if (properties.mode === 1)
                                return "mode: multiple values";
                            properties.mode = 1;
                            {
                                var error = $root.google.spanner.v1.TransactionOptions.PartitionedDml.verify(message.partitionedDml);
                                if (error)
                                    return "partitionedDml." + error;
                            }
                        }
                        if (message.readOnly != null && message.hasOwnProperty("readOnly")) {
                            if (properties.mode === 1)
                                return "mode: multiple values";
                            properties.mode = 1;
                            {
                                var error = $root.google.spanner.v1.TransactionOptions.ReadOnly.verify(message.readOnly);
                                if (error)
                                    return "readOnly." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a TransactionOptions message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.TransactionOptions
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.TransactionOptions} TransactionOptions
                     */
                    TransactionOptions.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.TransactionOptions)
                            return object;
                        var message = new $root.google.spanner.v1.TransactionOptions();
                        if (object.readWrite != null) {
                            if (typeof object.readWrite !== "object")
                                throw TypeError(".google.spanner.v1.TransactionOptions.readWrite: object expected");
                            message.readWrite = $root.google.spanner.v1.TransactionOptions.ReadWrite.fromObject(object.readWrite);
                        }
                        if (object.partitionedDml != null) {
                            if (typeof object.partitionedDml !== "object")
                                throw TypeError(".google.spanner.v1.TransactionOptions.partitionedDml: object expected");
                            message.partitionedDml = $root.google.spanner.v1.TransactionOptions.PartitionedDml.fromObject(object.partitionedDml);
                        }
                        if (object.readOnly != null) {
                            if (typeof object.readOnly !== "object")
                                throw TypeError(".google.spanner.v1.TransactionOptions.readOnly: object expected");
                            message.readOnly = $root.google.spanner.v1.TransactionOptions.ReadOnly.fromObject(object.readOnly);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a TransactionOptions message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.TransactionOptions
                     * @static
                     * @param {google.spanner.v1.TransactionOptions} message TransactionOptions
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TransactionOptions.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.readWrite != null && message.hasOwnProperty("readWrite")) {
                            object.readWrite = $root.google.spanner.v1.TransactionOptions.ReadWrite.toObject(message.readWrite, options);
                            if (options.oneofs)
                                object.mode = "readWrite";
                        }
                        if (message.readOnly != null && message.hasOwnProperty("readOnly")) {
                            object.readOnly = $root.google.spanner.v1.TransactionOptions.ReadOnly.toObject(message.readOnly, options);
                            if (options.oneofs)
                                object.mode = "readOnly";
                        }
                        if (message.partitionedDml != null && message.hasOwnProperty("partitionedDml")) {
                            object.partitionedDml = $root.google.spanner.v1.TransactionOptions.PartitionedDml.toObject(message.partitionedDml, options);
                            if (options.oneofs)
                                object.mode = "partitionedDml";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this TransactionOptions to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.TransactionOptions
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TransactionOptions.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    TransactionOptions.ReadWrite = (function() {
    
                        /**
                         * Properties of a ReadWrite.
                         * @memberof google.spanner.v1.TransactionOptions
                         * @interface IReadWrite
                         */
    
                        /**
                         * Constructs a new ReadWrite.
                         * @memberof google.spanner.v1.TransactionOptions
                         * @classdesc Represents a ReadWrite.
                         * @implements IReadWrite
                         * @constructor
                         * @param {google.spanner.v1.TransactionOptions.IReadWrite=} [properties] Properties to set
                         */
                        function ReadWrite(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Creates a new ReadWrite instance using the specified properties.
                         * @function create
                         * @memberof google.spanner.v1.TransactionOptions.ReadWrite
                         * @static
                         * @param {google.spanner.v1.TransactionOptions.IReadWrite=} [properties] Properties to set
                         * @returns {google.spanner.v1.TransactionOptions.ReadWrite} ReadWrite instance
                         */
                        ReadWrite.create = function create(properties) {
                            return new ReadWrite(properties);
                        };
    
                        /**
                         * Encodes the specified ReadWrite message. Does not implicitly {@link google.spanner.v1.TransactionOptions.ReadWrite.verify|verify} messages.
                         * @function encode
                         * @memberof google.spanner.v1.TransactionOptions.ReadWrite
                         * @static
                         * @param {google.spanner.v1.TransactionOptions.IReadWrite} message ReadWrite message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ReadWrite.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ReadWrite message, length delimited. Does not implicitly {@link google.spanner.v1.TransactionOptions.ReadWrite.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.spanner.v1.TransactionOptions.ReadWrite
                         * @static
                         * @param {google.spanner.v1.TransactionOptions.IReadWrite} message ReadWrite message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ReadWrite.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ReadWrite message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.spanner.v1.TransactionOptions.ReadWrite
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.spanner.v1.TransactionOptions.ReadWrite} ReadWrite
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ReadWrite.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.TransactionOptions.ReadWrite();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ReadWrite message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.spanner.v1.TransactionOptions.ReadWrite
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.spanner.v1.TransactionOptions.ReadWrite} ReadWrite
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ReadWrite.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ReadWrite message.
                         * @function verify
                         * @memberof google.spanner.v1.TransactionOptions.ReadWrite
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ReadWrite.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };
    
                        /**
                         * Creates a ReadWrite message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.spanner.v1.TransactionOptions.ReadWrite
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.spanner.v1.TransactionOptions.ReadWrite} ReadWrite
                         */
                        ReadWrite.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.spanner.v1.TransactionOptions.ReadWrite)
                                return object;
                            return new $root.google.spanner.v1.TransactionOptions.ReadWrite();
                        };
    
                        /**
                         * Creates a plain object from a ReadWrite message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.spanner.v1.TransactionOptions.ReadWrite
                         * @static
                         * @param {google.spanner.v1.TransactionOptions.ReadWrite} message ReadWrite
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ReadWrite.toObject = function toObject() {
                            return {};
                        };
    
                        /**
                         * Converts this ReadWrite to JSON.
                         * @function toJSON
                         * @memberof google.spanner.v1.TransactionOptions.ReadWrite
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ReadWrite.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ReadWrite;
                    })();
    
                    TransactionOptions.PartitionedDml = (function() {
    
                        /**
                         * Properties of a PartitionedDml.
                         * @memberof google.spanner.v1.TransactionOptions
                         * @interface IPartitionedDml
                         */
    
                        /**
                         * Constructs a new PartitionedDml.
                         * @memberof google.spanner.v1.TransactionOptions
                         * @classdesc Represents a PartitionedDml.
                         * @implements IPartitionedDml
                         * @constructor
                         * @param {google.spanner.v1.TransactionOptions.IPartitionedDml=} [properties] Properties to set
                         */
                        function PartitionedDml(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Creates a new PartitionedDml instance using the specified properties.
                         * @function create
                         * @memberof google.spanner.v1.TransactionOptions.PartitionedDml
                         * @static
                         * @param {google.spanner.v1.TransactionOptions.IPartitionedDml=} [properties] Properties to set
                         * @returns {google.spanner.v1.TransactionOptions.PartitionedDml} PartitionedDml instance
                         */
                        PartitionedDml.create = function create(properties) {
                            return new PartitionedDml(properties);
                        };
    
                        /**
                         * Encodes the specified PartitionedDml message. Does not implicitly {@link google.spanner.v1.TransactionOptions.PartitionedDml.verify|verify} messages.
                         * @function encode
                         * @memberof google.spanner.v1.TransactionOptions.PartitionedDml
                         * @static
                         * @param {google.spanner.v1.TransactionOptions.IPartitionedDml} message PartitionedDml message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PartitionedDml.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified PartitionedDml message, length delimited. Does not implicitly {@link google.spanner.v1.TransactionOptions.PartitionedDml.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.spanner.v1.TransactionOptions.PartitionedDml
                         * @static
                         * @param {google.spanner.v1.TransactionOptions.IPartitionedDml} message PartitionedDml message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PartitionedDml.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a PartitionedDml message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.spanner.v1.TransactionOptions.PartitionedDml
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.spanner.v1.TransactionOptions.PartitionedDml} PartitionedDml
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PartitionedDml.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.TransactionOptions.PartitionedDml();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a PartitionedDml message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.spanner.v1.TransactionOptions.PartitionedDml
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.spanner.v1.TransactionOptions.PartitionedDml} PartitionedDml
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PartitionedDml.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a PartitionedDml message.
                         * @function verify
                         * @memberof google.spanner.v1.TransactionOptions.PartitionedDml
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PartitionedDml.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };
    
                        /**
                         * Creates a PartitionedDml message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.spanner.v1.TransactionOptions.PartitionedDml
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.spanner.v1.TransactionOptions.PartitionedDml} PartitionedDml
                         */
                        PartitionedDml.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.spanner.v1.TransactionOptions.PartitionedDml)
                                return object;
                            return new $root.google.spanner.v1.TransactionOptions.PartitionedDml();
                        };
    
                        /**
                         * Creates a plain object from a PartitionedDml message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.spanner.v1.TransactionOptions.PartitionedDml
                         * @static
                         * @param {google.spanner.v1.TransactionOptions.PartitionedDml} message PartitionedDml
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PartitionedDml.toObject = function toObject() {
                            return {};
                        };
    
                        /**
                         * Converts this PartitionedDml to JSON.
                         * @function toJSON
                         * @memberof google.spanner.v1.TransactionOptions.PartitionedDml
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PartitionedDml.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return PartitionedDml;
                    })();
    
                    TransactionOptions.ReadOnly = (function() {
    
                        /**
                         * Properties of a ReadOnly.
                         * @memberof google.spanner.v1.TransactionOptions
                         * @interface IReadOnly
                         * @property {boolean|null} [strong] ReadOnly strong
                         * @property {google.protobuf.ITimestamp|null} [minReadTimestamp] ReadOnly minReadTimestamp
                         * @property {google.protobuf.IDuration|null} [maxStaleness] ReadOnly maxStaleness
                         * @property {google.protobuf.ITimestamp|null} [readTimestamp] ReadOnly readTimestamp
                         * @property {google.protobuf.IDuration|null} [exactStaleness] ReadOnly exactStaleness
                         * @property {boolean|null} [returnReadTimestamp] ReadOnly returnReadTimestamp
                         */
    
                        /**
                         * Constructs a new ReadOnly.
                         * @memberof google.spanner.v1.TransactionOptions
                         * @classdesc Represents a ReadOnly.
                         * @implements IReadOnly
                         * @constructor
                         * @param {google.spanner.v1.TransactionOptions.IReadOnly=} [properties] Properties to set
                         */
                        function ReadOnly(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ReadOnly strong.
                         * @member {boolean} strong
                         * @memberof google.spanner.v1.TransactionOptions.ReadOnly
                         * @instance
                         */
                        ReadOnly.prototype.strong = false;
    
                        /**
                         * ReadOnly minReadTimestamp.
                         * @member {google.protobuf.ITimestamp|null|undefined} minReadTimestamp
                         * @memberof google.spanner.v1.TransactionOptions.ReadOnly
                         * @instance
                         */
                        ReadOnly.prototype.minReadTimestamp = null;
    
                        /**
                         * ReadOnly maxStaleness.
                         * @member {google.protobuf.IDuration|null|undefined} maxStaleness
                         * @memberof google.spanner.v1.TransactionOptions.ReadOnly
                         * @instance
                         */
                        ReadOnly.prototype.maxStaleness = null;
    
                        /**
                         * ReadOnly readTimestamp.
                         * @member {google.protobuf.ITimestamp|null|undefined} readTimestamp
                         * @memberof google.spanner.v1.TransactionOptions.ReadOnly
                         * @instance
                         */
                        ReadOnly.prototype.readTimestamp = null;
    
                        /**
                         * ReadOnly exactStaleness.
                         * @member {google.protobuf.IDuration|null|undefined} exactStaleness
                         * @memberof google.spanner.v1.TransactionOptions.ReadOnly
                         * @instance
                         */
                        ReadOnly.prototype.exactStaleness = null;
    
                        /**
                         * ReadOnly returnReadTimestamp.
                         * @member {boolean} returnReadTimestamp
                         * @memberof google.spanner.v1.TransactionOptions.ReadOnly
                         * @instance
                         */
                        ReadOnly.prototype.returnReadTimestamp = false;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * ReadOnly timestampBound.
                         * @member {"strong"|"minReadTimestamp"|"maxStaleness"|"readTimestamp"|"exactStaleness"|undefined} timestampBound
                         * @memberof google.spanner.v1.TransactionOptions.ReadOnly
                         * @instance
                         */
                        Object.defineProperty(ReadOnly.prototype, "timestampBound", {
                            get: $util.oneOfGetter($oneOfFields = ["strong", "minReadTimestamp", "maxStaleness", "readTimestamp", "exactStaleness"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new ReadOnly instance using the specified properties.
                         * @function create
                         * @memberof google.spanner.v1.TransactionOptions.ReadOnly
                         * @static
                         * @param {google.spanner.v1.TransactionOptions.IReadOnly=} [properties] Properties to set
                         * @returns {google.spanner.v1.TransactionOptions.ReadOnly} ReadOnly instance
                         */
                        ReadOnly.create = function create(properties) {
                            return new ReadOnly(properties);
                        };
    
                        /**
                         * Encodes the specified ReadOnly message. Does not implicitly {@link google.spanner.v1.TransactionOptions.ReadOnly.verify|verify} messages.
                         * @function encode
                         * @memberof google.spanner.v1.TransactionOptions.ReadOnly
                         * @static
                         * @param {google.spanner.v1.TransactionOptions.IReadOnly} message ReadOnly message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ReadOnly.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.strong != null && Object.hasOwnProperty.call(message, "strong"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.strong);
                            if (message.minReadTimestamp != null && Object.hasOwnProperty.call(message, "minReadTimestamp"))
                                $root.google.protobuf.Timestamp.encode(message.minReadTimestamp, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.maxStaleness != null && Object.hasOwnProperty.call(message, "maxStaleness"))
                                $root.google.protobuf.Duration.encode(message.maxStaleness, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.readTimestamp != null && Object.hasOwnProperty.call(message, "readTimestamp"))
                                $root.google.protobuf.Timestamp.encode(message.readTimestamp, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.exactStaleness != null && Object.hasOwnProperty.call(message, "exactStaleness"))
                                $root.google.protobuf.Duration.encode(message.exactStaleness, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.returnReadTimestamp != null && Object.hasOwnProperty.call(message, "returnReadTimestamp"))
                                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.returnReadTimestamp);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ReadOnly message, length delimited. Does not implicitly {@link google.spanner.v1.TransactionOptions.ReadOnly.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.spanner.v1.TransactionOptions.ReadOnly
                         * @static
                         * @param {google.spanner.v1.TransactionOptions.IReadOnly} message ReadOnly message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ReadOnly.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ReadOnly message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.spanner.v1.TransactionOptions.ReadOnly
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.spanner.v1.TransactionOptions.ReadOnly} ReadOnly
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ReadOnly.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.TransactionOptions.ReadOnly();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.strong = reader.bool();
                                    break;
                                case 2:
                                    message.minReadTimestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.maxStaleness = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.readTimestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    message.exactStaleness = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                    break;
                                case 6:
                                    message.returnReadTimestamp = reader.bool();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ReadOnly message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.spanner.v1.TransactionOptions.ReadOnly
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.spanner.v1.TransactionOptions.ReadOnly} ReadOnly
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ReadOnly.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ReadOnly message.
                         * @function verify
                         * @memberof google.spanner.v1.TransactionOptions.ReadOnly
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ReadOnly.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.strong != null && message.hasOwnProperty("strong")) {
                                properties.timestampBound = 1;
                                if (typeof message.strong !== "boolean")
                                    return "strong: boolean expected";
                            }
                            if (message.minReadTimestamp != null && message.hasOwnProperty("minReadTimestamp")) {
                                if (properties.timestampBound === 1)
                                    return "timestampBound: multiple values";
                                properties.timestampBound = 1;
                                {
                                    var error = $root.google.protobuf.Timestamp.verify(message.minReadTimestamp);
                                    if (error)
                                        return "minReadTimestamp." + error;
                                }
                            }
                            if (message.maxStaleness != null && message.hasOwnProperty("maxStaleness")) {
                                if (properties.timestampBound === 1)
                                    return "timestampBound: multiple values";
                                properties.timestampBound = 1;
                                {
                                    var error = $root.google.protobuf.Duration.verify(message.maxStaleness);
                                    if (error)
                                        return "maxStaleness." + error;
                                }
                            }
                            if (message.readTimestamp != null && message.hasOwnProperty("readTimestamp")) {
                                if (properties.timestampBound === 1)
                                    return "timestampBound: multiple values";
                                properties.timestampBound = 1;
                                {
                                    var error = $root.google.protobuf.Timestamp.verify(message.readTimestamp);
                                    if (error)
                                        return "readTimestamp." + error;
                                }
                            }
                            if (message.exactStaleness != null && message.hasOwnProperty("exactStaleness")) {
                                if (properties.timestampBound === 1)
                                    return "timestampBound: multiple values";
                                properties.timestampBound = 1;
                                {
                                    var error = $root.google.protobuf.Duration.verify(message.exactStaleness);
                                    if (error)
                                        return "exactStaleness." + error;
                                }
                            }
                            if (message.returnReadTimestamp != null && message.hasOwnProperty("returnReadTimestamp"))
                                if (typeof message.returnReadTimestamp !== "boolean")
                                    return "returnReadTimestamp: boolean expected";
                            return null;
                        };
    
                        /**
                         * Creates a ReadOnly message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.spanner.v1.TransactionOptions.ReadOnly
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.spanner.v1.TransactionOptions.ReadOnly} ReadOnly
                         */
                        ReadOnly.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.spanner.v1.TransactionOptions.ReadOnly)
                                return object;
                            var message = new $root.google.spanner.v1.TransactionOptions.ReadOnly();
                            if (object.strong != null)
                                message.strong = Boolean(object.strong);
                            if (object.minReadTimestamp != null) {
                                if (typeof object.minReadTimestamp !== "object")
                                    throw TypeError(".google.spanner.v1.TransactionOptions.ReadOnly.minReadTimestamp: object expected");
                                message.minReadTimestamp = $root.google.protobuf.Timestamp.fromObject(object.minReadTimestamp);
                            }
                            if (object.maxStaleness != null) {
                                if (typeof object.maxStaleness !== "object")
                                    throw TypeError(".google.spanner.v1.TransactionOptions.ReadOnly.maxStaleness: object expected");
                                message.maxStaleness = $root.google.protobuf.Duration.fromObject(object.maxStaleness);
                            }
                            if (object.readTimestamp != null) {
                                if (typeof object.readTimestamp !== "object")
                                    throw TypeError(".google.spanner.v1.TransactionOptions.ReadOnly.readTimestamp: object expected");
                                message.readTimestamp = $root.google.protobuf.Timestamp.fromObject(object.readTimestamp);
                            }
                            if (object.exactStaleness != null) {
                                if (typeof object.exactStaleness !== "object")
                                    throw TypeError(".google.spanner.v1.TransactionOptions.ReadOnly.exactStaleness: object expected");
                                message.exactStaleness = $root.google.protobuf.Duration.fromObject(object.exactStaleness);
                            }
                            if (object.returnReadTimestamp != null)
                                message.returnReadTimestamp = Boolean(object.returnReadTimestamp);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ReadOnly message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.spanner.v1.TransactionOptions.ReadOnly
                         * @static
                         * @param {google.spanner.v1.TransactionOptions.ReadOnly} message ReadOnly
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ReadOnly.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.returnReadTimestamp = false;
                            if (message.strong != null && message.hasOwnProperty("strong")) {
                                object.strong = message.strong;
                                if (options.oneofs)
                                    object.timestampBound = "strong";
                            }
                            if (message.minReadTimestamp != null && message.hasOwnProperty("minReadTimestamp")) {
                                object.minReadTimestamp = $root.google.protobuf.Timestamp.toObject(message.minReadTimestamp, options);
                                if (options.oneofs)
                                    object.timestampBound = "minReadTimestamp";
                            }
                            if (message.maxStaleness != null && message.hasOwnProperty("maxStaleness")) {
                                object.maxStaleness = $root.google.protobuf.Duration.toObject(message.maxStaleness, options);
                                if (options.oneofs)
                                    object.timestampBound = "maxStaleness";
                            }
                            if (message.readTimestamp != null && message.hasOwnProperty("readTimestamp")) {
                                object.readTimestamp = $root.google.protobuf.Timestamp.toObject(message.readTimestamp, options);
                                if (options.oneofs)
                                    object.timestampBound = "readTimestamp";
                            }
                            if (message.exactStaleness != null && message.hasOwnProperty("exactStaleness")) {
                                object.exactStaleness = $root.google.protobuf.Duration.toObject(message.exactStaleness, options);
                                if (options.oneofs)
                                    object.timestampBound = "exactStaleness";
                            }
                            if (message.returnReadTimestamp != null && message.hasOwnProperty("returnReadTimestamp"))
                                object.returnReadTimestamp = message.returnReadTimestamp;
                            return object;
                        };
    
                        /**
                         * Converts this ReadOnly to JSON.
                         * @function toJSON
                         * @memberof google.spanner.v1.TransactionOptions.ReadOnly
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ReadOnly.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ReadOnly;
                    })();
    
                    return TransactionOptions;
                })();
    
                v1.Transaction = (function() {
    
                    /**
                     * Properties of a Transaction.
                     * @memberof google.spanner.v1
                     * @interface ITransaction
                     * @property {Uint8Array|null} [id] Transaction id
                     * @property {google.protobuf.ITimestamp|null} [readTimestamp] Transaction readTimestamp
                     */
    
                    /**
                     * Constructs a new Transaction.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a Transaction.
                     * @implements ITransaction
                     * @constructor
                     * @param {google.spanner.v1.ITransaction=} [properties] Properties to set
                     */
                    function Transaction(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Transaction id.
                     * @member {Uint8Array} id
                     * @memberof google.spanner.v1.Transaction
                     * @instance
                     */
                    Transaction.prototype.id = $util.newBuffer([]);
    
                    /**
                     * Transaction readTimestamp.
                     * @member {google.protobuf.ITimestamp|null|undefined} readTimestamp
                     * @memberof google.spanner.v1.Transaction
                     * @instance
                     */
                    Transaction.prototype.readTimestamp = null;
    
                    /**
                     * Creates a new Transaction instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.Transaction
                     * @static
                     * @param {google.spanner.v1.ITransaction=} [properties] Properties to set
                     * @returns {google.spanner.v1.Transaction} Transaction instance
                     */
                    Transaction.create = function create(properties) {
                        return new Transaction(properties);
                    };
    
                    /**
                     * Encodes the specified Transaction message. Does not implicitly {@link google.spanner.v1.Transaction.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.Transaction
                     * @static
                     * @param {google.spanner.v1.ITransaction} message Transaction message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Transaction.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.id);
                        if (message.readTimestamp != null && Object.hasOwnProperty.call(message, "readTimestamp"))
                            $root.google.protobuf.Timestamp.encode(message.readTimestamp, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Transaction message, length delimited. Does not implicitly {@link google.spanner.v1.Transaction.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.Transaction
                     * @static
                     * @param {google.spanner.v1.ITransaction} message Transaction message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Transaction.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Transaction message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.Transaction
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.Transaction} Transaction
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Transaction.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.Transaction();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.id = reader.bytes();
                                break;
                            case 2:
                                message.readTimestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Transaction message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.Transaction
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.Transaction} Transaction
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Transaction.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Transaction message.
                     * @function verify
                     * @memberof google.spanner.v1.Transaction
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Transaction.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!(message.id && typeof message.id.length === "number" || $util.isString(message.id)))
                                return "id: buffer expected";
                        if (message.readTimestamp != null && message.hasOwnProperty("readTimestamp")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.readTimestamp);
                            if (error)
                                return "readTimestamp." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Transaction message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.Transaction
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.Transaction} Transaction
                     */
                    Transaction.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.Transaction)
                            return object;
                        var message = new $root.google.spanner.v1.Transaction();
                        if (object.id != null)
                            if (typeof object.id === "string")
                                $util.base64.decode(object.id, message.id = $util.newBuffer($util.base64.length(object.id)), 0);
                            else if (object.id.length)
                                message.id = object.id;
                        if (object.readTimestamp != null) {
                            if (typeof object.readTimestamp !== "object")
                                throw TypeError(".google.spanner.v1.Transaction.readTimestamp: object expected");
                            message.readTimestamp = $root.google.protobuf.Timestamp.fromObject(object.readTimestamp);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Transaction message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.Transaction
                     * @static
                     * @param {google.spanner.v1.Transaction} message Transaction
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Transaction.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.id = "";
                            else {
                                object.id = [];
                                if (options.bytes !== Array)
                                    object.id = $util.newBuffer(object.id);
                            }
                            object.readTimestamp = null;
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = options.bytes === String ? $util.base64.encode(message.id, 0, message.id.length) : options.bytes === Array ? Array.prototype.slice.call(message.id) : message.id;
                        if (message.readTimestamp != null && message.hasOwnProperty("readTimestamp"))
                            object.readTimestamp = $root.google.protobuf.Timestamp.toObject(message.readTimestamp, options);
                        return object;
                    };
    
                    /**
                     * Converts this Transaction to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.Transaction
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Transaction.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Transaction;
                })();
    
                v1.TransactionSelector = (function() {
    
                    /**
                     * Properties of a TransactionSelector.
                     * @memberof google.spanner.v1
                     * @interface ITransactionSelector
                     * @property {google.spanner.v1.ITransactionOptions|null} [singleUse] TransactionSelector singleUse
                     * @property {Uint8Array|null} [id] TransactionSelector id
                     * @property {google.spanner.v1.ITransactionOptions|null} [begin] TransactionSelector begin
                     */
    
                    /**
                     * Constructs a new TransactionSelector.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a TransactionSelector.
                     * @implements ITransactionSelector
                     * @constructor
                     * @param {google.spanner.v1.ITransactionSelector=} [properties] Properties to set
                     */
                    function TransactionSelector(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * TransactionSelector singleUse.
                     * @member {google.spanner.v1.ITransactionOptions|null|undefined} singleUse
                     * @memberof google.spanner.v1.TransactionSelector
                     * @instance
                     */
                    TransactionSelector.prototype.singleUse = null;
    
                    /**
                     * TransactionSelector id.
                     * @member {Uint8Array} id
                     * @memberof google.spanner.v1.TransactionSelector
                     * @instance
                     */
                    TransactionSelector.prototype.id = $util.newBuffer([]);
    
                    /**
                     * TransactionSelector begin.
                     * @member {google.spanner.v1.ITransactionOptions|null|undefined} begin
                     * @memberof google.spanner.v1.TransactionSelector
                     * @instance
                     */
                    TransactionSelector.prototype.begin = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * TransactionSelector selector.
                     * @member {"singleUse"|"id"|"begin"|undefined} selector
                     * @memberof google.spanner.v1.TransactionSelector
                     * @instance
                     */
                    Object.defineProperty(TransactionSelector.prototype, "selector", {
                        get: $util.oneOfGetter($oneOfFields = ["singleUse", "id", "begin"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new TransactionSelector instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.TransactionSelector
                     * @static
                     * @param {google.spanner.v1.ITransactionSelector=} [properties] Properties to set
                     * @returns {google.spanner.v1.TransactionSelector} TransactionSelector instance
                     */
                    TransactionSelector.create = function create(properties) {
                        return new TransactionSelector(properties);
                    };
    
                    /**
                     * Encodes the specified TransactionSelector message. Does not implicitly {@link google.spanner.v1.TransactionSelector.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.TransactionSelector
                     * @static
                     * @param {google.spanner.v1.ITransactionSelector} message TransactionSelector message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TransactionSelector.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.singleUse != null && Object.hasOwnProperty.call(message, "singleUse"))
                            $root.google.spanner.v1.TransactionOptions.encode(message.singleUse, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.id);
                        if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                            $root.google.spanner.v1.TransactionOptions.encode(message.begin, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified TransactionSelector message, length delimited. Does not implicitly {@link google.spanner.v1.TransactionSelector.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.TransactionSelector
                     * @static
                     * @param {google.spanner.v1.ITransactionSelector} message TransactionSelector message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TransactionSelector.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a TransactionSelector message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.TransactionSelector
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.TransactionSelector} TransactionSelector
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TransactionSelector.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.TransactionSelector();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.singleUse = $root.google.spanner.v1.TransactionOptions.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.id = reader.bytes();
                                break;
                            case 3:
                                message.begin = $root.google.spanner.v1.TransactionOptions.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a TransactionSelector message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.TransactionSelector
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.TransactionSelector} TransactionSelector
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TransactionSelector.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a TransactionSelector message.
                     * @function verify
                     * @memberof google.spanner.v1.TransactionSelector
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TransactionSelector.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.singleUse != null && message.hasOwnProperty("singleUse")) {
                            properties.selector = 1;
                            {
                                var error = $root.google.spanner.v1.TransactionOptions.verify(message.singleUse);
                                if (error)
                                    return "singleUse." + error;
                            }
                        }
                        if (message.id != null && message.hasOwnProperty("id")) {
                            if (properties.selector === 1)
                                return "selector: multiple values";
                            properties.selector = 1;
                            if (!(message.id && typeof message.id.length === "number" || $util.isString(message.id)))
                                return "id: buffer expected";
                        }
                        if (message.begin != null && message.hasOwnProperty("begin")) {
                            if (properties.selector === 1)
                                return "selector: multiple values";
                            properties.selector = 1;
                            {
                                var error = $root.google.spanner.v1.TransactionOptions.verify(message.begin);
                                if (error)
                                    return "begin." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a TransactionSelector message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.TransactionSelector
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.TransactionSelector} TransactionSelector
                     */
                    TransactionSelector.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.TransactionSelector)
                            return object;
                        var message = new $root.google.spanner.v1.TransactionSelector();
                        if (object.singleUse != null) {
                            if (typeof object.singleUse !== "object")
                                throw TypeError(".google.spanner.v1.TransactionSelector.singleUse: object expected");
                            message.singleUse = $root.google.spanner.v1.TransactionOptions.fromObject(object.singleUse);
                        }
                        if (object.id != null)
                            if (typeof object.id === "string")
                                $util.base64.decode(object.id, message.id = $util.newBuffer($util.base64.length(object.id)), 0);
                            else if (object.id.length)
                                message.id = object.id;
                        if (object.begin != null) {
                            if (typeof object.begin !== "object")
                                throw TypeError(".google.spanner.v1.TransactionSelector.begin: object expected");
                            message.begin = $root.google.spanner.v1.TransactionOptions.fromObject(object.begin);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a TransactionSelector message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.TransactionSelector
                     * @static
                     * @param {google.spanner.v1.TransactionSelector} message TransactionSelector
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TransactionSelector.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.singleUse != null && message.hasOwnProperty("singleUse")) {
                            object.singleUse = $root.google.spanner.v1.TransactionOptions.toObject(message.singleUse, options);
                            if (options.oneofs)
                                object.selector = "singleUse";
                        }
                        if (message.id != null && message.hasOwnProperty("id")) {
                            object.id = options.bytes === String ? $util.base64.encode(message.id, 0, message.id.length) : options.bytes === Array ? Array.prototype.slice.call(message.id) : message.id;
                            if (options.oneofs)
                                object.selector = "id";
                        }
                        if (message.begin != null && message.hasOwnProperty("begin")) {
                            object.begin = $root.google.spanner.v1.TransactionOptions.toObject(message.begin, options);
                            if (options.oneofs)
                                object.selector = "begin";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this TransactionSelector to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.TransactionSelector
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TransactionSelector.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return TransactionSelector;
                })();
    
                /**
                 * TypeCode enum.
                 * @name google.spanner.v1.TypeCode
                 * @enum {number}
                 * @property {number} TYPE_CODE_UNSPECIFIED=0 TYPE_CODE_UNSPECIFIED value
                 * @property {number} BOOL=1 BOOL value
                 * @property {number} INT64=2 INT64 value
                 * @property {number} FLOAT64=3 FLOAT64 value
                 * @property {number} TIMESTAMP=4 TIMESTAMP value
                 * @property {number} DATE=5 DATE value
                 * @property {number} STRING=6 STRING value
                 * @property {number} BYTES=7 BYTES value
                 * @property {number} ARRAY=8 ARRAY value
                 * @property {number} STRUCT=9 STRUCT value
                 */
                v1.TypeCode = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "TYPE_CODE_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "BOOL"] = 1;
                    values[valuesById[2] = "INT64"] = 2;
                    values[valuesById[3] = "FLOAT64"] = 3;
                    values[valuesById[4] = "TIMESTAMP"] = 4;
                    values[valuesById[5] = "DATE"] = 5;
                    values[valuesById[6] = "STRING"] = 6;
                    values[valuesById[7] = "BYTES"] = 7;
                    values[valuesById[8] = "ARRAY"] = 8;
                    values[valuesById[9] = "STRUCT"] = 9;
                    return values;
                })();
    
                v1.Type = (function() {
    
                    /**
                     * Properties of a Type.
                     * @memberof google.spanner.v1
                     * @interface IType
                     * @property {google.spanner.v1.TypeCode|null} [code] Type code
                     * @property {google.spanner.v1.IType|null} [arrayElementType] Type arrayElementType
                     * @property {google.spanner.v1.IStructType|null} [structType] Type structType
                     */
    
                    /**
                     * Constructs a new Type.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a Type.
                     * @implements IType
                     * @constructor
                     * @param {google.spanner.v1.IType=} [properties] Properties to set
                     */
                    function Type(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Type code.
                     * @member {google.spanner.v1.TypeCode} code
                     * @memberof google.spanner.v1.Type
                     * @instance
                     */
                    Type.prototype.code = 0;
    
                    /**
                     * Type arrayElementType.
                     * @member {google.spanner.v1.IType|null|undefined} arrayElementType
                     * @memberof google.spanner.v1.Type
                     * @instance
                     */
                    Type.prototype.arrayElementType = null;
    
                    /**
                     * Type structType.
                     * @member {google.spanner.v1.IStructType|null|undefined} structType
                     * @memberof google.spanner.v1.Type
                     * @instance
                     */
                    Type.prototype.structType = null;
    
                    /**
                     * Creates a new Type instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.Type
                     * @static
                     * @param {google.spanner.v1.IType=} [properties] Properties to set
                     * @returns {google.spanner.v1.Type} Type instance
                     */
                    Type.create = function create(properties) {
                        return new Type(properties);
                    };
    
                    /**
                     * Encodes the specified Type message. Does not implicitly {@link google.spanner.v1.Type.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.Type
                     * @static
                     * @param {google.spanner.v1.IType} message Type message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Type.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                        if (message.arrayElementType != null && Object.hasOwnProperty.call(message, "arrayElementType"))
                            $root.google.spanner.v1.Type.encode(message.arrayElementType, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.structType != null && Object.hasOwnProperty.call(message, "structType"))
                            $root.google.spanner.v1.StructType.encode(message.structType, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Type message, length delimited. Does not implicitly {@link google.spanner.v1.Type.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.Type
                     * @static
                     * @param {google.spanner.v1.IType} message Type message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Type.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Type message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.Type
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.Type} Type
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Type.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.Type();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.code = reader.int32();
                                break;
                            case 2:
                                message.arrayElementType = $root.google.spanner.v1.Type.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.structType = $root.google.spanner.v1.StructType.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Type message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.Type
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.Type} Type
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Type.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Type message.
                     * @function verify
                     * @memberof google.spanner.v1.Type
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Type.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.code != null && message.hasOwnProperty("code"))
                            switch (message.code) {
                            default:
                                return "code: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                                break;
                            }
                        if (message.arrayElementType != null && message.hasOwnProperty("arrayElementType")) {
                            var error = $root.google.spanner.v1.Type.verify(message.arrayElementType);
                            if (error)
                                return "arrayElementType." + error;
                        }
                        if (message.structType != null && message.hasOwnProperty("structType")) {
                            var error = $root.google.spanner.v1.StructType.verify(message.structType);
                            if (error)
                                return "structType." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Type message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.Type
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.Type} Type
                     */
                    Type.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.Type)
                            return object;
                        var message = new $root.google.spanner.v1.Type();
                        switch (object.code) {
                        case "TYPE_CODE_UNSPECIFIED":
                        case 0:
                            message.code = 0;
                            break;
                        case "BOOL":
                        case 1:
                            message.code = 1;
                            break;
                        case "INT64":
                        case 2:
                            message.code = 2;
                            break;
                        case "FLOAT64":
                        case 3:
                            message.code = 3;
                            break;
                        case "TIMESTAMP":
                        case 4:
                            message.code = 4;
                            break;
                        case "DATE":
                        case 5:
                            message.code = 5;
                            break;
                        case "STRING":
                        case 6:
                            message.code = 6;
                            break;
                        case "BYTES":
                        case 7:
                            message.code = 7;
                            break;
                        case "ARRAY":
                        case 8:
                            message.code = 8;
                            break;
                        case "STRUCT":
                        case 9:
                            message.code = 9;
                            break;
                        }
                        if (object.arrayElementType != null) {
                            if (typeof object.arrayElementType !== "object")
                                throw TypeError(".google.spanner.v1.Type.arrayElementType: object expected");
                            message.arrayElementType = $root.google.spanner.v1.Type.fromObject(object.arrayElementType);
                        }
                        if (object.structType != null) {
                            if (typeof object.structType !== "object")
                                throw TypeError(".google.spanner.v1.Type.structType: object expected");
                            message.structType = $root.google.spanner.v1.StructType.fromObject(object.structType);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Type message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.Type
                     * @static
                     * @param {google.spanner.v1.Type} message Type
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Type.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.code = options.enums === String ? "TYPE_CODE_UNSPECIFIED" : 0;
                            object.arrayElementType = null;
                            object.structType = null;
                        }
                        if (message.code != null && message.hasOwnProperty("code"))
                            object.code = options.enums === String ? $root.google.spanner.v1.TypeCode[message.code] : message.code;
                        if (message.arrayElementType != null && message.hasOwnProperty("arrayElementType"))
                            object.arrayElementType = $root.google.spanner.v1.Type.toObject(message.arrayElementType, options);
                        if (message.structType != null && message.hasOwnProperty("structType"))
                            object.structType = $root.google.spanner.v1.StructType.toObject(message.structType, options);
                        return object;
                    };
    
                    /**
                     * Converts this Type to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.Type
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Type.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Type;
                })();
    
                v1.StructType = (function() {
    
                    /**
                     * Properties of a StructType.
                     * @memberof google.spanner.v1
                     * @interface IStructType
                     * @property {Array.<google.spanner.v1.StructType.IField>|null} [fields] StructType fields
                     */
    
                    /**
                     * Constructs a new StructType.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a StructType.
                     * @implements IStructType
                     * @constructor
                     * @param {google.spanner.v1.IStructType=} [properties] Properties to set
                     */
                    function StructType(properties) {
                        this.fields = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * StructType fields.
                     * @member {Array.<google.spanner.v1.StructType.IField>} fields
                     * @memberof google.spanner.v1.StructType
                     * @instance
                     */
                    StructType.prototype.fields = $util.emptyArray;
    
                    /**
                     * Creates a new StructType instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.StructType
                     * @static
                     * @param {google.spanner.v1.IStructType=} [properties] Properties to set
                     * @returns {google.spanner.v1.StructType} StructType instance
                     */
                    StructType.create = function create(properties) {
                        return new StructType(properties);
                    };
    
                    /**
                     * Encodes the specified StructType message. Does not implicitly {@link google.spanner.v1.StructType.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.StructType
                     * @static
                     * @param {google.spanner.v1.IStructType} message StructType message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    StructType.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.fields != null && message.fields.length)
                            for (var i = 0; i < message.fields.length; ++i)
                                $root.google.spanner.v1.StructType.Field.encode(message.fields[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified StructType message, length delimited. Does not implicitly {@link google.spanner.v1.StructType.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.StructType
                     * @static
                     * @param {google.spanner.v1.IStructType} message StructType message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    StructType.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a StructType message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.StructType
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.StructType} StructType
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    StructType.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.StructType();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.fields && message.fields.length))
                                    message.fields = [];
                                message.fields.push($root.google.spanner.v1.StructType.Field.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a StructType message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.StructType
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.StructType} StructType
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    StructType.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a StructType message.
                     * @function verify
                     * @memberof google.spanner.v1.StructType
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    StructType.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.fields != null && message.hasOwnProperty("fields")) {
                            if (!Array.isArray(message.fields))
                                return "fields: array expected";
                            for (var i = 0; i < message.fields.length; ++i) {
                                var error = $root.google.spanner.v1.StructType.Field.verify(message.fields[i]);
                                if (error)
                                    return "fields." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a StructType message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.StructType
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.StructType} StructType
                     */
                    StructType.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.StructType)
                            return object;
                        var message = new $root.google.spanner.v1.StructType();
                        if (object.fields) {
                            if (!Array.isArray(object.fields))
                                throw TypeError(".google.spanner.v1.StructType.fields: array expected");
                            message.fields = [];
                            for (var i = 0; i < object.fields.length; ++i) {
                                if (typeof object.fields[i] !== "object")
                                    throw TypeError(".google.spanner.v1.StructType.fields: object expected");
                                message.fields[i] = $root.google.spanner.v1.StructType.Field.fromObject(object.fields[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a StructType message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.StructType
                     * @static
                     * @param {google.spanner.v1.StructType} message StructType
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    StructType.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.fields = [];
                        if (message.fields && message.fields.length) {
                            object.fields = [];
                            for (var j = 0; j < message.fields.length; ++j)
                                object.fields[j] = $root.google.spanner.v1.StructType.Field.toObject(message.fields[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this StructType to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.StructType
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    StructType.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    StructType.Field = (function() {
    
                        /**
                         * Properties of a Field.
                         * @memberof google.spanner.v1.StructType
                         * @interface IField
                         * @property {string|null} [name] Field name
                         * @property {google.spanner.v1.IType|null} [type] Field type
                         */
    
                        /**
                         * Constructs a new Field.
                         * @memberof google.spanner.v1.StructType
                         * @classdesc Represents a Field.
                         * @implements IField
                         * @constructor
                         * @param {google.spanner.v1.StructType.IField=} [properties] Properties to set
                         */
                        function Field(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Field name.
                         * @member {string} name
                         * @memberof google.spanner.v1.StructType.Field
                         * @instance
                         */
                        Field.prototype.name = "";
    
                        /**
                         * Field type.
                         * @member {google.spanner.v1.IType|null|undefined} type
                         * @memberof google.spanner.v1.StructType.Field
                         * @instance
                         */
                        Field.prototype.type = null;
    
                        /**
                         * Creates a new Field instance using the specified properties.
                         * @function create
                         * @memberof google.spanner.v1.StructType.Field
                         * @static
                         * @param {google.spanner.v1.StructType.IField=} [properties] Properties to set
                         * @returns {google.spanner.v1.StructType.Field} Field instance
                         */
                        Field.create = function create(properties) {
                            return new Field(properties);
                        };
    
                        /**
                         * Encodes the specified Field message. Does not implicitly {@link google.spanner.v1.StructType.Field.verify|verify} messages.
                         * @function encode
                         * @memberof google.spanner.v1.StructType.Field
                         * @static
                         * @param {google.spanner.v1.StructType.IField} message Field message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Field.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                $root.google.spanner.v1.Type.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Field message, length delimited. Does not implicitly {@link google.spanner.v1.StructType.Field.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.spanner.v1.StructType.Field
                         * @static
                         * @param {google.spanner.v1.StructType.IField} message Field message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Field.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Field message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.spanner.v1.StructType.Field
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.spanner.v1.StructType.Field} Field
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Field.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.StructType.Field();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.type = $root.google.spanner.v1.Type.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Field message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.spanner.v1.StructType.Field
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.spanner.v1.StructType.Field} Field
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Field.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Field message.
                         * @function verify
                         * @memberof google.spanner.v1.StructType.Field
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Field.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.type != null && message.hasOwnProperty("type")) {
                                var error = $root.google.spanner.v1.Type.verify(message.type);
                                if (error)
                                    return "type." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Field message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.spanner.v1.StructType.Field
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.spanner.v1.StructType.Field} Field
                         */
                        Field.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.spanner.v1.StructType.Field)
                                return object;
                            var message = new $root.google.spanner.v1.StructType.Field();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.type != null) {
                                if (typeof object.type !== "object")
                                    throw TypeError(".google.spanner.v1.StructType.Field.type: object expected");
                                message.type = $root.google.spanner.v1.Type.fromObject(object.type);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Field message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.spanner.v1.StructType.Field
                         * @static
                         * @param {google.spanner.v1.StructType.Field} message Field
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Field.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.type = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = $root.google.spanner.v1.Type.toObject(message.type, options);
                            return object;
                        };
    
                        /**
                         * Converts this Field to JSON.
                         * @function toJSON
                         * @memberof google.spanner.v1.StructType.Field
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Field.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Field;
                    })();
    
                    return StructType;
                })();
    
                v1.Spanner = (function() {
    
                    /**
                     * Constructs a new Spanner service.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a Spanner
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Spanner(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }
    
                    (Spanner.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Spanner;
    
                    /**
                     * Creates new Spanner service using the specified rpc implementation.
                     * @function create
                     * @memberof google.spanner.v1.Spanner
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {Spanner} RPC service. Useful where requests and/or responses are streamed.
                     */
                    Spanner.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };
    
                    /**
                     * Callback as used by {@link google.spanner.v1.Spanner#createSession}.
                     * @memberof google.spanner.v1.Spanner
                     * @typedef CreateSessionCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.spanner.v1.Session} [response] Session
                     */
    
                    /**
                     * Calls CreateSession.
                     * @function createSession
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.ICreateSessionRequest} request CreateSessionRequest message or plain object
                     * @param {google.spanner.v1.Spanner.CreateSessionCallback} callback Node-style callback called with the error, if any, and Session
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Spanner.prototype.createSession = function createSession(request, callback) {
                        return this.rpcCall(createSession, $root.google.spanner.v1.CreateSessionRequest, $root.google.spanner.v1.Session, request, callback);
                    }, "name", { value: "CreateSession" });
    
                    /**
                     * Calls CreateSession.
                     * @function createSession
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.ICreateSessionRequest} request CreateSessionRequest message or plain object
                     * @returns {Promise<google.spanner.v1.Session>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.spanner.v1.Spanner#batchCreateSessions}.
                     * @memberof google.spanner.v1.Spanner
                     * @typedef BatchCreateSessionsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.spanner.v1.BatchCreateSessionsResponse} [response] BatchCreateSessionsResponse
                     */
    
                    /**
                     * Calls BatchCreateSessions.
                     * @function batchCreateSessions
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.IBatchCreateSessionsRequest} request BatchCreateSessionsRequest message or plain object
                     * @param {google.spanner.v1.Spanner.BatchCreateSessionsCallback} callback Node-style callback called with the error, if any, and BatchCreateSessionsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Spanner.prototype.batchCreateSessions = function batchCreateSessions(request, callback) {
                        return this.rpcCall(batchCreateSessions, $root.google.spanner.v1.BatchCreateSessionsRequest, $root.google.spanner.v1.BatchCreateSessionsResponse, request, callback);
                    }, "name", { value: "BatchCreateSessions" });
    
                    /**
                     * Calls BatchCreateSessions.
                     * @function batchCreateSessions
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.IBatchCreateSessionsRequest} request BatchCreateSessionsRequest message or plain object
                     * @returns {Promise<google.spanner.v1.BatchCreateSessionsResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.spanner.v1.Spanner#getSession}.
                     * @memberof google.spanner.v1.Spanner
                     * @typedef GetSessionCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.spanner.v1.Session} [response] Session
                     */
    
                    /**
                     * Calls GetSession.
                     * @function getSession
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.IGetSessionRequest} request GetSessionRequest message or plain object
                     * @param {google.spanner.v1.Spanner.GetSessionCallback} callback Node-style callback called with the error, if any, and Session
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Spanner.prototype.getSession = function getSession(request, callback) {
                        return this.rpcCall(getSession, $root.google.spanner.v1.GetSessionRequest, $root.google.spanner.v1.Session, request, callback);
                    }, "name", { value: "GetSession" });
    
                    /**
                     * Calls GetSession.
                     * @function getSession
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.IGetSessionRequest} request GetSessionRequest message or plain object
                     * @returns {Promise<google.spanner.v1.Session>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.spanner.v1.Spanner#listSessions}.
                     * @memberof google.spanner.v1.Spanner
                     * @typedef ListSessionsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.spanner.v1.ListSessionsResponse} [response] ListSessionsResponse
                     */
    
                    /**
                     * Calls ListSessions.
                     * @function listSessions
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.IListSessionsRequest} request ListSessionsRequest message or plain object
                     * @param {google.spanner.v1.Spanner.ListSessionsCallback} callback Node-style callback called with the error, if any, and ListSessionsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Spanner.prototype.listSessions = function listSessions(request, callback) {
                        return this.rpcCall(listSessions, $root.google.spanner.v1.ListSessionsRequest, $root.google.spanner.v1.ListSessionsResponse, request, callback);
                    }, "name", { value: "ListSessions" });
    
                    /**
                     * Calls ListSessions.
                     * @function listSessions
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.IListSessionsRequest} request ListSessionsRequest message or plain object
                     * @returns {Promise<google.spanner.v1.ListSessionsResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.spanner.v1.Spanner#deleteSession}.
                     * @memberof google.spanner.v1.Spanner
                     * @typedef DeleteSessionCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.protobuf.Empty} [response] Empty
                     */
    
                    /**
                     * Calls DeleteSession.
                     * @function deleteSession
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.IDeleteSessionRequest} request DeleteSessionRequest message or plain object
                     * @param {google.spanner.v1.Spanner.DeleteSessionCallback} callback Node-style callback called with the error, if any, and Empty
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Spanner.prototype.deleteSession = function deleteSession(request, callback) {
                        return this.rpcCall(deleteSession, $root.google.spanner.v1.DeleteSessionRequest, $root.google.protobuf.Empty, request, callback);
                    }, "name", { value: "DeleteSession" });
    
                    /**
                     * Calls DeleteSession.
                     * @function deleteSession
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.IDeleteSessionRequest} request DeleteSessionRequest message or plain object
                     * @returns {Promise<google.protobuf.Empty>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.spanner.v1.Spanner#executeSql}.
                     * @memberof google.spanner.v1.Spanner
                     * @typedef ExecuteSqlCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.spanner.v1.ResultSet} [response] ResultSet
                     */
    
                    /**
                     * Calls ExecuteSql.
                     * @function executeSql
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.IExecuteSqlRequest} request ExecuteSqlRequest message or plain object
                     * @param {google.spanner.v1.Spanner.ExecuteSqlCallback} callback Node-style callback called with the error, if any, and ResultSet
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Spanner.prototype.executeSql = function executeSql(request, callback) {
                        return this.rpcCall(executeSql, $root.google.spanner.v1.ExecuteSqlRequest, $root.google.spanner.v1.ResultSet, request, callback);
                    }, "name", { value: "ExecuteSql" });
    
                    /**
                     * Calls ExecuteSql.
                     * @function executeSql
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.IExecuteSqlRequest} request ExecuteSqlRequest message or plain object
                     * @returns {Promise<google.spanner.v1.ResultSet>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.spanner.v1.Spanner#executeStreamingSql}.
                     * @memberof google.spanner.v1.Spanner
                     * @typedef ExecuteStreamingSqlCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.spanner.v1.PartialResultSet} [response] PartialResultSet
                     */
    
                    /**
                     * Calls ExecuteStreamingSql.
                     * @function executeStreamingSql
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.IExecuteSqlRequest} request ExecuteSqlRequest message or plain object
                     * @param {google.spanner.v1.Spanner.ExecuteStreamingSqlCallback} callback Node-style callback called with the error, if any, and PartialResultSet
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Spanner.prototype.executeStreamingSql = function executeStreamingSql(request, callback) {
                        return this.rpcCall(executeStreamingSql, $root.google.spanner.v1.ExecuteSqlRequest, $root.google.spanner.v1.PartialResultSet, request, callback);
                    }, "name", { value: "ExecuteStreamingSql" });
    
                    /**
                     * Calls ExecuteStreamingSql.
                     * @function executeStreamingSql
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.IExecuteSqlRequest} request ExecuteSqlRequest message or plain object
                     * @returns {Promise<google.spanner.v1.PartialResultSet>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.spanner.v1.Spanner#executeBatchDml}.
                     * @memberof google.spanner.v1.Spanner
                     * @typedef ExecuteBatchDmlCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.spanner.v1.ExecuteBatchDmlResponse} [response] ExecuteBatchDmlResponse
                     */
    
                    /**
                     * Calls ExecuteBatchDml.
                     * @function executeBatchDml
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.IExecuteBatchDmlRequest} request ExecuteBatchDmlRequest message or plain object
                     * @param {google.spanner.v1.Spanner.ExecuteBatchDmlCallback} callback Node-style callback called with the error, if any, and ExecuteBatchDmlResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Spanner.prototype.executeBatchDml = function executeBatchDml(request, callback) {
                        return this.rpcCall(executeBatchDml, $root.google.spanner.v1.ExecuteBatchDmlRequest, $root.google.spanner.v1.ExecuteBatchDmlResponse, request, callback);
                    }, "name", { value: "ExecuteBatchDml" });
    
                    /**
                     * Calls ExecuteBatchDml.
                     * @function executeBatchDml
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.IExecuteBatchDmlRequest} request ExecuteBatchDmlRequest message or plain object
                     * @returns {Promise<google.spanner.v1.ExecuteBatchDmlResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.spanner.v1.Spanner#read}.
                     * @memberof google.spanner.v1.Spanner
                     * @typedef ReadCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.spanner.v1.ResultSet} [response] ResultSet
                     */
    
                    /**
                     * Calls Read.
                     * @function read
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.IReadRequest} request ReadRequest message or plain object
                     * @param {google.spanner.v1.Spanner.ReadCallback} callback Node-style callback called with the error, if any, and ResultSet
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Spanner.prototype.read = function read(request, callback) {
                        return this.rpcCall(read, $root.google.spanner.v1.ReadRequest, $root.google.spanner.v1.ResultSet, request, callback);
                    }, "name", { value: "Read" });
    
                    /**
                     * Calls Read.
                     * @function read
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.IReadRequest} request ReadRequest message or plain object
                     * @returns {Promise<google.spanner.v1.ResultSet>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.spanner.v1.Spanner#streamingRead}.
                     * @memberof google.spanner.v1.Spanner
                     * @typedef StreamingReadCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.spanner.v1.PartialResultSet} [response] PartialResultSet
                     */
    
                    /**
                     * Calls StreamingRead.
                     * @function streamingRead
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.IReadRequest} request ReadRequest message or plain object
                     * @param {google.spanner.v1.Spanner.StreamingReadCallback} callback Node-style callback called with the error, if any, and PartialResultSet
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Spanner.prototype.streamingRead = function streamingRead(request, callback) {
                        return this.rpcCall(streamingRead, $root.google.spanner.v1.ReadRequest, $root.google.spanner.v1.PartialResultSet, request, callback);
                    }, "name", { value: "StreamingRead" });
    
                    /**
                     * Calls StreamingRead.
                     * @function streamingRead
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.IReadRequest} request ReadRequest message or plain object
                     * @returns {Promise<google.spanner.v1.PartialResultSet>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.spanner.v1.Spanner#beginTransaction}.
                     * @memberof google.spanner.v1.Spanner
                     * @typedef BeginTransactionCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.spanner.v1.Transaction} [response] Transaction
                     */
    
                    /**
                     * Calls BeginTransaction.
                     * @function beginTransaction
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.IBeginTransactionRequest} request BeginTransactionRequest message or plain object
                     * @param {google.spanner.v1.Spanner.BeginTransactionCallback} callback Node-style callback called with the error, if any, and Transaction
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Spanner.prototype.beginTransaction = function beginTransaction(request, callback) {
                        return this.rpcCall(beginTransaction, $root.google.spanner.v1.BeginTransactionRequest, $root.google.spanner.v1.Transaction, request, callback);
                    }, "name", { value: "BeginTransaction" });
    
                    /**
                     * Calls BeginTransaction.
                     * @function beginTransaction
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.IBeginTransactionRequest} request BeginTransactionRequest message or plain object
                     * @returns {Promise<google.spanner.v1.Transaction>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.spanner.v1.Spanner#commit}.
                     * @memberof google.spanner.v1.Spanner
                     * @typedef CommitCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.spanner.v1.CommitResponse} [response] CommitResponse
                     */
    
                    /**
                     * Calls Commit.
                     * @function commit
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.ICommitRequest} request CommitRequest message or plain object
                     * @param {google.spanner.v1.Spanner.CommitCallback} callback Node-style callback called with the error, if any, and CommitResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Spanner.prototype.commit = function commit(request, callback) {
                        return this.rpcCall(commit, $root.google.spanner.v1.CommitRequest, $root.google.spanner.v1.CommitResponse, request, callback);
                    }, "name", { value: "Commit" });
    
                    /**
                     * Calls Commit.
                     * @function commit
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.ICommitRequest} request CommitRequest message or plain object
                     * @returns {Promise<google.spanner.v1.CommitResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.spanner.v1.Spanner#rollback}.
                     * @memberof google.spanner.v1.Spanner
                     * @typedef RollbackCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.protobuf.Empty} [response] Empty
                     */
    
                    /**
                     * Calls Rollback.
                     * @function rollback
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.IRollbackRequest} request RollbackRequest message or plain object
                     * @param {google.spanner.v1.Spanner.RollbackCallback} callback Node-style callback called with the error, if any, and Empty
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Spanner.prototype.rollback = function rollback(request, callback) {
                        return this.rpcCall(rollback, $root.google.spanner.v1.RollbackRequest, $root.google.protobuf.Empty, request, callback);
                    }, "name", { value: "Rollback" });
    
                    /**
                     * Calls Rollback.
                     * @function rollback
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.IRollbackRequest} request RollbackRequest message or plain object
                     * @returns {Promise<google.protobuf.Empty>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.spanner.v1.Spanner#partitionQuery}.
                     * @memberof google.spanner.v1.Spanner
                     * @typedef PartitionQueryCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.spanner.v1.PartitionResponse} [response] PartitionResponse
                     */
    
                    /**
                     * Calls PartitionQuery.
                     * @function partitionQuery
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.IPartitionQueryRequest} request PartitionQueryRequest message or plain object
                     * @param {google.spanner.v1.Spanner.PartitionQueryCallback} callback Node-style callback called with the error, if any, and PartitionResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Spanner.prototype.partitionQuery = function partitionQuery(request, callback) {
                        return this.rpcCall(partitionQuery, $root.google.spanner.v1.PartitionQueryRequest, $root.google.spanner.v1.PartitionResponse, request, callback);
                    }, "name", { value: "PartitionQuery" });
    
                    /**
                     * Calls PartitionQuery.
                     * @function partitionQuery
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.IPartitionQueryRequest} request PartitionQueryRequest message or plain object
                     * @returns {Promise<google.spanner.v1.PartitionResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.spanner.v1.Spanner#partitionRead}.
                     * @memberof google.spanner.v1.Spanner
                     * @typedef PartitionReadCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.spanner.v1.PartitionResponse} [response] PartitionResponse
                     */
    
                    /**
                     * Calls PartitionRead.
                     * @function partitionRead
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.IPartitionReadRequest} request PartitionReadRequest message or plain object
                     * @param {google.spanner.v1.Spanner.PartitionReadCallback} callback Node-style callback called with the error, if any, and PartitionResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Spanner.prototype.partitionRead = function partitionRead(request, callback) {
                        return this.rpcCall(partitionRead, $root.google.spanner.v1.PartitionReadRequest, $root.google.spanner.v1.PartitionResponse, request, callback);
                    }, "name", { value: "PartitionRead" });
    
                    /**
                     * Calls PartitionRead.
                     * @function partitionRead
                     * @memberof google.spanner.v1.Spanner
                     * @instance
                     * @param {google.spanner.v1.IPartitionReadRequest} request PartitionReadRequest message or plain object
                     * @returns {Promise<google.spanner.v1.PartitionResponse>} Promise
                     * @variation 2
                     */
    
                    return Spanner;
                })();
    
                v1.CreateSessionRequest = (function() {
    
                    /**
                     * Properties of a CreateSessionRequest.
                     * @memberof google.spanner.v1
                     * @interface ICreateSessionRequest
                     * @property {string|null} [database] CreateSessionRequest database
                     * @property {google.spanner.v1.ISession|null} [session] CreateSessionRequest session
                     */
    
                    /**
                     * Constructs a new CreateSessionRequest.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a CreateSessionRequest.
                     * @implements ICreateSessionRequest
                     * @constructor
                     * @param {google.spanner.v1.ICreateSessionRequest=} [properties] Properties to set
                     */
                    function CreateSessionRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CreateSessionRequest database.
                     * @member {string} database
                     * @memberof google.spanner.v1.CreateSessionRequest
                     * @instance
                     */
                    CreateSessionRequest.prototype.database = "";
    
                    /**
                     * CreateSessionRequest session.
                     * @member {google.spanner.v1.ISession|null|undefined} session
                     * @memberof google.spanner.v1.CreateSessionRequest
                     * @instance
                     */
                    CreateSessionRequest.prototype.session = null;
    
                    /**
                     * Creates a new CreateSessionRequest instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.CreateSessionRequest
                     * @static
                     * @param {google.spanner.v1.ICreateSessionRequest=} [properties] Properties to set
                     * @returns {google.spanner.v1.CreateSessionRequest} CreateSessionRequest instance
                     */
                    CreateSessionRequest.create = function create(properties) {
                        return new CreateSessionRequest(properties);
                    };
    
                    /**
                     * Encodes the specified CreateSessionRequest message. Does not implicitly {@link google.spanner.v1.CreateSessionRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.CreateSessionRequest
                     * @static
                     * @param {google.spanner.v1.ICreateSessionRequest} message CreateSessionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateSessionRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.database != null && Object.hasOwnProperty.call(message, "database"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.database);
                        if (message.session != null && Object.hasOwnProperty.call(message, "session"))
                            $root.google.spanner.v1.Session.encode(message.session, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CreateSessionRequest message, length delimited. Does not implicitly {@link google.spanner.v1.CreateSessionRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.CreateSessionRequest
                     * @static
                     * @param {google.spanner.v1.ICreateSessionRequest} message CreateSessionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateSessionRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CreateSessionRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.CreateSessionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.CreateSessionRequest} CreateSessionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateSessionRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.CreateSessionRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.database = reader.string();
                                break;
                            case 2:
                                message.session = $root.google.spanner.v1.Session.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CreateSessionRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.CreateSessionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.CreateSessionRequest} CreateSessionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateSessionRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CreateSessionRequest message.
                     * @function verify
                     * @memberof google.spanner.v1.CreateSessionRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CreateSessionRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.database != null && message.hasOwnProperty("database"))
                            if (!$util.isString(message.database))
                                return "database: string expected";
                        if (message.session != null && message.hasOwnProperty("session")) {
                            var error = $root.google.spanner.v1.Session.verify(message.session);
                            if (error)
                                return "session." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a CreateSessionRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.CreateSessionRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.CreateSessionRequest} CreateSessionRequest
                     */
                    CreateSessionRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.CreateSessionRequest)
                            return object;
                        var message = new $root.google.spanner.v1.CreateSessionRequest();
                        if (object.database != null)
                            message.database = String(object.database);
                        if (object.session != null) {
                            if (typeof object.session !== "object")
                                throw TypeError(".google.spanner.v1.CreateSessionRequest.session: object expected");
                            message.session = $root.google.spanner.v1.Session.fromObject(object.session);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CreateSessionRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.CreateSessionRequest
                     * @static
                     * @param {google.spanner.v1.CreateSessionRequest} message CreateSessionRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CreateSessionRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.database = "";
                            object.session = null;
                        }
                        if (message.database != null && message.hasOwnProperty("database"))
                            object.database = message.database;
                        if (message.session != null && message.hasOwnProperty("session"))
                            object.session = $root.google.spanner.v1.Session.toObject(message.session, options);
                        return object;
                    };
    
                    /**
                     * Converts this CreateSessionRequest to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.CreateSessionRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CreateSessionRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return CreateSessionRequest;
                })();
    
                v1.BatchCreateSessionsRequest = (function() {
    
                    /**
                     * Properties of a BatchCreateSessionsRequest.
                     * @memberof google.spanner.v1
                     * @interface IBatchCreateSessionsRequest
                     * @property {string|null} [database] BatchCreateSessionsRequest database
                     * @property {google.spanner.v1.ISession|null} [sessionTemplate] BatchCreateSessionsRequest sessionTemplate
                     * @property {number|null} [sessionCount] BatchCreateSessionsRequest sessionCount
                     */
    
                    /**
                     * Constructs a new BatchCreateSessionsRequest.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a BatchCreateSessionsRequest.
                     * @implements IBatchCreateSessionsRequest
                     * @constructor
                     * @param {google.spanner.v1.IBatchCreateSessionsRequest=} [properties] Properties to set
                     */
                    function BatchCreateSessionsRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * BatchCreateSessionsRequest database.
                     * @member {string} database
                     * @memberof google.spanner.v1.BatchCreateSessionsRequest
                     * @instance
                     */
                    BatchCreateSessionsRequest.prototype.database = "";
    
                    /**
                     * BatchCreateSessionsRequest sessionTemplate.
                     * @member {google.spanner.v1.ISession|null|undefined} sessionTemplate
                     * @memberof google.spanner.v1.BatchCreateSessionsRequest
                     * @instance
                     */
                    BatchCreateSessionsRequest.prototype.sessionTemplate = null;
    
                    /**
                     * BatchCreateSessionsRequest sessionCount.
                     * @member {number} sessionCount
                     * @memberof google.spanner.v1.BatchCreateSessionsRequest
                     * @instance
                     */
                    BatchCreateSessionsRequest.prototype.sessionCount = 0;
    
                    /**
                     * Creates a new BatchCreateSessionsRequest instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.BatchCreateSessionsRequest
                     * @static
                     * @param {google.spanner.v1.IBatchCreateSessionsRequest=} [properties] Properties to set
                     * @returns {google.spanner.v1.BatchCreateSessionsRequest} BatchCreateSessionsRequest instance
                     */
                    BatchCreateSessionsRequest.create = function create(properties) {
                        return new BatchCreateSessionsRequest(properties);
                    };
    
                    /**
                     * Encodes the specified BatchCreateSessionsRequest message. Does not implicitly {@link google.spanner.v1.BatchCreateSessionsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.BatchCreateSessionsRequest
                     * @static
                     * @param {google.spanner.v1.IBatchCreateSessionsRequest} message BatchCreateSessionsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BatchCreateSessionsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.database != null && Object.hasOwnProperty.call(message, "database"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.database);
                        if (message.sessionTemplate != null && Object.hasOwnProperty.call(message, "sessionTemplate"))
                            $root.google.spanner.v1.Session.encode(message.sessionTemplate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.sessionCount != null && Object.hasOwnProperty.call(message, "sessionCount"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.sessionCount);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified BatchCreateSessionsRequest message, length delimited. Does not implicitly {@link google.spanner.v1.BatchCreateSessionsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.BatchCreateSessionsRequest
                     * @static
                     * @param {google.spanner.v1.IBatchCreateSessionsRequest} message BatchCreateSessionsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BatchCreateSessionsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a BatchCreateSessionsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.BatchCreateSessionsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.BatchCreateSessionsRequest} BatchCreateSessionsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BatchCreateSessionsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.BatchCreateSessionsRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.database = reader.string();
                                break;
                            case 2:
                                message.sessionTemplate = $root.google.spanner.v1.Session.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.sessionCount = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a BatchCreateSessionsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.BatchCreateSessionsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.BatchCreateSessionsRequest} BatchCreateSessionsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BatchCreateSessionsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a BatchCreateSessionsRequest message.
                     * @function verify
                     * @memberof google.spanner.v1.BatchCreateSessionsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    BatchCreateSessionsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.database != null && message.hasOwnProperty("database"))
                            if (!$util.isString(message.database))
                                return "database: string expected";
                        if (message.sessionTemplate != null && message.hasOwnProperty("sessionTemplate")) {
                            var error = $root.google.spanner.v1.Session.verify(message.sessionTemplate);
                            if (error)
                                return "sessionTemplate." + error;
                        }
                        if (message.sessionCount != null && message.hasOwnProperty("sessionCount"))
                            if (!$util.isInteger(message.sessionCount))
                                return "sessionCount: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a BatchCreateSessionsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.BatchCreateSessionsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.BatchCreateSessionsRequest} BatchCreateSessionsRequest
                     */
                    BatchCreateSessionsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.BatchCreateSessionsRequest)
                            return object;
                        var message = new $root.google.spanner.v1.BatchCreateSessionsRequest();
                        if (object.database != null)
                            message.database = String(object.database);
                        if (object.sessionTemplate != null) {
                            if (typeof object.sessionTemplate !== "object")
                                throw TypeError(".google.spanner.v1.BatchCreateSessionsRequest.sessionTemplate: object expected");
                            message.sessionTemplate = $root.google.spanner.v1.Session.fromObject(object.sessionTemplate);
                        }
                        if (object.sessionCount != null)
                            message.sessionCount = object.sessionCount | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a BatchCreateSessionsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.BatchCreateSessionsRequest
                     * @static
                     * @param {google.spanner.v1.BatchCreateSessionsRequest} message BatchCreateSessionsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    BatchCreateSessionsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.database = "";
                            object.sessionTemplate = null;
                            object.sessionCount = 0;
                        }
                        if (message.database != null && message.hasOwnProperty("database"))
                            object.database = message.database;
                        if (message.sessionTemplate != null && message.hasOwnProperty("sessionTemplate"))
                            object.sessionTemplate = $root.google.spanner.v1.Session.toObject(message.sessionTemplate, options);
                        if (message.sessionCount != null && message.hasOwnProperty("sessionCount"))
                            object.sessionCount = message.sessionCount;
                        return object;
                    };
    
                    /**
                     * Converts this BatchCreateSessionsRequest to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.BatchCreateSessionsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    BatchCreateSessionsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return BatchCreateSessionsRequest;
                })();
    
                v1.BatchCreateSessionsResponse = (function() {
    
                    /**
                     * Properties of a BatchCreateSessionsResponse.
                     * @memberof google.spanner.v1
                     * @interface IBatchCreateSessionsResponse
                     * @property {Array.<google.spanner.v1.ISession>|null} [session] BatchCreateSessionsResponse session
                     */
    
                    /**
                     * Constructs a new BatchCreateSessionsResponse.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a BatchCreateSessionsResponse.
                     * @implements IBatchCreateSessionsResponse
                     * @constructor
                     * @param {google.spanner.v1.IBatchCreateSessionsResponse=} [properties] Properties to set
                     */
                    function BatchCreateSessionsResponse(properties) {
                        this.session = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * BatchCreateSessionsResponse session.
                     * @member {Array.<google.spanner.v1.ISession>} session
                     * @memberof google.spanner.v1.BatchCreateSessionsResponse
                     * @instance
                     */
                    BatchCreateSessionsResponse.prototype.session = $util.emptyArray;
    
                    /**
                     * Creates a new BatchCreateSessionsResponse instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.BatchCreateSessionsResponse
                     * @static
                     * @param {google.spanner.v1.IBatchCreateSessionsResponse=} [properties] Properties to set
                     * @returns {google.spanner.v1.BatchCreateSessionsResponse} BatchCreateSessionsResponse instance
                     */
                    BatchCreateSessionsResponse.create = function create(properties) {
                        return new BatchCreateSessionsResponse(properties);
                    };
    
                    /**
                     * Encodes the specified BatchCreateSessionsResponse message. Does not implicitly {@link google.spanner.v1.BatchCreateSessionsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.BatchCreateSessionsResponse
                     * @static
                     * @param {google.spanner.v1.IBatchCreateSessionsResponse} message BatchCreateSessionsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BatchCreateSessionsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.session != null && message.session.length)
                            for (var i = 0; i < message.session.length; ++i)
                                $root.google.spanner.v1.Session.encode(message.session[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified BatchCreateSessionsResponse message, length delimited. Does not implicitly {@link google.spanner.v1.BatchCreateSessionsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.BatchCreateSessionsResponse
                     * @static
                     * @param {google.spanner.v1.IBatchCreateSessionsResponse} message BatchCreateSessionsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BatchCreateSessionsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a BatchCreateSessionsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.BatchCreateSessionsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.BatchCreateSessionsResponse} BatchCreateSessionsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BatchCreateSessionsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.BatchCreateSessionsResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.session && message.session.length))
                                    message.session = [];
                                message.session.push($root.google.spanner.v1.Session.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a BatchCreateSessionsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.BatchCreateSessionsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.BatchCreateSessionsResponse} BatchCreateSessionsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BatchCreateSessionsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a BatchCreateSessionsResponse message.
                     * @function verify
                     * @memberof google.spanner.v1.BatchCreateSessionsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    BatchCreateSessionsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.session != null && message.hasOwnProperty("session")) {
                            if (!Array.isArray(message.session))
                                return "session: array expected";
                            for (var i = 0; i < message.session.length; ++i) {
                                var error = $root.google.spanner.v1.Session.verify(message.session[i]);
                                if (error)
                                    return "session." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a BatchCreateSessionsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.BatchCreateSessionsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.BatchCreateSessionsResponse} BatchCreateSessionsResponse
                     */
                    BatchCreateSessionsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.BatchCreateSessionsResponse)
                            return object;
                        var message = new $root.google.spanner.v1.BatchCreateSessionsResponse();
                        if (object.session) {
                            if (!Array.isArray(object.session))
                                throw TypeError(".google.spanner.v1.BatchCreateSessionsResponse.session: array expected");
                            message.session = [];
                            for (var i = 0; i < object.session.length; ++i) {
                                if (typeof object.session[i] !== "object")
                                    throw TypeError(".google.spanner.v1.BatchCreateSessionsResponse.session: object expected");
                                message.session[i] = $root.google.spanner.v1.Session.fromObject(object.session[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a BatchCreateSessionsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.BatchCreateSessionsResponse
                     * @static
                     * @param {google.spanner.v1.BatchCreateSessionsResponse} message BatchCreateSessionsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    BatchCreateSessionsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.session = [];
                        if (message.session && message.session.length) {
                            object.session = [];
                            for (var j = 0; j < message.session.length; ++j)
                                object.session[j] = $root.google.spanner.v1.Session.toObject(message.session[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this BatchCreateSessionsResponse to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.BatchCreateSessionsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    BatchCreateSessionsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return BatchCreateSessionsResponse;
                })();
    
                v1.Session = (function() {
    
                    /**
                     * Properties of a Session.
                     * @memberof google.spanner.v1
                     * @interface ISession
                     * @property {string|null} [name] Session name
                     * @property {Object.<string,string>|null} [labels] Session labels
                     * @property {google.protobuf.ITimestamp|null} [createTime] Session createTime
                     * @property {google.protobuf.ITimestamp|null} [approximateLastUseTime] Session approximateLastUseTime
                     */
    
                    /**
                     * Constructs a new Session.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a Session.
                     * @implements ISession
                     * @constructor
                     * @param {google.spanner.v1.ISession=} [properties] Properties to set
                     */
                    function Session(properties) {
                        this.labels = {};
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Session name.
                     * @member {string} name
                     * @memberof google.spanner.v1.Session
                     * @instance
                     */
                    Session.prototype.name = "";
    
                    /**
                     * Session labels.
                     * @member {Object.<string,string>} labels
                     * @memberof google.spanner.v1.Session
                     * @instance
                     */
                    Session.prototype.labels = $util.emptyObject;
    
                    /**
                     * Session createTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} createTime
                     * @memberof google.spanner.v1.Session
                     * @instance
                     */
                    Session.prototype.createTime = null;
    
                    /**
                     * Session approximateLastUseTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} approximateLastUseTime
                     * @memberof google.spanner.v1.Session
                     * @instance
                     */
                    Session.prototype.approximateLastUseTime = null;
    
                    /**
                     * Creates a new Session instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.Session
                     * @static
                     * @param {google.spanner.v1.ISession=} [properties] Properties to set
                     * @returns {google.spanner.v1.Session} Session instance
                     */
                    Session.create = function create(properties) {
                        return new Session(properties);
                    };
    
                    /**
                     * Encodes the specified Session message. Does not implicitly {@link google.spanner.v1.Session.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.Session
                     * @static
                     * @param {google.spanner.v1.ISession} message Session message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Session.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                            for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.labels[keys[i]]).ldelim();
                        if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                            $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.approximateLastUseTime != null && Object.hasOwnProperty.call(message, "approximateLastUseTime"))
                            $root.google.protobuf.Timestamp.encode(message.approximateLastUseTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Session message, length delimited. Does not implicitly {@link google.spanner.v1.Session.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.Session
                     * @static
                     * @param {google.spanner.v1.ISession} message Session message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Session.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Session message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.Session
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.Session} Session
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Session.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.Session(), key;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            case 2:
                                reader.skip().pos++;
                                if (message.labels === $util.emptyObject)
                                    message.labels = {};
                                key = reader.string();
                                reader.pos++;
                                message.labels[key] = reader.string();
                                break;
                            case 3:
                                message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.approximateLastUseTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Session message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.Session
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.Session} Session
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Session.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Session message.
                     * @function verify
                     * @memberof google.spanner.v1.Session
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Session.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.labels != null && message.hasOwnProperty("labels")) {
                            if (!$util.isObject(message.labels))
                                return "labels: object expected";
                            var key = Object.keys(message.labels);
                            for (var i = 0; i < key.length; ++i)
                                if (!$util.isString(message.labels[key[i]]))
                                    return "labels: string{k:string} expected";
                        }
                        if (message.createTime != null && message.hasOwnProperty("createTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                            if (error)
                                return "createTime." + error;
                        }
                        if (message.approximateLastUseTime != null && message.hasOwnProperty("approximateLastUseTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.approximateLastUseTime);
                            if (error)
                                return "approximateLastUseTime." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Session message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.Session
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.Session} Session
                     */
                    Session.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.Session)
                            return object;
                        var message = new $root.google.spanner.v1.Session();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.labels) {
                            if (typeof object.labels !== "object")
                                throw TypeError(".google.spanner.v1.Session.labels: object expected");
                            message.labels = {};
                            for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                                message.labels[keys[i]] = String(object.labels[keys[i]]);
                        }
                        if (object.createTime != null) {
                            if (typeof object.createTime !== "object")
                                throw TypeError(".google.spanner.v1.Session.createTime: object expected");
                            message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                        }
                        if (object.approximateLastUseTime != null) {
                            if (typeof object.approximateLastUseTime !== "object")
                                throw TypeError(".google.spanner.v1.Session.approximateLastUseTime: object expected");
                            message.approximateLastUseTime = $root.google.protobuf.Timestamp.fromObject(object.approximateLastUseTime);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Session message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.Session
                     * @static
                     * @param {google.spanner.v1.Session} message Session
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Session.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.objects || options.defaults)
                            object.labels = {};
                        if (options.defaults) {
                            object.name = "";
                            object.createTime = null;
                            object.approximateLastUseTime = null;
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        var keys2;
                        if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                            object.labels = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.labels[keys2[j]] = message.labels[keys2[j]];
                        }
                        if (message.createTime != null && message.hasOwnProperty("createTime"))
                            object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                        if (message.approximateLastUseTime != null && message.hasOwnProperty("approximateLastUseTime"))
                            object.approximateLastUseTime = $root.google.protobuf.Timestamp.toObject(message.approximateLastUseTime, options);
                        return object;
                    };
    
                    /**
                     * Converts this Session to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.Session
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Session.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Session;
                })();
    
                v1.GetSessionRequest = (function() {
    
                    /**
                     * Properties of a GetSessionRequest.
                     * @memberof google.spanner.v1
                     * @interface IGetSessionRequest
                     * @property {string|null} [name] GetSessionRequest name
                     */
    
                    /**
                     * Constructs a new GetSessionRequest.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a GetSessionRequest.
                     * @implements IGetSessionRequest
                     * @constructor
                     * @param {google.spanner.v1.IGetSessionRequest=} [properties] Properties to set
                     */
                    function GetSessionRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GetSessionRequest name.
                     * @member {string} name
                     * @memberof google.spanner.v1.GetSessionRequest
                     * @instance
                     */
                    GetSessionRequest.prototype.name = "";
    
                    /**
                     * Creates a new GetSessionRequest instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.GetSessionRequest
                     * @static
                     * @param {google.spanner.v1.IGetSessionRequest=} [properties] Properties to set
                     * @returns {google.spanner.v1.GetSessionRequest} GetSessionRequest instance
                     */
                    GetSessionRequest.create = function create(properties) {
                        return new GetSessionRequest(properties);
                    };
    
                    /**
                     * Encodes the specified GetSessionRequest message. Does not implicitly {@link google.spanner.v1.GetSessionRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.GetSessionRequest
                     * @static
                     * @param {google.spanner.v1.IGetSessionRequest} message GetSessionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetSessionRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GetSessionRequest message, length delimited. Does not implicitly {@link google.spanner.v1.GetSessionRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.GetSessionRequest
                     * @static
                     * @param {google.spanner.v1.IGetSessionRequest} message GetSessionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetSessionRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GetSessionRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.GetSessionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.GetSessionRequest} GetSessionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetSessionRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.GetSessionRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GetSessionRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.GetSessionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.GetSessionRequest} GetSessionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetSessionRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GetSessionRequest message.
                     * @function verify
                     * @memberof google.spanner.v1.GetSessionRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetSessionRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a GetSessionRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.GetSessionRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.GetSessionRequest} GetSessionRequest
                     */
                    GetSessionRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.GetSessionRequest)
                            return object;
                        var message = new $root.google.spanner.v1.GetSessionRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GetSessionRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.GetSessionRequest
                     * @static
                     * @param {google.spanner.v1.GetSessionRequest} message GetSessionRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetSessionRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this GetSessionRequest to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.GetSessionRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetSessionRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return GetSessionRequest;
                })();
    
                v1.ListSessionsRequest = (function() {
    
                    /**
                     * Properties of a ListSessionsRequest.
                     * @memberof google.spanner.v1
                     * @interface IListSessionsRequest
                     * @property {string|null} [database] ListSessionsRequest database
                     * @property {number|null} [pageSize] ListSessionsRequest pageSize
                     * @property {string|null} [pageToken] ListSessionsRequest pageToken
                     * @property {string|null} [filter] ListSessionsRequest filter
                     */
    
                    /**
                     * Constructs a new ListSessionsRequest.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a ListSessionsRequest.
                     * @implements IListSessionsRequest
                     * @constructor
                     * @param {google.spanner.v1.IListSessionsRequest=} [properties] Properties to set
                     */
                    function ListSessionsRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListSessionsRequest database.
                     * @member {string} database
                     * @memberof google.spanner.v1.ListSessionsRequest
                     * @instance
                     */
                    ListSessionsRequest.prototype.database = "";
    
                    /**
                     * ListSessionsRequest pageSize.
                     * @member {number} pageSize
                     * @memberof google.spanner.v1.ListSessionsRequest
                     * @instance
                     */
                    ListSessionsRequest.prototype.pageSize = 0;
    
                    /**
                     * ListSessionsRequest pageToken.
                     * @member {string} pageToken
                     * @memberof google.spanner.v1.ListSessionsRequest
                     * @instance
                     */
                    ListSessionsRequest.prototype.pageToken = "";
    
                    /**
                     * ListSessionsRequest filter.
                     * @member {string} filter
                     * @memberof google.spanner.v1.ListSessionsRequest
                     * @instance
                     */
                    ListSessionsRequest.prototype.filter = "";
    
                    /**
                     * Creates a new ListSessionsRequest instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.ListSessionsRequest
                     * @static
                     * @param {google.spanner.v1.IListSessionsRequest=} [properties] Properties to set
                     * @returns {google.spanner.v1.ListSessionsRequest} ListSessionsRequest instance
                     */
                    ListSessionsRequest.create = function create(properties) {
                        return new ListSessionsRequest(properties);
                    };
    
                    /**
                     * Encodes the specified ListSessionsRequest message. Does not implicitly {@link google.spanner.v1.ListSessionsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.ListSessionsRequest
                     * @static
                     * @param {google.spanner.v1.IListSessionsRequest} message ListSessionsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListSessionsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.database != null && Object.hasOwnProperty.call(message, "database"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.database);
                        if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                        if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                        if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.filter);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListSessionsRequest message, length delimited. Does not implicitly {@link google.spanner.v1.ListSessionsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.ListSessionsRequest
                     * @static
                     * @param {google.spanner.v1.IListSessionsRequest} message ListSessionsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListSessionsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListSessionsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.ListSessionsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.ListSessionsRequest} ListSessionsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListSessionsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.ListSessionsRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.database = reader.string();
                                break;
                            case 2:
                                message.pageSize = reader.int32();
                                break;
                            case 3:
                                message.pageToken = reader.string();
                                break;
                            case 4:
                                message.filter = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListSessionsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.ListSessionsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.ListSessionsRequest} ListSessionsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListSessionsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListSessionsRequest message.
                     * @function verify
                     * @memberof google.spanner.v1.ListSessionsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListSessionsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.database != null && message.hasOwnProperty("database"))
                            if (!$util.isString(message.database))
                                return "database: string expected";
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            if (!$util.isInteger(message.pageSize))
                                return "pageSize: integer expected";
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            if (!$util.isString(message.pageToken))
                                return "pageToken: string expected";
                        if (message.filter != null && message.hasOwnProperty("filter"))
                            if (!$util.isString(message.filter))
                                return "filter: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListSessionsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.ListSessionsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.ListSessionsRequest} ListSessionsRequest
                     */
                    ListSessionsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.ListSessionsRequest)
                            return object;
                        var message = new $root.google.spanner.v1.ListSessionsRequest();
                        if (object.database != null)
                            message.database = String(object.database);
                        if (object.pageSize != null)
                            message.pageSize = object.pageSize | 0;
                        if (object.pageToken != null)
                            message.pageToken = String(object.pageToken);
                        if (object.filter != null)
                            message.filter = String(object.filter);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListSessionsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.ListSessionsRequest
                     * @static
                     * @param {google.spanner.v1.ListSessionsRequest} message ListSessionsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListSessionsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.database = "";
                            object.pageSize = 0;
                            object.pageToken = "";
                            object.filter = "";
                        }
                        if (message.database != null && message.hasOwnProperty("database"))
                            object.database = message.database;
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            object.pageSize = message.pageSize;
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            object.pageToken = message.pageToken;
                        if (message.filter != null && message.hasOwnProperty("filter"))
                            object.filter = message.filter;
                        return object;
                    };
    
                    /**
                     * Converts this ListSessionsRequest to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.ListSessionsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListSessionsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ListSessionsRequest;
                })();
    
                v1.ListSessionsResponse = (function() {
    
                    /**
                     * Properties of a ListSessionsResponse.
                     * @memberof google.spanner.v1
                     * @interface IListSessionsResponse
                     * @property {Array.<google.spanner.v1.ISession>|null} [sessions] ListSessionsResponse sessions
                     * @property {string|null} [nextPageToken] ListSessionsResponse nextPageToken
                     */
    
                    /**
                     * Constructs a new ListSessionsResponse.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a ListSessionsResponse.
                     * @implements IListSessionsResponse
                     * @constructor
                     * @param {google.spanner.v1.IListSessionsResponse=} [properties] Properties to set
                     */
                    function ListSessionsResponse(properties) {
                        this.sessions = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListSessionsResponse sessions.
                     * @member {Array.<google.spanner.v1.ISession>} sessions
                     * @memberof google.spanner.v1.ListSessionsResponse
                     * @instance
                     */
                    ListSessionsResponse.prototype.sessions = $util.emptyArray;
    
                    /**
                     * ListSessionsResponse nextPageToken.
                     * @member {string} nextPageToken
                     * @memberof google.spanner.v1.ListSessionsResponse
                     * @instance
                     */
                    ListSessionsResponse.prototype.nextPageToken = "";
    
                    /**
                     * Creates a new ListSessionsResponse instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.ListSessionsResponse
                     * @static
                     * @param {google.spanner.v1.IListSessionsResponse=} [properties] Properties to set
                     * @returns {google.spanner.v1.ListSessionsResponse} ListSessionsResponse instance
                     */
                    ListSessionsResponse.create = function create(properties) {
                        return new ListSessionsResponse(properties);
                    };
    
                    /**
                     * Encodes the specified ListSessionsResponse message. Does not implicitly {@link google.spanner.v1.ListSessionsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.ListSessionsResponse
                     * @static
                     * @param {google.spanner.v1.IListSessionsResponse} message ListSessionsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListSessionsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sessions != null && message.sessions.length)
                            for (var i = 0; i < message.sessions.length; ++i)
                                $root.google.spanner.v1.Session.encode(message.sessions[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListSessionsResponse message, length delimited. Does not implicitly {@link google.spanner.v1.ListSessionsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.ListSessionsResponse
                     * @static
                     * @param {google.spanner.v1.IListSessionsResponse} message ListSessionsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListSessionsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListSessionsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.ListSessionsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.ListSessionsResponse} ListSessionsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListSessionsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.ListSessionsResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.sessions && message.sessions.length))
                                    message.sessions = [];
                                message.sessions.push($root.google.spanner.v1.Session.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.nextPageToken = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListSessionsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.ListSessionsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.ListSessionsResponse} ListSessionsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListSessionsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListSessionsResponse message.
                     * @function verify
                     * @memberof google.spanner.v1.ListSessionsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListSessionsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sessions != null && message.hasOwnProperty("sessions")) {
                            if (!Array.isArray(message.sessions))
                                return "sessions: array expected";
                            for (var i = 0; i < message.sessions.length; ++i) {
                                var error = $root.google.spanner.v1.Session.verify(message.sessions[i]);
                                if (error)
                                    return "sessions." + error;
                            }
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            if (!$util.isString(message.nextPageToken))
                                return "nextPageToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListSessionsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.ListSessionsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.ListSessionsResponse} ListSessionsResponse
                     */
                    ListSessionsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.ListSessionsResponse)
                            return object;
                        var message = new $root.google.spanner.v1.ListSessionsResponse();
                        if (object.sessions) {
                            if (!Array.isArray(object.sessions))
                                throw TypeError(".google.spanner.v1.ListSessionsResponse.sessions: array expected");
                            message.sessions = [];
                            for (var i = 0; i < object.sessions.length; ++i) {
                                if (typeof object.sessions[i] !== "object")
                                    throw TypeError(".google.spanner.v1.ListSessionsResponse.sessions: object expected");
                                message.sessions[i] = $root.google.spanner.v1.Session.fromObject(object.sessions[i]);
                            }
                        }
                        if (object.nextPageToken != null)
                            message.nextPageToken = String(object.nextPageToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListSessionsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.ListSessionsResponse
                     * @static
                     * @param {google.spanner.v1.ListSessionsResponse} message ListSessionsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListSessionsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.sessions = [];
                        if (options.defaults)
                            object.nextPageToken = "";
                        if (message.sessions && message.sessions.length) {
                            object.sessions = [];
                            for (var j = 0; j < message.sessions.length; ++j)
                                object.sessions[j] = $root.google.spanner.v1.Session.toObject(message.sessions[j], options);
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            object.nextPageToken = message.nextPageToken;
                        return object;
                    };
    
                    /**
                     * Converts this ListSessionsResponse to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.ListSessionsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListSessionsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ListSessionsResponse;
                })();
    
                v1.DeleteSessionRequest = (function() {
    
                    /**
                     * Properties of a DeleteSessionRequest.
                     * @memberof google.spanner.v1
                     * @interface IDeleteSessionRequest
                     * @property {string|null} [name] DeleteSessionRequest name
                     */
    
                    /**
                     * Constructs a new DeleteSessionRequest.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a DeleteSessionRequest.
                     * @implements IDeleteSessionRequest
                     * @constructor
                     * @param {google.spanner.v1.IDeleteSessionRequest=} [properties] Properties to set
                     */
                    function DeleteSessionRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DeleteSessionRequest name.
                     * @member {string} name
                     * @memberof google.spanner.v1.DeleteSessionRequest
                     * @instance
                     */
                    DeleteSessionRequest.prototype.name = "";
    
                    /**
                     * Creates a new DeleteSessionRequest instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.DeleteSessionRequest
                     * @static
                     * @param {google.spanner.v1.IDeleteSessionRequest=} [properties] Properties to set
                     * @returns {google.spanner.v1.DeleteSessionRequest} DeleteSessionRequest instance
                     */
                    DeleteSessionRequest.create = function create(properties) {
                        return new DeleteSessionRequest(properties);
                    };
    
                    /**
                     * Encodes the specified DeleteSessionRequest message. Does not implicitly {@link google.spanner.v1.DeleteSessionRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.DeleteSessionRequest
                     * @static
                     * @param {google.spanner.v1.IDeleteSessionRequest} message DeleteSessionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteSessionRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DeleteSessionRequest message, length delimited. Does not implicitly {@link google.spanner.v1.DeleteSessionRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.DeleteSessionRequest
                     * @static
                     * @param {google.spanner.v1.IDeleteSessionRequest} message DeleteSessionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteSessionRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DeleteSessionRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.DeleteSessionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.DeleteSessionRequest} DeleteSessionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteSessionRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.DeleteSessionRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DeleteSessionRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.DeleteSessionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.DeleteSessionRequest} DeleteSessionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteSessionRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DeleteSessionRequest message.
                     * @function verify
                     * @memberof google.spanner.v1.DeleteSessionRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DeleteSessionRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DeleteSessionRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.DeleteSessionRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.DeleteSessionRequest} DeleteSessionRequest
                     */
                    DeleteSessionRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.DeleteSessionRequest)
                            return object;
                        var message = new $root.google.spanner.v1.DeleteSessionRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DeleteSessionRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.DeleteSessionRequest
                     * @static
                     * @param {google.spanner.v1.DeleteSessionRequest} message DeleteSessionRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DeleteSessionRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this DeleteSessionRequest to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.DeleteSessionRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DeleteSessionRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DeleteSessionRequest;
                })();
    
                v1.ExecuteSqlRequest = (function() {
    
                    /**
                     * Properties of an ExecuteSqlRequest.
                     * @memberof google.spanner.v1
                     * @interface IExecuteSqlRequest
                     * @property {string|null} [session] ExecuteSqlRequest session
                     * @property {google.spanner.v1.ITransactionSelector|null} [transaction] ExecuteSqlRequest transaction
                     * @property {string|null} [sql] ExecuteSqlRequest sql
                     * @property {google.protobuf.IStruct|null} [params] ExecuteSqlRequest params
                     * @property {Object.<string,google.spanner.v1.IType>|null} [paramTypes] ExecuteSqlRequest paramTypes
                     * @property {Uint8Array|null} [resumeToken] ExecuteSqlRequest resumeToken
                     * @property {google.spanner.v1.ExecuteSqlRequest.QueryMode|null} [queryMode] ExecuteSqlRequest queryMode
                     * @property {Uint8Array|null} [partitionToken] ExecuteSqlRequest partitionToken
                     * @property {number|Long|null} [seqno] ExecuteSqlRequest seqno
                     * @property {google.spanner.v1.ExecuteSqlRequest.IQueryOptions|null} [queryOptions] ExecuteSqlRequest queryOptions
                     */
    
                    /**
                     * Constructs a new ExecuteSqlRequest.
                     * @memberof google.spanner.v1
                     * @classdesc Represents an ExecuteSqlRequest.
                     * @implements IExecuteSqlRequest
                     * @constructor
                     * @param {google.spanner.v1.IExecuteSqlRequest=} [properties] Properties to set
                     */
                    function ExecuteSqlRequest(properties) {
                        this.paramTypes = {};
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExecuteSqlRequest session.
                     * @member {string} session
                     * @memberof google.spanner.v1.ExecuteSqlRequest
                     * @instance
                     */
                    ExecuteSqlRequest.prototype.session = "";
    
                    /**
                     * ExecuteSqlRequest transaction.
                     * @member {google.spanner.v1.ITransactionSelector|null|undefined} transaction
                     * @memberof google.spanner.v1.ExecuteSqlRequest
                     * @instance
                     */
                    ExecuteSqlRequest.prototype.transaction = null;
    
                    /**
                     * ExecuteSqlRequest sql.
                     * @member {string} sql
                     * @memberof google.spanner.v1.ExecuteSqlRequest
                     * @instance
                     */
                    ExecuteSqlRequest.prototype.sql = "";
    
                    /**
                     * ExecuteSqlRequest params.
                     * @member {google.protobuf.IStruct|null|undefined} params
                     * @memberof google.spanner.v1.ExecuteSqlRequest
                     * @instance
                     */
                    ExecuteSqlRequest.prototype.params = null;
    
                    /**
                     * ExecuteSqlRequest paramTypes.
                     * @member {Object.<string,google.spanner.v1.IType>} paramTypes
                     * @memberof google.spanner.v1.ExecuteSqlRequest
                     * @instance
                     */
                    ExecuteSqlRequest.prototype.paramTypes = $util.emptyObject;
    
                    /**
                     * ExecuteSqlRequest resumeToken.
                     * @member {Uint8Array} resumeToken
                     * @memberof google.spanner.v1.ExecuteSqlRequest
                     * @instance
                     */
                    ExecuteSqlRequest.prototype.resumeToken = $util.newBuffer([]);
    
                    /**
                     * ExecuteSqlRequest queryMode.
                     * @member {google.spanner.v1.ExecuteSqlRequest.QueryMode} queryMode
                     * @memberof google.spanner.v1.ExecuteSqlRequest
                     * @instance
                     */
                    ExecuteSqlRequest.prototype.queryMode = 0;
    
                    /**
                     * ExecuteSqlRequest partitionToken.
                     * @member {Uint8Array} partitionToken
                     * @memberof google.spanner.v1.ExecuteSqlRequest
                     * @instance
                     */
                    ExecuteSqlRequest.prototype.partitionToken = $util.newBuffer([]);
    
                    /**
                     * ExecuteSqlRequest seqno.
                     * @member {number|Long} seqno
                     * @memberof google.spanner.v1.ExecuteSqlRequest
                     * @instance
                     */
                    ExecuteSqlRequest.prototype.seqno = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * ExecuteSqlRequest queryOptions.
                     * @member {google.spanner.v1.ExecuteSqlRequest.IQueryOptions|null|undefined} queryOptions
                     * @memberof google.spanner.v1.ExecuteSqlRequest
                     * @instance
                     */
                    ExecuteSqlRequest.prototype.queryOptions = null;
    
                    /**
                     * Creates a new ExecuteSqlRequest instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.ExecuteSqlRequest
                     * @static
                     * @param {google.spanner.v1.IExecuteSqlRequest=} [properties] Properties to set
                     * @returns {google.spanner.v1.ExecuteSqlRequest} ExecuteSqlRequest instance
                     */
                    ExecuteSqlRequest.create = function create(properties) {
                        return new ExecuteSqlRequest(properties);
                    };
    
                    /**
                     * Encodes the specified ExecuteSqlRequest message. Does not implicitly {@link google.spanner.v1.ExecuteSqlRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.ExecuteSqlRequest
                     * @static
                     * @param {google.spanner.v1.IExecuteSqlRequest} message ExecuteSqlRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExecuteSqlRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.session != null && Object.hasOwnProperty.call(message, "session"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.session);
                        if (message.transaction != null && Object.hasOwnProperty.call(message, "transaction"))
                            $root.google.spanner.v1.TransactionSelector.encode(message.transaction, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.sql != null && Object.hasOwnProperty.call(message, "sql"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.sql);
                        if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                            $root.google.protobuf.Struct.encode(message.params, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.paramTypes != null && Object.hasOwnProperty.call(message, "paramTypes"))
                            for (var keys = Object.keys(message.paramTypes), i = 0; i < keys.length; ++i) {
                                writer.uint32(/* id 5, wireType 2 =*/42).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                $root.google.spanner.v1.Type.encode(message.paramTypes[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                            }
                        if (message.resumeToken != null && Object.hasOwnProperty.call(message, "resumeToken"))
                            writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.resumeToken);
                        if (message.queryMode != null && Object.hasOwnProperty.call(message, "queryMode"))
                            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.queryMode);
                        if (message.partitionToken != null && Object.hasOwnProperty.call(message, "partitionToken"))
                            writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.partitionToken);
                        if (message.seqno != null && Object.hasOwnProperty.call(message, "seqno"))
                            writer.uint32(/* id 9, wireType 0 =*/72).int64(message.seqno);
                        if (message.queryOptions != null && Object.hasOwnProperty.call(message, "queryOptions"))
                            $root.google.spanner.v1.ExecuteSqlRequest.QueryOptions.encode(message.queryOptions, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExecuteSqlRequest message, length delimited. Does not implicitly {@link google.spanner.v1.ExecuteSqlRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.ExecuteSqlRequest
                     * @static
                     * @param {google.spanner.v1.IExecuteSqlRequest} message ExecuteSqlRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExecuteSqlRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExecuteSqlRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.ExecuteSqlRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.ExecuteSqlRequest} ExecuteSqlRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExecuteSqlRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.ExecuteSqlRequest(), key;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.session = reader.string();
                                break;
                            case 2:
                                message.transaction = $root.google.spanner.v1.TransactionSelector.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.sql = reader.string();
                                break;
                            case 4:
                                message.params = $root.google.protobuf.Struct.decode(reader, reader.uint32());
                                break;
                            case 5:
                                reader.skip().pos++;
                                if (message.paramTypes === $util.emptyObject)
                                    message.paramTypes = {};
                                key = reader.string();
                                reader.pos++;
                                message.paramTypes[key] = $root.google.spanner.v1.Type.decode(reader, reader.uint32());
                                break;
                            case 6:
                                message.resumeToken = reader.bytes();
                                break;
                            case 7:
                                message.queryMode = reader.int32();
                                break;
                            case 8:
                                message.partitionToken = reader.bytes();
                                break;
                            case 9:
                                message.seqno = reader.int64();
                                break;
                            case 10:
                                message.queryOptions = $root.google.spanner.v1.ExecuteSqlRequest.QueryOptions.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExecuteSqlRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.ExecuteSqlRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.ExecuteSqlRequest} ExecuteSqlRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExecuteSqlRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExecuteSqlRequest message.
                     * @function verify
                     * @memberof google.spanner.v1.ExecuteSqlRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExecuteSqlRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.session != null && message.hasOwnProperty("session"))
                            if (!$util.isString(message.session))
                                return "session: string expected";
                        if (message.transaction != null && message.hasOwnProperty("transaction")) {
                            var error = $root.google.spanner.v1.TransactionSelector.verify(message.transaction);
                            if (error)
                                return "transaction." + error;
                        }
                        if (message.sql != null && message.hasOwnProperty("sql"))
                            if (!$util.isString(message.sql))
                                return "sql: string expected";
                        if (message.params != null && message.hasOwnProperty("params")) {
                            var error = $root.google.protobuf.Struct.verify(message.params);
                            if (error)
                                return "params." + error;
                        }
                        if (message.paramTypes != null && message.hasOwnProperty("paramTypes")) {
                            if (!$util.isObject(message.paramTypes))
                                return "paramTypes: object expected";
                            var key = Object.keys(message.paramTypes);
                            for (var i = 0; i < key.length; ++i) {
                                var error = $root.google.spanner.v1.Type.verify(message.paramTypes[key[i]]);
                                if (error)
                                    return "paramTypes." + error;
                            }
                        }
                        if (message.resumeToken != null && message.hasOwnProperty("resumeToken"))
                            if (!(message.resumeToken && typeof message.resumeToken.length === "number" || $util.isString(message.resumeToken)))
                                return "resumeToken: buffer expected";
                        if (message.queryMode != null && message.hasOwnProperty("queryMode"))
                            switch (message.queryMode) {
                            default:
                                return "queryMode: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.partitionToken != null && message.hasOwnProperty("partitionToken"))
                            if (!(message.partitionToken && typeof message.partitionToken.length === "number" || $util.isString(message.partitionToken)))
                                return "partitionToken: buffer expected";
                        if (message.seqno != null && message.hasOwnProperty("seqno"))
                            if (!$util.isInteger(message.seqno) && !(message.seqno && $util.isInteger(message.seqno.low) && $util.isInteger(message.seqno.high)))
                                return "seqno: integer|Long expected";
                        if (message.queryOptions != null && message.hasOwnProperty("queryOptions")) {
                            var error = $root.google.spanner.v1.ExecuteSqlRequest.QueryOptions.verify(message.queryOptions);
                            if (error)
                                return "queryOptions." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an ExecuteSqlRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.ExecuteSqlRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.ExecuteSqlRequest} ExecuteSqlRequest
                     */
                    ExecuteSqlRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.ExecuteSqlRequest)
                            return object;
                        var message = new $root.google.spanner.v1.ExecuteSqlRequest();
                        if (object.session != null)
                            message.session = String(object.session);
                        if (object.transaction != null) {
                            if (typeof object.transaction !== "object")
                                throw TypeError(".google.spanner.v1.ExecuteSqlRequest.transaction: object expected");
                            message.transaction = $root.google.spanner.v1.TransactionSelector.fromObject(object.transaction);
                        }
                        if (object.sql != null)
                            message.sql = String(object.sql);
                        if (object.params != null) {
                            if (typeof object.params !== "object")
                                throw TypeError(".google.spanner.v1.ExecuteSqlRequest.params: object expected");
                            message.params = $root.google.protobuf.Struct.fromObject(object.params);
                        }
                        if (object.paramTypes) {
                            if (typeof object.paramTypes !== "object")
                                throw TypeError(".google.spanner.v1.ExecuteSqlRequest.paramTypes: object expected");
                            message.paramTypes = {};
                            for (var keys = Object.keys(object.paramTypes), i = 0; i < keys.length; ++i) {
                                if (typeof object.paramTypes[keys[i]] !== "object")
                                    throw TypeError(".google.spanner.v1.ExecuteSqlRequest.paramTypes: object expected");
                                message.paramTypes[keys[i]] = $root.google.spanner.v1.Type.fromObject(object.paramTypes[keys[i]]);
                            }
                        }
                        if (object.resumeToken != null)
                            if (typeof object.resumeToken === "string")
                                $util.base64.decode(object.resumeToken, message.resumeToken = $util.newBuffer($util.base64.length(object.resumeToken)), 0);
                            else if (object.resumeToken.length)
                                message.resumeToken = object.resumeToken;
                        switch (object.queryMode) {
                        case "NORMAL":
                        case 0:
                            message.queryMode = 0;
                            break;
                        case "PLAN":
                        case 1:
                            message.queryMode = 1;
                            break;
                        case "PROFILE":
                        case 2:
                            message.queryMode = 2;
                            break;
                        }
                        if (object.partitionToken != null)
                            if (typeof object.partitionToken === "string")
                                $util.base64.decode(object.partitionToken, message.partitionToken = $util.newBuffer($util.base64.length(object.partitionToken)), 0);
                            else if (object.partitionToken.length)
                                message.partitionToken = object.partitionToken;
                        if (object.seqno != null)
                            if ($util.Long)
                                (message.seqno = $util.Long.fromValue(object.seqno)).unsigned = false;
                            else if (typeof object.seqno === "string")
                                message.seqno = parseInt(object.seqno, 10);
                            else if (typeof object.seqno === "number")
                                message.seqno = object.seqno;
                            else if (typeof object.seqno === "object")
                                message.seqno = new $util.LongBits(object.seqno.low >>> 0, object.seqno.high >>> 0).toNumber();
                        if (object.queryOptions != null) {
                            if (typeof object.queryOptions !== "object")
                                throw TypeError(".google.spanner.v1.ExecuteSqlRequest.queryOptions: object expected");
                            message.queryOptions = $root.google.spanner.v1.ExecuteSqlRequest.QueryOptions.fromObject(object.queryOptions);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExecuteSqlRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.ExecuteSqlRequest
                     * @static
                     * @param {google.spanner.v1.ExecuteSqlRequest} message ExecuteSqlRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExecuteSqlRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.objects || options.defaults)
                            object.paramTypes = {};
                        if (options.defaults) {
                            object.session = "";
                            object.transaction = null;
                            object.sql = "";
                            object.params = null;
                            if (options.bytes === String)
                                object.resumeToken = "";
                            else {
                                object.resumeToken = [];
                                if (options.bytes !== Array)
                                    object.resumeToken = $util.newBuffer(object.resumeToken);
                            }
                            object.queryMode = options.enums === String ? "NORMAL" : 0;
                            if (options.bytes === String)
                                object.partitionToken = "";
                            else {
                                object.partitionToken = [];
                                if (options.bytes !== Array)
                                    object.partitionToken = $util.newBuffer(object.partitionToken);
                            }
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.seqno = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.seqno = options.longs === String ? "0" : 0;
                            object.queryOptions = null;
                        }
                        if (message.session != null && message.hasOwnProperty("session"))
                            object.session = message.session;
                        if (message.transaction != null && message.hasOwnProperty("transaction"))
                            object.transaction = $root.google.spanner.v1.TransactionSelector.toObject(message.transaction, options);
                        if (message.sql != null && message.hasOwnProperty("sql"))
                            object.sql = message.sql;
                        if (message.params != null && message.hasOwnProperty("params"))
                            object.params = $root.google.protobuf.Struct.toObject(message.params, options);
                        var keys2;
                        if (message.paramTypes && (keys2 = Object.keys(message.paramTypes)).length) {
                            object.paramTypes = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.paramTypes[keys2[j]] = $root.google.spanner.v1.Type.toObject(message.paramTypes[keys2[j]], options);
                        }
                        if (message.resumeToken != null && message.hasOwnProperty("resumeToken"))
                            object.resumeToken = options.bytes === String ? $util.base64.encode(message.resumeToken, 0, message.resumeToken.length) : options.bytes === Array ? Array.prototype.slice.call(message.resumeToken) : message.resumeToken;
                        if (message.queryMode != null && message.hasOwnProperty("queryMode"))
                            object.queryMode = options.enums === String ? $root.google.spanner.v1.ExecuteSqlRequest.QueryMode[message.queryMode] : message.queryMode;
                        if (message.partitionToken != null && message.hasOwnProperty("partitionToken"))
                            object.partitionToken = options.bytes === String ? $util.base64.encode(message.partitionToken, 0, message.partitionToken.length) : options.bytes === Array ? Array.prototype.slice.call(message.partitionToken) : message.partitionToken;
                        if (message.seqno != null && message.hasOwnProperty("seqno"))
                            if (typeof message.seqno === "number")
                                object.seqno = options.longs === String ? String(message.seqno) : message.seqno;
                            else
                                object.seqno = options.longs === String ? $util.Long.prototype.toString.call(message.seqno) : options.longs === Number ? new $util.LongBits(message.seqno.low >>> 0, message.seqno.high >>> 0).toNumber() : message.seqno;
                        if (message.queryOptions != null && message.hasOwnProperty("queryOptions"))
                            object.queryOptions = $root.google.spanner.v1.ExecuteSqlRequest.QueryOptions.toObject(message.queryOptions, options);
                        return object;
                    };
    
                    /**
                     * Converts this ExecuteSqlRequest to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.ExecuteSqlRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExecuteSqlRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    ExecuteSqlRequest.QueryOptions = (function() {
    
                        /**
                         * Properties of a QueryOptions.
                         * @memberof google.spanner.v1.ExecuteSqlRequest
                         * @interface IQueryOptions
                         * @property {string|null} [optimizerVersion] QueryOptions optimizerVersion
                         */
    
                        /**
                         * Constructs a new QueryOptions.
                         * @memberof google.spanner.v1.ExecuteSqlRequest
                         * @classdesc Represents a QueryOptions.
                         * @implements IQueryOptions
                         * @constructor
                         * @param {google.spanner.v1.ExecuteSqlRequest.IQueryOptions=} [properties] Properties to set
                         */
                        function QueryOptions(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * QueryOptions optimizerVersion.
                         * @member {string} optimizerVersion
                         * @memberof google.spanner.v1.ExecuteSqlRequest.QueryOptions
                         * @instance
                         */
                        QueryOptions.prototype.optimizerVersion = "";
    
                        /**
                         * Creates a new QueryOptions instance using the specified properties.
                         * @function create
                         * @memberof google.spanner.v1.ExecuteSqlRequest.QueryOptions
                         * @static
                         * @param {google.spanner.v1.ExecuteSqlRequest.IQueryOptions=} [properties] Properties to set
                         * @returns {google.spanner.v1.ExecuteSqlRequest.QueryOptions} QueryOptions instance
                         */
                        QueryOptions.create = function create(properties) {
                            return new QueryOptions(properties);
                        };
    
                        /**
                         * Encodes the specified QueryOptions message. Does not implicitly {@link google.spanner.v1.ExecuteSqlRequest.QueryOptions.verify|verify} messages.
                         * @function encode
                         * @memberof google.spanner.v1.ExecuteSqlRequest.QueryOptions
                         * @static
                         * @param {google.spanner.v1.ExecuteSqlRequest.IQueryOptions} message QueryOptions message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QueryOptions.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.optimizerVersion != null && Object.hasOwnProperty.call(message, "optimizerVersion"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.optimizerVersion);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified QueryOptions message, length delimited. Does not implicitly {@link google.spanner.v1.ExecuteSqlRequest.QueryOptions.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.spanner.v1.ExecuteSqlRequest.QueryOptions
                         * @static
                         * @param {google.spanner.v1.ExecuteSqlRequest.IQueryOptions} message QueryOptions message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QueryOptions.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a QueryOptions message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.spanner.v1.ExecuteSqlRequest.QueryOptions
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.spanner.v1.ExecuteSqlRequest.QueryOptions} QueryOptions
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QueryOptions.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.ExecuteSqlRequest.QueryOptions();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.optimizerVersion = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a QueryOptions message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.spanner.v1.ExecuteSqlRequest.QueryOptions
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.spanner.v1.ExecuteSqlRequest.QueryOptions} QueryOptions
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QueryOptions.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a QueryOptions message.
                         * @function verify
                         * @memberof google.spanner.v1.ExecuteSqlRequest.QueryOptions
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        QueryOptions.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.optimizerVersion != null && message.hasOwnProperty("optimizerVersion"))
                                if (!$util.isString(message.optimizerVersion))
                                    return "optimizerVersion: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a QueryOptions message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.spanner.v1.ExecuteSqlRequest.QueryOptions
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.spanner.v1.ExecuteSqlRequest.QueryOptions} QueryOptions
                         */
                        QueryOptions.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.spanner.v1.ExecuteSqlRequest.QueryOptions)
                                return object;
                            var message = new $root.google.spanner.v1.ExecuteSqlRequest.QueryOptions();
                            if (object.optimizerVersion != null)
                                message.optimizerVersion = String(object.optimizerVersion);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a QueryOptions message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.spanner.v1.ExecuteSqlRequest.QueryOptions
                         * @static
                         * @param {google.spanner.v1.ExecuteSqlRequest.QueryOptions} message QueryOptions
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        QueryOptions.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.optimizerVersion = "";
                            if (message.optimizerVersion != null && message.hasOwnProperty("optimizerVersion"))
                                object.optimizerVersion = message.optimizerVersion;
                            return object;
                        };
    
                        /**
                         * Converts this QueryOptions to JSON.
                         * @function toJSON
                         * @memberof google.spanner.v1.ExecuteSqlRequest.QueryOptions
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        QueryOptions.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return QueryOptions;
                    })();
    
                    /**
                     * QueryMode enum.
                     * @name google.spanner.v1.ExecuteSqlRequest.QueryMode
                     * @enum {number}
                     * @property {number} NORMAL=0 NORMAL value
                     * @property {number} PLAN=1 PLAN value
                     * @property {number} PROFILE=2 PROFILE value
                     */
                    ExecuteSqlRequest.QueryMode = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "NORMAL"] = 0;
                        values[valuesById[1] = "PLAN"] = 1;
                        values[valuesById[2] = "PROFILE"] = 2;
                        return values;
                    })();
    
                    return ExecuteSqlRequest;
                })();
    
                v1.ExecuteBatchDmlRequest = (function() {
    
                    /**
                     * Properties of an ExecuteBatchDmlRequest.
                     * @memberof google.spanner.v1
                     * @interface IExecuteBatchDmlRequest
                     * @property {string|null} [session] ExecuteBatchDmlRequest session
                     * @property {google.spanner.v1.ITransactionSelector|null} [transaction] ExecuteBatchDmlRequest transaction
                     * @property {Array.<google.spanner.v1.ExecuteBatchDmlRequest.IStatement>|null} [statements] ExecuteBatchDmlRequest statements
                     * @property {number|Long|null} [seqno] ExecuteBatchDmlRequest seqno
                     */
    
                    /**
                     * Constructs a new ExecuteBatchDmlRequest.
                     * @memberof google.spanner.v1
                     * @classdesc Represents an ExecuteBatchDmlRequest.
                     * @implements IExecuteBatchDmlRequest
                     * @constructor
                     * @param {google.spanner.v1.IExecuteBatchDmlRequest=} [properties] Properties to set
                     */
                    function ExecuteBatchDmlRequest(properties) {
                        this.statements = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExecuteBatchDmlRequest session.
                     * @member {string} session
                     * @memberof google.spanner.v1.ExecuteBatchDmlRequest
                     * @instance
                     */
                    ExecuteBatchDmlRequest.prototype.session = "";
    
                    /**
                     * ExecuteBatchDmlRequest transaction.
                     * @member {google.spanner.v1.ITransactionSelector|null|undefined} transaction
                     * @memberof google.spanner.v1.ExecuteBatchDmlRequest
                     * @instance
                     */
                    ExecuteBatchDmlRequest.prototype.transaction = null;
    
                    /**
                     * ExecuteBatchDmlRequest statements.
                     * @member {Array.<google.spanner.v1.ExecuteBatchDmlRequest.IStatement>} statements
                     * @memberof google.spanner.v1.ExecuteBatchDmlRequest
                     * @instance
                     */
                    ExecuteBatchDmlRequest.prototype.statements = $util.emptyArray;
    
                    /**
                     * ExecuteBatchDmlRequest seqno.
                     * @member {number|Long} seqno
                     * @memberof google.spanner.v1.ExecuteBatchDmlRequest
                     * @instance
                     */
                    ExecuteBatchDmlRequest.prototype.seqno = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * Creates a new ExecuteBatchDmlRequest instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.ExecuteBatchDmlRequest
                     * @static
                     * @param {google.spanner.v1.IExecuteBatchDmlRequest=} [properties] Properties to set
                     * @returns {google.spanner.v1.ExecuteBatchDmlRequest} ExecuteBatchDmlRequest instance
                     */
                    ExecuteBatchDmlRequest.create = function create(properties) {
                        return new ExecuteBatchDmlRequest(properties);
                    };
    
                    /**
                     * Encodes the specified ExecuteBatchDmlRequest message. Does not implicitly {@link google.spanner.v1.ExecuteBatchDmlRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.ExecuteBatchDmlRequest
                     * @static
                     * @param {google.spanner.v1.IExecuteBatchDmlRequest} message ExecuteBatchDmlRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExecuteBatchDmlRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.session != null && Object.hasOwnProperty.call(message, "session"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.session);
                        if (message.transaction != null && Object.hasOwnProperty.call(message, "transaction"))
                            $root.google.spanner.v1.TransactionSelector.encode(message.transaction, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.statements != null && message.statements.length)
                            for (var i = 0; i < message.statements.length; ++i)
                                $root.google.spanner.v1.ExecuteBatchDmlRequest.Statement.encode(message.statements[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.seqno != null && Object.hasOwnProperty.call(message, "seqno"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.seqno);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExecuteBatchDmlRequest message, length delimited. Does not implicitly {@link google.spanner.v1.ExecuteBatchDmlRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.ExecuteBatchDmlRequest
                     * @static
                     * @param {google.spanner.v1.IExecuteBatchDmlRequest} message ExecuteBatchDmlRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExecuteBatchDmlRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExecuteBatchDmlRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.ExecuteBatchDmlRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.ExecuteBatchDmlRequest} ExecuteBatchDmlRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExecuteBatchDmlRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.ExecuteBatchDmlRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.session = reader.string();
                                break;
                            case 2:
                                message.transaction = $root.google.spanner.v1.TransactionSelector.decode(reader, reader.uint32());
                                break;
                            case 3:
                                if (!(message.statements && message.statements.length))
                                    message.statements = [];
                                message.statements.push($root.google.spanner.v1.ExecuteBatchDmlRequest.Statement.decode(reader, reader.uint32()));
                                break;
                            case 4:
                                message.seqno = reader.int64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExecuteBatchDmlRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.ExecuteBatchDmlRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.ExecuteBatchDmlRequest} ExecuteBatchDmlRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExecuteBatchDmlRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExecuteBatchDmlRequest message.
                     * @function verify
                     * @memberof google.spanner.v1.ExecuteBatchDmlRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExecuteBatchDmlRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.session != null && message.hasOwnProperty("session"))
                            if (!$util.isString(message.session))
                                return "session: string expected";
                        if (message.transaction != null && message.hasOwnProperty("transaction")) {
                            var error = $root.google.spanner.v1.TransactionSelector.verify(message.transaction);
                            if (error)
                                return "transaction." + error;
                        }
                        if (message.statements != null && message.hasOwnProperty("statements")) {
                            if (!Array.isArray(message.statements))
                                return "statements: array expected";
                            for (var i = 0; i < message.statements.length; ++i) {
                                var error = $root.google.spanner.v1.ExecuteBatchDmlRequest.Statement.verify(message.statements[i]);
                                if (error)
                                    return "statements." + error;
                            }
                        }
                        if (message.seqno != null && message.hasOwnProperty("seqno"))
                            if (!$util.isInteger(message.seqno) && !(message.seqno && $util.isInteger(message.seqno.low) && $util.isInteger(message.seqno.high)))
                                return "seqno: integer|Long expected";
                        return null;
                    };
    
                    /**
                     * Creates an ExecuteBatchDmlRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.ExecuteBatchDmlRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.ExecuteBatchDmlRequest} ExecuteBatchDmlRequest
                     */
                    ExecuteBatchDmlRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.ExecuteBatchDmlRequest)
                            return object;
                        var message = new $root.google.spanner.v1.ExecuteBatchDmlRequest();
                        if (object.session != null)
                            message.session = String(object.session);
                        if (object.transaction != null) {
                            if (typeof object.transaction !== "object")
                                throw TypeError(".google.spanner.v1.ExecuteBatchDmlRequest.transaction: object expected");
                            message.transaction = $root.google.spanner.v1.TransactionSelector.fromObject(object.transaction);
                        }
                        if (object.statements) {
                            if (!Array.isArray(object.statements))
                                throw TypeError(".google.spanner.v1.ExecuteBatchDmlRequest.statements: array expected");
                            message.statements = [];
                            for (var i = 0; i < object.statements.length; ++i) {
                                if (typeof object.statements[i] !== "object")
                                    throw TypeError(".google.spanner.v1.ExecuteBatchDmlRequest.statements: object expected");
                                message.statements[i] = $root.google.spanner.v1.ExecuteBatchDmlRequest.Statement.fromObject(object.statements[i]);
                            }
                        }
                        if (object.seqno != null)
                            if ($util.Long)
                                (message.seqno = $util.Long.fromValue(object.seqno)).unsigned = false;
                            else if (typeof object.seqno === "string")
                                message.seqno = parseInt(object.seqno, 10);
                            else if (typeof object.seqno === "number")
                                message.seqno = object.seqno;
                            else if (typeof object.seqno === "object")
                                message.seqno = new $util.LongBits(object.seqno.low >>> 0, object.seqno.high >>> 0).toNumber();
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExecuteBatchDmlRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.ExecuteBatchDmlRequest
                     * @static
                     * @param {google.spanner.v1.ExecuteBatchDmlRequest} message ExecuteBatchDmlRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExecuteBatchDmlRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.statements = [];
                        if (options.defaults) {
                            object.session = "";
                            object.transaction = null;
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.seqno = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.seqno = options.longs === String ? "0" : 0;
                        }
                        if (message.session != null && message.hasOwnProperty("session"))
                            object.session = message.session;
                        if (message.transaction != null && message.hasOwnProperty("transaction"))
                            object.transaction = $root.google.spanner.v1.TransactionSelector.toObject(message.transaction, options);
                        if (message.statements && message.statements.length) {
                            object.statements = [];
                            for (var j = 0; j < message.statements.length; ++j)
                                object.statements[j] = $root.google.spanner.v1.ExecuteBatchDmlRequest.Statement.toObject(message.statements[j], options);
                        }
                        if (message.seqno != null && message.hasOwnProperty("seqno"))
                            if (typeof message.seqno === "number")
                                object.seqno = options.longs === String ? String(message.seqno) : message.seqno;
                            else
                                object.seqno = options.longs === String ? $util.Long.prototype.toString.call(message.seqno) : options.longs === Number ? new $util.LongBits(message.seqno.low >>> 0, message.seqno.high >>> 0).toNumber() : message.seqno;
                        return object;
                    };
    
                    /**
                     * Converts this ExecuteBatchDmlRequest to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.ExecuteBatchDmlRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExecuteBatchDmlRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    ExecuteBatchDmlRequest.Statement = (function() {
    
                        /**
                         * Properties of a Statement.
                         * @memberof google.spanner.v1.ExecuteBatchDmlRequest
                         * @interface IStatement
                         * @property {string|null} [sql] Statement sql
                         * @property {google.protobuf.IStruct|null} [params] Statement params
                         * @property {Object.<string,google.spanner.v1.IType>|null} [paramTypes] Statement paramTypes
                         */
    
                        /**
                         * Constructs a new Statement.
                         * @memberof google.spanner.v1.ExecuteBatchDmlRequest
                         * @classdesc Represents a Statement.
                         * @implements IStatement
                         * @constructor
                         * @param {google.spanner.v1.ExecuteBatchDmlRequest.IStatement=} [properties] Properties to set
                         */
                        function Statement(properties) {
                            this.paramTypes = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Statement sql.
                         * @member {string} sql
                         * @memberof google.spanner.v1.ExecuteBatchDmlRequest.Statement
                         * @instance
                         */
                        Statement.prototype.sql = "";
    
                        /**
                         * Statement params.
                         * @member {google.protobuf.IStruct|null|undefined} params
                         * @memberof google.spanner.v1.ExecuteBatchDmlRequest.Statement
                         * @instance
                         */
                        Statement.prototype.params = null;
    
                        /**
                         * Statement paramTypes.
                         * @member {Object.<string,google.spanner.v1.IType>} paramTypes
                         * @memberof google.spanner.v1.ExecuteBatchDmlRequest.Statement
                         * @instance
                         */
                        Statement.prototype.paramTypes = $util.emptyObject;
    
                        /**
                         * Creates a new Statement instance using the specified properties.
                         * @function create
                         * @memberof google.spanner.v1.ExecuteBatchDmlRequest.Statement
                         * @static
                         * @param {google.spanner.v1.ExecuteBatchDmlRequest.IStatement=} [properties] Properties to set
                         * @returns {google.spanner.v1.ExecuteBatchDmlRequest.Statement} Statement instance
                         */
                        Statement.create = function create(properties) {
                            return new Statement(properties);
                        };
    
                        /**
                         * Encodes the specified Statement message. Does not implicitly {@link google.spanner.v1.ExecuteBatchDmlRequest.Statement.verify|verify} messages.
                         * @function encode
                         * @memberof google.spanner.v1.ExecuteBatchDmlRequest.Statement
                         * @static
                         * @param {google.spanner.v1.ExecuteBatchDmlRequest.IStatement} message Statement message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Statement.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.sql != null && Object.hasOwnProperty.call(message, "sql"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.sql);
                            if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                                $root.google.protobuf.Struct.encode(message.params, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.paramTypes != null && Object.hasOwnProperty.call(message, "paramTypes"))
                                for (var keys = Object.keys(message.paramTypes), i = 0; i < keys.length; ++i) {
                                    writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                    $root.google.spanner.v1.Type.encode(message.paramTypes[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                                }
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Statement message, length delimited. Does not implicitly {@link google.spanner.v1.ExecuteBatchDmlRequest.Statement.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.spanner.v1.ExecuteBatchDmlRequest.Statement
                         * @static
                         * @param {google.spanner.v1.ExecuteBatchDmlRequest.IStatement} message Statement message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Statement.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Statement message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.spanner.v1.ExecuteBatchDmlRequest.Statement
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.spanner.v1.ExecuteBatchDmlRequest.Statement} Statement
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Statement.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.ExecuteBatchDmlRequest.Statement(), key;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.sql = reader.string();
                                    break;
                                case 2:
                                    message.params = $root.google.protobuf.Struct.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    reader.skip().pos++;
                                    if (message.paramTypes === $util.emptyObject)
                                        message.paramTypes = {};
                                    key = reader.string();
                                    reader.pos++;
                                    message.paramTypes[key] = $root.google.spanner.v1.Type.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Statement message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.spanner.v1.ExecuteBatchDmlRequest.Statement
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.spanner.v1.ExecuteBatchDmlRequest.Statement} Statement
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Statement.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Statement message.
                         * @function verify
                         * @memberof google.spanner.v1.ExecuteBatchDmlRequest.Statement
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Statement.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.sql != null && message.hasOwnProperty("sql"))
                                if (!$util.isString(message.sql))
                                    return "sql: string expected";
                            if (message.params != null && message.hasOwnProperty("params")) {
                                var error = $root.google.protobuf.Struct.verify(message.params);
                                if (error)
                                    return "params." + error;
                            }
                            if (message.paramTypes != null && message.hasOwnProperty("paramTypes")) {
                                if (!$util.isObject(message.paramTypes))
                                    return "paramTypes: object expected";
                                var key = Object.keys(message.paramTypes);
                                for (var i = 0; i < key.length; ++i) {
                                    var error = $root.google.spanner.v1.Type.verify(message.paramTypes[key[i]]);
                                    if (error)
                                        return "paramTypes." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Statement message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.spanner.v1.ExecuteBatchDmlRequest.Statement
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.spanner.v1.ExecuteBatchDmlRequest.Statement} Statement
                         */
                        Statement.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.spanner.v1.ExecuteBatchDmlRequest.Statement)
                                return object;
                            var message = new $root.google.spanner.v1.ExecuteBatchDmlRequest.Statement();
                            if (object.sql != null)
                                message.sql = String(object.sql);
                            if (object.params != null) {
                                if (typeof object.params !== "object")
                                    throw TypeError(".google.spanner.v1.ExecuteBatchDmlRequest.Statement.params: object expected");
                                message.params = $root.google.protobuf.Struct.fromObject(object.params);
                            }
                            if (object.paramTypes) {
                                if (typeof object.paramTypes !== "object")
                                    throw TypeError(".google.spanner.v1.ExecuteBatchDmlRequest.Statement.paramTypes: object expected");
                                message.paramTypes = {};
                                for (var keys = Object.keys(object.paramTypes), i = 0; i < keys.length; ++i) {
                                    if (typeof object.paramTypes[keys[i]] !== "object")
                                        throw TypeError(".google.spanner.v1.ExecuteBatchDmlRequest.Statement.paramTypes: object expected");
                                    message.paramTypes[keys[i]] = $root.google.spanner.v1.Type.fromObject(object.paramTypes[keys[i]]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Statement message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.spanner.v1.ExecuteBatchDmlRequest.Statement
                         * @static
                         * @param {google.spanner.v1.ExecuteBatchDmlRequest.Statement} message Statement
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Statement.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.objects || options.defaults)
                                object.paramTypes = {};
                            if (options.defaults) {
                                object.sql = "";
                                object.params = null;
                            }
                            if (message.sql != null && message.hasOwnProperty("sql"))
                                object.sql = message.sql;
                            if (message.params != null && message.hasOwnProperty("params"))
                                object.params = $root.google.protobuf.Struct.toObject(message.params, options);
                            var keys2;
                            if (message.paramTypes && (keys2 = Object.keys(message.paramTypes)).length) {
                                object.paramTypes = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.paramTypes[keys2[j]] = $root.google.spanner.v1.Type.toObject(message.paramTypes[keys2[j]], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Statement to JSON.
                         * @function toJSON
                         * @memberof google.spanner.v1.ExecuteBatchDmlRequest.Statement
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Statement.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Statement;
                    })();
    
                    return ExecuteBatchDmlRequest;
                })();
    
                v1.ExecuteBatchDmlResponse = (function() {
    
                    /**
                     * Properties of an ExecuteBatchDmlResponse.
                     * @memberof google.spanner.v1
                     * @interface IExecuteBatchDmlResponse
                     * @property {Array.<google.spanner.v1.IResultSet>|null} [resultSets] ExecuteBatchDmlResponse resultSets
                     * @property {google.rpc.IStatus|null} [status] ExecuteBatchDmlResponse status
                     */
    
                    /**
                     * Constructs a new ExecuteBatchDmlResponse.
                     * @memberof google.spanner.v1
                     * @classdesc Represents an ExecuteBatchDmlResponse.
                     * @implements IExecuteBatchDmlResponse
                     * @constructor
                     * @param {google.spanner.v1.IExecuteBatchDmlResponse=} [properties] Properties to set
                     */
                    function ExecuteBatchDmlResponse(properties) {
                        this.resultSets = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExecuteBatchDmlResponse resultSets.
                     * @member {Array.<google.spanner.v1.IResultSet>} resultSets
                     * @memberof google.spanner.v1.ExecuteBatchDmlResponse
                     * @instance
                     */
                    ExecuteBatchDmlResponse.prototype.resultSets = $util.emptyArray;
    
                    /**
                     * ExecuteBatchDmlResponse status.
                     * @member {google.rpc.IStatus|null|undefined} status
                     * @memberof google.spanner.v1.ExecuteBatchDmlResponse
                     * @instance
                     */
                    ExecuteBatchDmlResponse.prototype.status = null;
    
                    /**
                     * Creates a new ExecuteBatchDmlResponse instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.ExecuteBatchDmlResponse
                     * @static
                     * @param {google.spanner.v1.IExecuteBatchDmlResponse=} [properties] Properties to set
                     * @returns {google.spanner.v1.ExecuteBatchDmlResponse} ExecuteBatchDmlResponse instance
                     */
                    ExecuteBatchDmlResponse.create = function create(properties) {
                        return new ExecuteBatchDmlResponse(properties);
                    };
    
                    /**
                     * Encodes the specified ExecuteBatchDmlResponse message. Does not implicitly {@link google.spanner.v1.ExecuteBatchDmlResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.ExecuteBatchDmlResponse
                     * @static
                     * @param {google.spanner.v1.IExecuteBatchDmlResponse} message ExecuteBatchDmlResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExecuteBatchDmlResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.resultSets != null && message.resultSets.length)
                            for (var i = 0; i < message.resultSets.length; ++i)
                                $root.google.spanner.v1.ResultSet.encode(message.resultSets[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                            $root.google.rpc.Status.encode(message.status, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExecuteBatchDmlResponse message, length delimited. Does not implicitly {@link google.spanner.v1.ExecuteBatchDmlResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.ExecuteBatchDmlResponse
                     * @static
                     * @param {google.spanner.v1.IExecuteBatchDmlResponse} message ExecuteBatchDmlResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExecuteBatchDmlResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExecuteBatchDmlResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.ExecuteBatchDmlResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.ExecuteBatchDmlResponse} ExecuteBatchDmlResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExecuteBatchDmlResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.ExecuteBatchDmlResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.resultSets && message.resultSets.length))
                                    message.resultSets = [];
                                message.resultSets.push($root.google.spanner.v1.ResultSet.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.status = $root.google.rpc.Status.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExecuteBatchDmlResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.ExecuteBatchDmlResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.ExecuteBatchDmlResponse} ExecuteBatchDmlResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExecuteBatchDmlResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExecuteBatchDmlResponse message.
                     * @function verify
                     * @memberof google.spanner.v1.ExecuteBatchDmlResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExecuteBatchDmlResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.resultSets != null && message.hasOwnProperty("resultSets")) {
                            if (!Array.isArray(message.resultSets))
                                return "resultSets: array expected";
                            for (var i = 0; i < message.resultSets.length; ++i) {
                                var error = $root.google.spanner.v1.ResultSet.verify(message.resultSets[i]);
                                if (error)
                                    return "resultSets." + error;
                            }
                        }
                        if (message.status != null && message.hasOwnProperty("status")) {
                            var error = $root.google.rpc.Status.verify(message.status);
                            if (error)
                                return "status." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an ExecuteBatchDmlResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.ExecuteBatchDmlResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.ExecuteBatchDmlResponse} ExecuteBatchDmlResponse
                     */
                    ExecuteBatchDmlResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.ExecuteBatchDmlResponse)
                            return object;
                        var message = new $root.google.spanner.v1.ExecuteBatchDmlResponse();
                        if (object.resultSets) {
                            if (!Array.isArray(object.resultSets))
                                throw TypeError(".google.spanner.v1.ExecuteBatchDmlResponse.resultSets: array expected");
                            message.resultSets = [];
                            for (var i = 0; i < object.resultSets.length; ++i) {
                                if (typeof object.resultSets[i] !== "object")
                                    throw TypeError(".google.spanner.v1.ExecuteBatchDmlResponse.resultSets: object expected");
                                message.resultSets[i] = $root.google.spanner.v1.ResultSet.fromObject(object.resultSets[i]);
                            }
                        }
                        if (object.status != null) {
                            if (typeof object.status !== "object")
                                throw TypeError(".google.spanner.v1.ExecuteBatchDmlResponse.status: object expected");
                            message.status = $root.google.rpc.Status.fromObject(object.status);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExecuteBatchDmlResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.ExecuteBatchDmlResponse
                     * @static
                     * @param {google.spanner.v1.ExecuteBatchDmlResponse} message ExecuteBatchDmlResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExecuteBatchDmlResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.resultSets = [];
                        if (options.defaults)
                            object.status = null;
                        if (message.resultSets && message.resultSets.length) {
                            object.resultSets = [];
                            for (var j = 0; j < message.resultSets.length; ++j)
                                object.resultSets[j] = $root.google.spanner.v1.ResultSet.toObject(message.resultSets[j], options);
                        }
                        if (message.status != null && message.hasOwnProperty("status"))
                            object.status = $root.google.rpc.Status.toObject(message.status, options);
                        return object;
                    };
    
                    /**
                     * Converts this ExecuteBatchDmlResponse to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.ExecuteBatchDmlResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExecuteBatchDmlResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ExecuteBatchDmlResponse;
                })();
    
                v1.PartitionOptions = (function() {
    
                    /**
                     * Properties of a PartitionOptions.
                     * @memberof google.spanner.v1
                     * @interface IPartitionOptions
                     * @property {number|Long|null} [partitionSizeBytes] PartitionOptions partitionSizeBytes
                     * @property {number|Long|null} [maxPartitions] PartitionOptions maxPartitions
                     */
    
                    /**
                     * Constructs a new PartitionOptions.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a PartitionOptions.
                     * @implements IPartitionOptions
                     * @constructor
                     * @param {google.spanner.v1.IPartitionOptions=} [properties] Properties to set
                     */
                    function PartitionOptions(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PartitionOptions partitionSizeBytes.
                     * @member {number|Long} partitionSizeBytes
                     * @memberof google.spanner.v1.PartitionOptions
                     * @instance
                     */
                    PartitionOptions.prototype.partitionSizeBytes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * PartitionOptions maxPartitions.
                     * @member {number|Long} maxPartitions
                     * @memberof google.spanner.v1.PartitionOptions
                     * @instance
                     */
                    PartitionOptions.prototype.maxPartitions = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * Creates a new PartitionOptions instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.PartitionOptions
                     * @static
                     * @param {google.spanner.v1.IPartitionOptions=} [properties] Properties to set
                     * @returns {google.spanner.v1.PartitionOptions} PartitionOptions instance
                     */
                    PartitionOptions.create = function create(properties) {
                        return new PartitionOptions(properties);
                    };
    
                    /**
                     * Encodes the specified PartitionOptions message. Does not implicitly {@link google.spanner.v1.PartitionOptions.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.PartitionOptions
                     * @static
                     * @param {google.spanner.v1.IPartitionOptions} message PartitionOptions message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PartitionOptions.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.partitionSizeBytes != null && Object.hasOwnProperty.call(message, "partitionSizeBytes"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.partitionSizeBytes);
                        if (message.maxPartitions != null && Object.hasOwnProperty.call(message, "maxPartitions"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.maxPartitions);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PartitionOptions message, length delimited. Does not implicitly {@link google.spanner.v1.PartitionOptions.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.PartitionOptions
                     * @static
                     * @param {google.spanner.v1.IPartitionOptions} message PartitionOptions message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PartitionOptions.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PartitionOptions message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.PartitionOptions
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.PartitionOptions} PartitionOptions
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PartitionOptions.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.PartitionOptions();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.partitionSizeBytes = reader.int64();
                                break;
                            case 2:
                                message.maxPartitions = reader.int64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PartitionOptions message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.PartitionOptions
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.PartitionOptions} PartitionOptions
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PartitionOptions.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PartitionOptions message.
                     * @function verify
                     * @memberof google.spanner.v1.PartitionOptions
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PartitionOptions.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.partitionSizeBytes != null && message.hasOwnProperty("partitionSizeBytes"))
                            if (!$util.isInteger(message.partitionSizeBytes) && !(message.partitionSizeBytes && $util.isInteger(message.partitionSizeBytes.low) && $util.isInteger(message.partitionSizeBytes.high)))
                                return "partitionSizeBytes: integer|Long expected";
                        if (message.maxPartitions != null && message.hasOwnProperty("maxPartitions"))
                            if (!$util.isInteger(message.maxPartitions) && !(message.maxPartitions && $util.isInteger(message.maxPartitions.low) && $util.isInteger(message.maxPartitions.high)))
                                return "maxPartitions: integer|Long expected";
                        return null;
                    };
    
                    /**
                     * Creates a PartitionOptions message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.PartitionOptions
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.PartitionOptions} PartitionOptions
                     */
                    PartitionOptions.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.PartitionOptions)
                            return object;
                        var message = new $root.google.spanner.v1.PartitionOptions();
                        if (object.partitionSizeBytes != null)
                            if ($util.Long)
                                (message.partitionSizeBytes = $util.Long.fromValue(object.partitionSizeBytes)).unsigned = false;
                            else if (typeof object.partitionSizeBytes === "string")
                                message.partitionSizeBytes = parseInt(object.partitionSizeBytes, 10);
                            else if (typeof object.partitionSizeBytes === "number")
                                message.partitionSizeBytes = object.partitionSizeBytes;
                            else if (typeof object.partitionSizeBytes === "object")
                                message.partitionSizeBytes = new $util.LongBits(object.partitionSizeBytes.low >>> 0, object.partitionSizeBytes.high >>> 0).toNumber();
                        if (object.maxPartitions != null)
                            if ($util.Long)
                                (message.maxPartitions = $util.Long.fromValue(object.maxPartitions)).unsigned = false;
                            else if (typeof object.maxPartitions === "string")
                                message.maxPartitions = parseInt(object.maxPartitions, 10);
                            else if (typeof object.maxPartitions === "number")
                                message.maxPartitions = object.maxPartitions;
                            else if (typeof object.maxPartitions === "object")
                                message.maxPartitions = new $util.LongBits(object.maxPartitions.low >>> 0, object.maxPartitions.high >>> 0).toNumber();
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PartitionOptions message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.PartitionOptions
                     * @static
                     * @param {google.spanner.v1.PartitionOptions} message PartitionOptions
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PartitionOptions.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.partitionSizeBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.partitionSizeBytes = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.maxPartitions = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.maxPartitions = options.longs === String ? "0" : 0;
                        }
                        if (message.partitionSizeBytes != null && message.hasOwnProperty("partitionSizeBytes"))
                            if (typeof message.partitionSizeBytes === "number")
                                object.partitionSizeBytes = options.longs === String ? String(message.partitionSizeBytes) : message.partitionSizeBytes;
                            else
                                object.partitionSizeBytes = options.longs === String ? $util.Long.prototype.toString.call(message.partitionSizeBytes) : options.longs === Number ? new $util.LongBits(message.partitionSizeBytes.low >>> 0, message.partitionSizeBytes.high >>> 0).toNumber() : message.partitionSizeBytes;
                        if (message.maxPartitions != null && message.hasOwnProperty("maxPartitions"))
                            if (typeof message.maxPartitions === "number")
                                object.maxPartitions = options.longs === String ? String(message.maxPartitions) : message.maxPartitions;
                            else
                                object.maxPartitions = options.longs === String ? $util.Long.prototype.toString.call(message.maxPartitions) : options.longs === Number ? new $util.LongBits(message.maxPartitions.low >>> 0, message.maxPartitions.high >>> 0).toNumber() : message.maxPartitions;
                        return object;
                    };
    
                    /**
                     * Converts this PartitionOptions to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.PartitionOptions
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PartitionOptions.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PartitionOptions;
                })();
    
                v1.PartitionQueryRequest = (function() {
    
                    /**
                     * Properties of a PartitionQueryRequest.
                     * @memberof google.spanner.v1
                     * @interface IPartitionQueryRequest
                     * @property {string|null} [session] PartitionQueryRequest session
                     * @property {google.spanner.v1.ITransactionSelector|null} [transaction] PartitionQueryRequest transaction
                     * @property {string|null} [sql] PartitionQueryRequest sql
                     * @property {google.protobuf.IStruct|null} [params] PartitionQueryRequest params
                     * @property {Object.<string,google.spanner.v1.IType>|null} [paramTypes] PartitionQueryRequest paramTypes
                     * @property {google.spanner.v1.IPartitionOptions|null} [partitionOptions] PartitionQueryRequest partitionOptions
                     */
    
                    /**
                     * Constructs a new PartitionQueryRequest.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a PartitionQueryRequest.
                     * @implements IPartitionQueryRequest
                     * @constructor
                     * @param {google.spanner.v1.IPartitionQueryRequest=} [properties] Properties to set
                     */
                    function PartitionQueryRequest(properties) {
                        this.paramTypes = {};
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PartitionQueryRequest session.
                     * @member {string} session
                     * @memberof google.spanner.v1.PartitionQueryRequest
                     * @instance
                     */
                    PartitionQueryRequest.prototype.session = "";
    
                    /**
                     * PartitionQueryRequest transaction.
                     * @member {google.spanner.v1.ITransactionSelector|null|undefined} transaction
                     * @memberof google.spanner.v1.PartitionQueryRequest
                     * @instance
                     */
                    PartitionQueryRequest.prototype.transaction = null;
    
                    /**
                     * PartitionQueryRequest sql.
                     * @member {string} sql
                     * @memberof google.spanner.v1.PartitionQueryRequest
                     * @instance
                     */
                    PartitionQueryRequest.prototype.sql = "";
    
                    /**
                     * PartitionQueryRequest params.
                     * @member {google.protobuf.IStruct|null|undefined} params
                     * @memberof google.spanner.v1.PartitionQueryRequest
                     * @instance
                     */
                    PartitionQueryRequest.prototype.params = null;
    
                    /**
                     * PartitionQueryRequest paramTypes.
                     * @member {Object.<string,google.spanner.v1.IType>} paramTypes
                     * @memberof google.spanner.v1.PartitionQueryRequest
                     * @instance
                     */
                    PartitionQueryRequest.prototype.paramTypes = $util.emptyObject;
    
                    /**
                     * PartitionQueryRequest partitionOptions.
                     * @member {google.spanner.v1.IPartitionOptions|null|undefined} partitionOptions
                     * @memberof google.spanner.v1.PartitionQueryRequest
                     * @instance
                     */
                    PartitionQueryRequest.prototype.partitionOptions = null;
    
                    /**
                     * Creates a new PartitionQueryRequest instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.PartitionQueryRequest
                     * @static
                     * @param {google.spanner.v1.IPartitionQueryRequest=} [properties] Properties to set
                     * @returns {google.spanner.v1.PartitionQueryRequest} PartitionQueryRequest instance
                     */
                    PartitionQueryRequest.create = function create(properties) {
                        return new PartitionQueryRequest(properties);
                    };
    
                    /**
                     * Encodes the specified PartitionQueryRequest message. Does not implicitly {@link google.spanner.v1.PartitionQueryRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.PartitionQueryRequest
                     * @static
                     * @param {google.spanner.v1.IPartitionQueryRequest} message PartitionQueryRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PartitionQueryRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.session != null && Object.hasOwnProperty.call(message, "session"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.session);
                        if (message.transaction != null && Object.hasOwnProperty.call(message, "transaction"))
                            $root.google.spanner.v1.TransactionSelector.encode(message.transaction, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.sql != null && Object.hasOwnProperty.call(message, "sql"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.sql);
                        if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                            $root.google.protobuf.Struct.encode(message.params, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.paramTypes != null && Object.hasOwnProperty.call(message, "paramTypes"))
                            for (var keys = Object.keys(message.paramTypes), i = 0; i < keys.length; ++i) {
                                writer.uint32(/* id 5, wireType 2 =*/42).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                $root.google.spanner.v1.Type.encode(message.paramTypes[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                            }
                        if (message.partitionOptions != null && Object.hasOwnProperty.call(message, "partitionOptions"))
                            $root.google.spanner.v1.PartitionOptions.encode(message.partitionOptions, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PartitionQueryRequest message, length delimited. Does not implicitly {@link google.spanner.v1.PartitionQueryRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.PartitionQueryRequest
                     * @static
                     * @param {google.spanner.v1.IPartitionQueryRequest} message PartitionQueryRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PartitionQueryRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PartitionQueryRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.PartitionQueryRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.PartitionQueryRequest} PartitionQueryRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PartitionQueryRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.PartitionQueryRequest(), key;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.session = reader.string();
                                break;
                            case 2:
                                message.transaction = $root.google.spanner.v1.TransactionSelector.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.sql = reader.string();
                                break;
                            case 4:
                                message.params = $root.google.protobuf.Struct.decode(reader, reader.uint32());
                                break;
                            case 5:
                                reader.skip().pos++;
                                if (message.paramTypes === $util.emptyObject)
                                    message.paramTypes = {};
                                key = reader.string();
                                reader.pos++;
                                message.paramTypes[key] = $root.google.spanner.v1.Type.decode(reader, reader.uint32());
                                break;
                            case 6:
                                message.partitionOptions = $root.google.spanner.v1.PartitionOptions.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PartitionQueryRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.PartitionQueryRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.PartitionQueryRequest} PartitionQueryRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PartitionQueryRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PartitionQueryRequest message.
                     * @function verify
                     * @memberof google.spanner.v1.PartitionQueryRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PartitionQueryRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.session != null && message.hasOwnProperty("session"))
                            if (!$util.isString(message.session))
                                return "session: string expected";
                        if (message.transaction != null && message.hasOwnProperty("transaction")) {
                            var error = $root.google.spanner.v1.TransactionSelector.verify(message.transaction);
                            if (error)
                                return "transaction." + error;
                        }
                        if (message.sql != null && message.hasOwnProperty("sql"))
                            if (!$util.isString(message.sql))
                                return "sql: string expected";
                        if (message.params != null && message.hasOwnProperty("params")) {
                            var error = $root.google.protobuf.Struct.verify(message.params);
                            if (error)
                                return "params." + error;
                        }
                        if (message.paramTypes != null && message.hasOwnProperty("paramTypes")) {
                            if (!$util.isObject(message.paramTypes))
                                return "paramTypes: object expected";
                            var key = Object.keys(message.paramTypes);
                            for (var i = 0; i < key.length; ++i) {
                                var error = $root.google.spanner.v1.Type.verify(message.paramTypes[key[i]]);
                                if (error)
                                    return "paramTypes." + error;
                            }
                        }
                        if (message.partitionOptions != null && message.hasOwnProperty("partitionOptions")) {
                            var error = $root.google.spanner.v1.PartitionOptions.verify(message.partitionOptions);
                            if (error)
                                return "partitionOptions." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a PartitionQueryRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.PartitionQueryRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.PartitionQueryRequest} PartitionQueryRequest
                     */
                    PartitionQueryRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.PartitionQueryRequest)
                            return object;
                        var message = new $root.google.spanner.v1.PartitionQueryRequest();
                        if (object.session != null)
                            message.session = String(object.session);
                        if (object.transaction != null) {
                            if (typeof object.transaction !== "object")
                                throw TypeError(".google.spanner.v1.PartitionQueryRequest.transaction: object expected");
                            message.transaction = $root.google.spanner.v1.TransactionSelector.fromObject(object.transaction);
                        }
                        if (object.sql != null)
                            message.sql = String(object.sql);
                        if (object.params != null) {
                            if (typeof object.params !== "object")
                                throw TypeError(".google.spanner.v1.PartitionQueryRequest.params: object expected");
                            message.params = $root.google.protobuf.Struct.fromObject(object.params);
                        }
                        if (object.paramTypes) {
                            if (typeof object.paramTypes !== "object")
                                throw TypeError(".google.spanner.v1.PartitionQueryRequest.paramTypes: object expected");
                            message.paramTypes = {};
                            for (var keys = Object.keys(object.paramTypes), i = 0; i < keys.length; ++i) {
                                if (typeof object.paramTypes[keys[i]] !== "object")
                                    throw TypeError(".google.spanner.v1.PartitionQueryRequest.paramTypes: object expected");
                                message.paramTypes[keys[i]] = $root.google.spanner.v1.Type.fromObject(object.paramTypes[keys[i]]);
                            }
                        }
                        if (object.partitionOptions != null) {
                            if (typeof object.partitionOptions !== "object")
                                throw TypeError(".google.spanner.v1.PartitionQueryRequest.partitionOptions: object expected");
                            message.partitionOptions = $root.google.spanner.v1.PartitionOptions.fromObject(object.partitionOptions);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PartitionQueryRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.PartitionQueryRequest
                     * @static
                     * @param {google.spanner.v1.PartitionQueryRequest} message PartitionQueryRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PartitionQueryRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.objects || options.defaults)
                            object.paramTypes = {};
                        if (options.defaults) {
                            object.session = "";
                            object.transaction = null;
                            object.sql = "";
                            object.params = null;
                            object.partitionOptions = null;
                        }
                        if (message.session != null && message.hasOwnProperty("session"))
                            object.session = message.session;
                        if (message.transaction != null && message.hasOwnProperty("transaction"))
                            object.transaction = $root.google.spanner.v1.TransactionSelector.toObject(message.transaction, options);
                        if (message.sql != null && message.hasOwnProperty("sql"))
                            object.sql = message.sql;
                        if (message.params != null && message.hasOwnProperty("params"))
                            object.params = $root.google.protobuf.Struct.toObject(message.params, options);
                        var keys2;
                        if (message.paramTypes && (keys2 = Object.keys(message.paramTypes)).length) {
                            object.paramTypes = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.paramTypes[keys2[j]] = $root.google.spanner.v1.Type.toObject(message.paramTypes[keys2[j]], options);
                        }
                        if (message.partitionOptions != null && message.hasOwnProperty("partitionOptions"))
                            object.partitionOptions = $root.google.spanner.v1.PartitionOptions.toObject(message.partitionOptions, options);
                        return object;
                    };
    
                    /**
                     * Converts this PartitionQueryRequest to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.PartitionQueryRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PartitionQueryRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PartitionQueryRequest;
                })();
    
                v1.PartitionReadRequest = (function() {
    
                    /**
                     * Properties of a PartitionReadRequest.
                     * @memberof google.spanner.v1
                     * @interface IPartitionReadRequest
                     * @property {string|null} [session] PartitionReadRequest session
                     * @property {google.spanner.v1.ITransactionSelector|null} [transaction] PartitionReadRequest transaction
                     * @property {string|null} [table] PartitionReadRequest table
                     * @property {string|null} [index] PartitionReadRequest index
                     * @property {Array.<string>|null} [columns] PartitionReadRequest columns
                     * @property {google.spanner.v1.IKeySet|null} [keySet] PartitionReadRequest keySet
                     * @property {google.spanner.v1.IPartitionOptions|null} [partitionOptions] PartitionReadRequest partitionOptions
                     */
    
                    /**
                     * Constructs a new PartitionReadRequest.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a PartitionReadRequest.
                     * @implements IPartitionReadRequest
                     * @constructor
                     * @param {google.spanner.v1.IPartitionReadRequest=} [properties] Properties to set
                     */
                    function PartitionReadRequest(properties) {
                        this.columns = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PartitionReadRequest session.
                     * @member {string} session
                     * @memberof google.spanner.v1.PartitionReadRequest
                     * @instance
                     */
                    PartitionReadRequest.prototype.session = "";
    
                    /**
                     * PartitionReadRequest transaction.
                     * @member {google.spanner.v1.ITransactionSelector|null|undefined} transaction
                     * @memberof google.spanner.v1.PartitionReadRequest
                     * @instance
                     */
                    PartitionReadRequest.prototype.transaction = null;
    
                    /**
                     * PartitionReadRequest table.
                     * @member {string} table
                     * @memberof google.spanner.v1.PartitionReadRequest
                     * @instance
                     */
                    PartitionReadRequest.prototype.table = "";
    
                    /**
                     * PartitionReadRequest index.
                     * @member {string} index
                     * @memberof google.spanner.v1.PartitionReadRequest
                     * @instance
                     */
                    PartitionReadRequest.prototype.index = "";
    
                    /**
                     * PartitionReadRequest columns.
                     * @member {Array.<string>} columns
                     * @memberof google.spanner.v1.PartitionReadRequest
                     * @instance
                     */
                    PartitionReadRequest.prototype.columns = $util.emptyArray;
    
                    /**
                     * PartitionReadRequest keySet.
                     * @member {google.spanner.v1.IKeySet|null|undefined} keySet
                     * @memberof google.spanner.v1.PartitionReadRequest
                     * @instance
                     */
                    PartitionReadRequest.prototype.keySet = null;
    
                    /**
                     * PartitionReadRequest partitionOptions.
                     * @member {google.spanner.v1.IPartitionOptions|null|undefined} partitionOptions
                     * @memberof google.spanner.v1.PartitionReadRequest
                     * @instance
                     */
                    PartitionReadRequest.prototype.partitionOptions = null;
    
                    /**
                     * Creates a new PartitionReadRequest instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.PartitionReadRequest
                     * @static
                     * @param {google.spanner.v1.IPartitionReadRequest=} [properties] Properties to set
                     * @returns {google.spanner.v1.PartitionReadRequest} PartitionReadRequest instance
                     */
                    PartitionReadRequest.create = function create(properties) {
                        return new PartitionReadRequest(properties);
                    };
    
                    /**
                     * Encodes the specified PartitionReadRequest message. Does not implicitly {@link google.spanner.v1.PartitionReadRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.PartitionReadRequest
                     * @static
                     * @param {google.spanner.v1.IPartitionReadRequest} message PartitionReadRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PartitionReadRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.session != null && Object.hasOwnProperty.call(message, "session"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.session);
                        if (message.transaction != null && Object.hasOwnProperty.call(message, "transaction"))
                            $root.google.spanner.v1.TransactionSelector.encode(message.transaction, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.table != null && Object.hasOwnProperty.call(message, "table"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.table);
                        if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.index);
                        if (message.columns != null && message.columns.length)
                            for (var i = 0; i < message.columns.length; ++i)
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.columns[i]);
                        if (message.keySet != null && Object.hasOwnProperty.call(message, "keySet"))
                            $root.google.spanner.v1.KeySet.encode(message.keySet, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.partitionOptions != null && Object.hasOwnProperty.call(message, "partitionOptions"))
                            $root.google.spanner.v1.PartitionOptions.encode(message.partitionOptions, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PartitionReadRequest message, length delimited. Does not implicitly {@link google.spanner.v1.PartitionReadRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.PartitionReadRequest
                     * @static
                     * @param {google.spanner.v1.IPartitionReadRequest} message PartitionReadRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PartitionReadRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PartitionReadRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.PartitionReadRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.PartitionReadRequest} PartitionReadRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PartitionReadRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.PartitionReadRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.session = reader.string();
                                break;
                            case 2:
                                message.transaction = $root.google.spanner.v1.TransactionSelector.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.table = reader.string();
                                break;
                            case 4:
                                message.index = reader.string();
                                break;
                            case 5:
                                if (!(message.columns && message.columns.length))
                                    message.columns = [];
                                message.columns.push(reader.string());
                                break;
                            case 6:
                                message.keySet = $root.google.spanner.v1.KeySet.decode(reader, reader.uint32());
                                break;
                            case 9:
                                message.partitionOptions = $root.google.spanner.v1.PartitionOptions.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PartitionReadRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.PartitionReadRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.PartitionReadRequest} PartitionReadRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PartitionReadRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PartitionReadRequest message.
                     * @function verify
                     * @memberof google.spanner.v1.PartitionReadRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PartitionReadRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.session != null && message.hasOwnProperty("session"))
                            if (!$util.isString(message.session))
                                return "session: string expected";
                        if (message.transaction != null && message.hasOwnProperty("transaction")) {
                            var error = $root.google.spanner.v1.TransactionSelector.verify(message.transaction);
                            if (error)
                                return "transaction." + error;
                        }
                        if (message.table != null && message.hasOwnProperty("table"))
                            if (!$util.isString(message.table))
                                return "table: string expected";
                        if (message.index != null && message.hasOwnProperty("index"))
                            if (!$util.isString(message.index))
                                return "index: string expected";
                        if (message.columns != null && message.hasOwnProperty("columns")) {
                            if (!Array.isArray(message.columns))
                                return "columns: array expected";
                            for (var i = 0; i < message.columns.length; ++i)
                                if (!$util.isString(message.columns[i]))
                                    return "columns: string[] expected";
                        }
                        if (message.keySet != null && message.hasOwnProperty("keySet")) {
                            var error = $root.google.spanner.v1.KeySet.verify(message.keySet);
                            if (error)
                                return "keySet." + error;
                        }
                        if (message.partitionOptions != null && message.hasOwnProperty("partitionOptions")) {
                            var error = $root.google.spanner.v1.PartitionOptions.verify(message.partitionOptions);
                            if (error)
                                return "partitionOptions." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a PartitionReadRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.PartitionReadRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.PartitionReadRequest} PartitionReadRequest
                     */
                    PartitionReadRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.PartitionReadRequest)
                            return object;
                        var message = new $root.google.spanner.v1.PartitionReadRequest();
                        if (object.session != null)
                            message.session = String(object.session);
                        if (object.transaction != null) {
                            if (typeof object.transaction !== "object")
                                throw TypeError(".google.spanner.v1.PartitionReadRequest.transaction: object expected");
                            message.transaction = $root.google.spanner.v1.TransactionSelector.fromObject(object.transaction);
                        }
                        if (object.table != null)
                            message.table = String(object.table);
                        if (object.index != null)
                            message.index = String(object.index);
                        if (object.columns) {
                            if (!Array.isArray(object.columns))
                                throw TypeError(".google.spanner.v1.PartitionReadRequest.columns: array expected");
                            message.columns = [];
                            for (var i = 0; i < object.columns.length; ++i)
                                message.columns[i] = String(object.columns[i]);
                        }
                        if (object.keySet != null) {
                            if (typeof object.keySet !== "object")
                                throw TypeError(".google.spanner.v1.PartitionReadRequest.keySet: object expected");
                            message.keySet = $root.google.spanner.v1.KeySet.fromObject(object.keySet);
                        }
                        if (object.partitionOptions != null) {
                            if (typeof object.partitionOptions !== "object")
                                throw TypeError(".google.spanner.v1.PartitionReadRequest.partitionOptions: object expected");
                            message.partitionOptions = $root.google.spanner.v1.PartitionOptions.fromObject(object.partitionOptions);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PartitionReadRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.PartitionReadRequest
                     * @static
                     * @param {google.spanner.v1.PartitionReadRequest} message PartitionReadRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PartitionReadRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.columns = [];
                        if (options.defaults) {
                            object.session = "";
                            object.transaction = null;
                            object.table = "";
                            object.index = "";
                            object.keySet = null;
                            object.partitionOptions = null;
                        }
                        if (message.session != null && message.hasOwnProperty("session"))
                            object.session = message.session;
                        if (message.transaction != null && message.hasOwnProperty("transaction"))
                            object.transaction = $root.google.spanner.v1.TransactionSelector.toObject(message.transaction, options);
                        if (message.table != null && message.hasOwnProperty("table"))
                            object.table = message.table;
                        if (message.index != null && message.hasOwnProperty("index"))
                            object.index = message.index;
                        if (message.columns && message.columns.length) {
                            object.columns = [];
                            for (var j = 0; j < message.columns.length; ++j)
                                object.columns[j] = message.columns[j];
                        }
                        if (message.keySet != null && message.hasOwnProperty("keySet"))
                            object.keySet = $root.google.spanner.v1.KeySet.toObject(message.keySet, options);
                        if (message.partitionOptions != null && message.hasOwnProperty("partitionOptions"))
                            object.partitionOptions = $root.google.spanner.v1.PartitionOptions.toObject(message.partitionOptions, options);
                        return object;
                    };
    
                    /**
                     * Converts this PartitionReadRequest to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.PartitionReadRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PartitionReadRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PartitionReadRequest;
                })();
    
                v1.Partition = (function() {
    
                    /**
                     * Properties of a Partition.
                     * @memberof google.spanner.v1
                     * @interface IPartition
                     * @property {Uint8Array|null} [partitionToken] Partition partitionToken
                     */
    
                    /**
                     * Constructs a new Partition.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a Partition.
                     * @implements IPartition
                     * @constructor
                     * @param {google.spanner.v1.IPartition=} [properties] Properties to set
                     */
                    function Partition(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Partition partitionToken.
                     * @member {Uint8Array} partitionToken
                     * @memberof google.spanner.v1.Partition
                     * @instance
                     */
                    Partition.prototype.partitionToken = $util.newBuffer([]);
    
                    /**
                     * Creates a new Partition instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.Partition
                     * @static
                     * @param {google.spanner.v1.IPartition=} [properties] Properties to set
                     * @returns {google.spanner.v1.Partition} Partition instance
                     */
                    Partition.create = function create(properties) {
                        return new Partition(properties);
                    };
    
                    /**
                     * Encodes the specified Partition message. Does not implicitly {@link google.spanner.v1.Partition.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.Partition
                     * @static
                     * @param {google.spanner.v1.IPartition} message Partition message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Partition.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.partitionToken != null && Object.hasOwnProperty.call(message, "partitionToken"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.partitionToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Partition message, length delimited. Does not implicitly {@link google.spanner.v1.Partition.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.Partition
                     * @static
                     * @param {google.spanner.v1.IPartition} message Partition message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Partition.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Partition message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.Partition
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.Partition} Partition
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Partition.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.Partition();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.partitionToken = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Partition message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.Partition
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.Partition} Partition
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Partition.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Partition message.
                     * @function verify
                     * @memberof google.spanner.v1.Partition
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Partition.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.partitionToken != null && message.hasOwnProperty("partitionToken"))
                            if (!(message.partitionToken && typeof message.partitionToken.length === "number" || $util.isString(message.partitionToken)))
                                return "partitionToken: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates a Partition message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.Partition
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.Partition} Partition
                     */
                    Partition.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.Partition)
                            return object;
                        var message = new $root.google.spanner.v1.Partition();
                        if (object.partitionToken != null)
                            if (typeof object.partitionToken === "string")
                                $util.base64.decode(object.partitionToken, message.partitionToken = $util.newBuffer($util.base64.length(object.partitionToken)), 0);
                            else if (object.partitionToken.length)
                                message.partitionToken = object.partitionToken;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Partition message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.Partition
                     * @static
                     * @param {google.spanner.v1.Partition} message Partition
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Partition.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            if (options.bytes === String)
                                object.partitionToken = "";
                            else {
                                object.partitionToken = [];
                                if (options.bytes !== Array)
                                    object.partitionToken = $util.newBuffer(object.partitionToken);
                            }
                        if (message.partitionToken != null && message.hasOwnProperty("partitionToken"))
                            object.partitionToken = options.bytes === String ? $util.base64.encode(message.partitionToken, 0, message.partitionToken.length) : options.bytes === Array ? Array.prototype.slice.call(message.partitionToken) : message.partitionToken;
                        return object;
                    };
    
                    /**
                     * Converts this Partition to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.Partition
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Partition.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Partition;
                })();
    
                v1.PartitionResponse = (function() {
    
                    /**
                     * Properties of a PartitionResponse.
                     * @memberof google.spanner.v1
                     * @interface IPartitionResponse
                     * @property {Array.<google.spanner.v1.IPartition>|null} [partitions] PartitionResponse partitions
                     * @property {google.spanner.v1.ITransaction|null} [transaction] PartitionResponse transaction
                     */
    
                    /**
                     * Constructs a new PartitionResponse.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a PartitionResponse.
                     * @implements IPartitionResponse
                     * @constructor
                     * @param {google.spanner.v1.IPartitionResponse=} [properties] Properties to set
                     */
                    function PartitionResponse(properties) {
                        this.partitions = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PartitionResponse partitions.
                     * @member {Array.<google.spanner.v1.IPartition>} partitions
                     * @memberof google.spanner.v1.PartitionResponse
                     * @instance
                     */
                    PartitionResponse.prototype.partitions = $util.emptyArray;
    
                    /**
                     * PartitionResponse transaction.
                     * @member {google.spanner.v1.ITransaction|null|undefined} transaction
                     * @memberof google.spanner.v1.PartitionResponse
                     * @instance
                     */
                    PartitionResponse.prototype.transaction = null;
    
                    /**
                     * Creates a new PartitionResponse instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.PartitionResponse
                     * @static
                     * @param {google.spanner.v1.IPartitionResponse=} [properties] Properties to set
                     * @returns {google.spanner.v1.PartitionResponse} PartitionResponse instance
                     */
                    PartitionResponse.create = function create(properties) {
                        return new PartitionResponse(properties);
                    };
    
                    /**
                     * Encodes the specified PartitionResponse message. Does not implicitly {@link google.spanner.v1.PartitionResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.PartitionResponse
                     * @static
                     * @param {google.spanner.v1.IPartitionResponse} message PartitionResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PartitionResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.partitions != null && message.partitions.length)
                            for (var i = 0; i < message.partitions.length; ++i)
                                $root.google.spanner.v1.Partition.encode(message.partitions[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.transaction != null && Object.hasOwnProperty.call(message, "transaction"))
                            $root.google.spanner.v1.Transaction.encode(message.transaction, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PartitionResponse message, length delimited. Does not implicitly {@link google.spanner.v1.PartitionResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.PartitionResponse
                     * @static
                     * @param {google.spanner.v1.IPartitionResponse} message PartitionResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PartitionResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PartitionResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.PartitionResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.PartitionResponse} PartitionResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PartitionResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.PartitionResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.partitions && message.partitions.length))
                                    message.partitions = [];
                                message.partitions.push($root.google.spanner.v1.Partition.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.transaction = $root.google.spanner.v1.Transaction.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PartitionResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.PartitionResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.PartitionResponse} PartitionResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PartitionResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PartitionResponse message.
                     * @function verify
                     * @memberof google.spanner.v1.PartitionResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PartitionResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.partitions != null && message.hasOwnProperty("partitions")) {
                            if (!Array.isArray(message.partitions))
                                return "partitions: array expected";
                            for (var i = 0; i < message.partitions.length; ++i) {
                                var error = $root.google.spanner.v1.Partition.verify(message.partitions[i]);
                                if (error)
                                    return "partitions." + error;
                            }
                        }
                        if (message.transaction != null && message.hasOwnProperty("transaction")) {
                            var error = $root.google.spanner.v1.Transaction.verify(message.transaction);
                            if (error)
                                return "transaction." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a PartitionResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.PartitionResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.PartitionResponse} PartitionResponse
                     */
                    PartitionResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.PartitionResponse)
                            return object;
                        var message = new $root.google.spanner.v1.PartitionResponse();
                        if (object.partitions) {
                            if (!Array.isArray(object.partitions))
                                throw TypeError(".google.spanner.v1.PartitionResponse.partitions: array expected");
                            message.partitions = [];
                            for (var i = 0; i < object.partitions.length; ++i) {
                                if (typeof object.partitions[i] !== "object")
                                    throw TypeError(".google.spanner.v1.PartitionResponse.partitions: object expected");
                                message.partitions[i] = $root.google.spanner.v1.Partition.fromObject(object.partitions[i]);
                            }
                        }
                        if (object.transaction != null) {
                            if (typeof object.transaction !== "object")
                                throw TypeError(".google.spanner.v1.PartitionResponse.transaction: object expected");
                            message.transaction = $root.google.spanner.v1.Transaction.fromObject(object.transaction);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PartitionResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.PartitionResponse
                     * @static
                     * @param {google.spanner.v1.PartitionResponse} message PartitionResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PartitionResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.partitions = [];
                        if (options.defaults)
                            object.transaction = null;
                        if (message.partitions && message.partitions.length) {
                            object.partitions = [];
                            for (var j = 0; j < message.partitions.length; ++j)
                                object.partitions[j] = $root.google.spanner.v1.Partition.toObject(message.partitions[j], options);
                        }
                        if (message.transaction != null && message.hasOwnProperty("transaction"))
                            object.transaction = $root.google.spanner.v1.Transaction.toObject(message.transaction, options);
                        return object;
                    };
    
                    /**
                     * Converts this PartitionResponse to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.PartitionResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PartitionResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PartitionResponse;
                })();
    
                v1.ReadRequest = (function() {
    
                    /**
                     * Properties of a ReadRequest.
                     * @memberof google.spanner.v1
                     * @interface IReadRequest
                     * @property {string|null} [session] ReadRequest session
                     * @property {google.spanner.v1.ITransactionSelector|null} [transaction] ReadRequest transaction
                     * @property {string|null} [table] ReadRequest table
                     * @property {string|null} [index] ReadRequest index
                     * @property {Array.<string>|null} [columns] ReadRequest columns
                     * @property {google.spanner.v1.IKeySet|null} [keySet] ReadRequest keySet
                     * @property {number|Long|null} [limit] ReadRequest limit
                     * @property {Uint8Array|null} [resumeToken] ReadRequest resumeToken
                     * @property {Uint8Array|null} [partitionToken] ReadRequest partitionToken
                     */
    
                    /**
                     * Constructs a new ReadRequest.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a ReadRequest.
                     * @implements IReadRequest
                     * @constructor
                     * @param {google.spanner.v1.IReadRequest=} [properties] Properties to set
                     */
                    function ReadRequest(properties) {
                        this.columns = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReadRequest session.
                     * @member {string} session
                     * @memberof google.spanner.v1.ReadRequest
                     * @instance
                     */
                    ReadRequest.prototype.session = "";
    
                    /**
                     * ReadRequest transaction.
                     * @member {google.spanner.v1.ITransactionSelector|null|undefined} transaction
                     * @memberof google.spanner.v1.ReadRequest
                     * @instance
                     */
                    ReadRequest.prototype.transaction = null;
    
                    /**
                     * ReadRequest table.
                     * @member {string} table
                     * @memberof google.spanner.v1.ReadRequest
                     * @instance
                     */
                    ReadRequest.prototype.table = "";
    
                    /**
                     * ReadRequest index.
                     * @member {string} index
                     * @memberof google.spanner.v1.ReadRequest
                     * @instance
                     */
                    ReadRequest.prototype.index = "";
    
                    /**
                     * ReadRequest columns.
                     * @member {Array.<string>} columns
                     * @memberof google.spanner.v1.ReadRequest
                     * @instance
                     */
                    ReadRequest.prototype.columns = $util.emptyArray;
    
                    /**
                     * ReadRequest keySet.
                     * @member {google.spanner.v1.IKeySet|null|undefined} keySet
                     * @memberof google.spanner.v1.ReadRequest
                     * @instance
                     */
                    ReadRequest.prototype.keySet = null;
    
                    /**
                     * ReadRequest limit.
                     * @member {number|Long} limit
                     * @memberof google.spanner.v1.ReadRequest
                     * @instance
                     */
                    ReadRequest.prototype.limit = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * ReadRequest resumeToken.
                     * @member {Uint8Array} resumeToken
                     * @memberof google.spanner.v1.ReadRequest
                     * @instance
                     */
                    ReadRequest.prototype.resumeToken = $util.newBuffer([]);
    
                    /**
                     * ReadRequest partitionToken.
                     * @member {Uint8Array} partitionToken
                     * @memberof google.spanner.v1.ReadRequest
                     * @instance
                     */
                    ReadRequest.prototype.partitionToken = $util.newBuffer([]);
    
                    /**
                     * Creates a new ReadRequest instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.ReadRequest
                     * @static
                     * @param {google.spanner.v1.IReadRequest=} [properties] Properties to set
                     * @returns {google.spanner.v1.ReadRequest} ReadRequest instance
                     */
                    ReadRequest.create = function create(properties) {
                        return new ReadRequest(properties);
                    };
    
                    /**
                     * Encodes the specified ReadRequest message. Does not implicitly {@link google.spanner.v1.ReadRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.ReadRequest
                     * @static
                     * @param {google.spanner.v1.IReadRequest} message ReadRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReadRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.session != null && Object.hasOwnProperty.call(message, "session"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.session);
                        if (message.transaction != null && Object.hasOwnProperty.call(message, "transaction"))
                            $root.google.spanner.v1.TransactionSelector.encode(message.transaction, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.table != null && Object.hasOwnProperty.call(message, "table"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.table);
                        if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.index);
                        if (message.columns != null && message.columns.length)
                            for (var i = 0; i < message.columns.length; ++i)
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.columns[i]);
                        if (message.keySet != null && Object.hasOwnProperty.call(message, "keySet"))
                            $root.google.spanner.v1.KeySet.encode(message.keySet, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.limit != null && Object.hasOwnProperty.call(message, "limit"))
                            writer.uint32(/* id 8, wireType 0 =*/64).int64(message.limit);
                        if (message.resumeToken != null && Object.hasOwnProperty.call(message, "resumeToken"))
                            writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.resumeToken);
                        if (message.partitionToken != null && Object.hasOwnProperty.call(message, "partitionToken"))
                            writer.uint32(/* id 10, wireType 2 =*/82).bytes(message.partitionToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReadRequest message, length delimited. Does not implicitly {@link google.spanner.v1.ReadRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.ReadRequest
                     * @static
                     * @param {google.spanner.v1.IReadRequest} message ReadRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReadRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReadRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.ReadRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.ReadRequest} ReadRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReadRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.ReadRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.session = reader.string();
                                break;
                            case 2:
                                message.transaction = $root.google.spanner.v1.TransactionSelector.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.table = reader.string();
                                break;
                            case 4:
                                message.index = reader.string();
                                break;
                            case 5:
                                if (!(message.columns && message.columns.length))
                                    message.columns = [];
                                message.columns.push(reader.string());
                                break;
                            case 6:
                                message.keySet = $root.google.spanner.v1.KeySet.decode(reader, reader.uint32());
                                break;
                            case 8:
                                message.limit = reader.int64();
                                break;
                            case 9:
                                message.resumeToken = reader.bytes();
                                break;
                            case 10:
                                message.partitionToken = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReadRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.ReadRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.ReadRequest} ReadRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReadRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReadRequest message.
                     * @function verify
                     * @memberof google.spanner.v1.ReadRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReadRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.session != null && message.hasOwnProperty("session"))
                            if (!$util.isString(message.session))
                                return "session: string expected";
                        if (message.transaction != null && message.hasOwnProperty("transaction")) {
                            var error = $root.google.spanner.v1.TransactionSelector.verify(message.transaction);
                            if (error)
                                return "transaction." + error;
                        }
                        if (message.table != null && message.hasOwnProperty("table"))
                            if (!$util.isString(message.table))
                                return "table: string expected";
                        if (message.index != null && message.hasOwnProperty("index"))
                            if (!$util.isString(message.index))
                                return "index: string expected";
                        if (message.columns != null && message.hasOwnProperty("columns")) {
                            if (!Array.isArray(message.columns))
                                return "columns: array expected";
                            for (var i = 0; i < message.columns.length; ++i)
                                if (!$util.isString(message.columns[i]))
                                    return "columns: string[] expected";
                        }
                        if (message.keySet != null && message.hasOwnProperty("keySet")) {
                            var error = $root.google.spanner.v1.KeySet.verify(message.keySet);
                            if (error)
                                return "keySet." + error;
                        }
                        if (message.limit != null && message.hasOwnProperty("limit"))
                            if (!$util.isInteger(message.limit) && !(message.limit && $util.isInteger(message.limit.low) && $util.isInteger(message.limit.high)))
                                return "limit: integer|Long expected";
                        if (message.resumeToken != null && message.hasOwnProperty("resumeToken"))
                            if (!(message.resumeToken && typeof message.resumeToken.length === "number" || $util.isString(message.resumeToken)))
                                return "resumeToken: buffer expected";
                        if (message.partitionToken != null && message.hasOwnProperty("partitionToken"))
                            if (!(message.partitionToken && typeof message.partitionToken.length === "number" || $util.isString(message.partitionToken)))
                                return "partitionToken: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReadRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.ReadRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.ReadRequest} ReadRequest
                     */
                    ReadRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.ReadRequest)
                            return object;
                        var message = new $root.google.spanner.v1.ReadRequest();
                        if (object.session != null)
                            message.session = String(object.session);
                        if (object.transaction != null) {
                            if (typeof object.transaction !== "object")
                                throw TypeError(".google.spanner.v1.ReadRequest.transaction: object expected");
                            message.transaction = $root.google.spanner.v1.TransactionSelector.fromObject(object.transaction);
                        }
                        if (object.table != null)
                            message.table = String(object.table);
                        if (object.index != null)
                            message.index = String(object.index);
                        if (object.columns) {
                            if (!Array.isArray(object.columns))
                                throw TypeError(".google.spanner.v1.ReadRequest.columns: array expected");
                            message.columns = [];
                            for (var i = 0; i < object.columns.length; ++i)
                                message.columns[i] = String(object.columns[i]);
                        }
                        if (object.keySet != null) {
                            if (typeof object.keySet !== "object")
                                throw TypeError(".google.spanner.v1.ReadRequest.keySet: object expected");
                            message.keySet = $root.google.spanner.v1.KeySet.fromObject(object.keySet);
                        }
                        if (object.limit != null)
                            if ($util.Long)
                                (message.limit = $util.Long.fromValue(object.limit)).unsigned = false;
                            else if (typeof object.limit === "string")
                                message.limit = parseInt(object.limit, 10);
                            else if (typeof object.limit === "number")
                                message.limit = object.limit;
                            else if (typeof object.limit === "object")
                                message.limit = new $util.LongBits(object.limit.low >>> 0, object.limit.high >>> 0).toNumber();
                        if (object.resumeToken != null)
                            if (typeof object.resumeToken === "string")
                                $util.base64.decode(object.resumeToken, message.resumeToken = $util.newBuffer($util.base64.length(object.resumeToken)), 0);
                            else if (object.resumeToken.length)
                                message.resumeToken = object.resumeToken;
                        if (object.partitionToken != null)
                            if (typeof object.partitionToken === "string")
                                $util.base64.decode(object.partitionToken, message.partitionToken = $util.newBuffer($util.base64.length(object.partitionToken)), 0);
                            else if (object.partitionToken.length)
                                message.partitionToken = object.partitionToken;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReadRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.ReadRequest
                     * @static
                     * @param {google.spanner.v1.ReadRequest} message ReadRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReadRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.columns = [];
                        if (options.defaults) {
                            object.session = "";
                            object.transaction = null;
                            object.table = "";
                            object.index = "";
                            object.keySet = null;
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.limit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.limit = options.longs === String ? "0" : 0;
                            if (options.bytes === String)
                                object.resumeToken = "";
                            else {
                                object.resumeToken = [];
                                if (options.bytes !== Array)
                                    object.resumeToken = $util.newBuffer(object.resumeToken);
                            }
                            if (options.bytes === String)
                                object.partitionToken = "";
                            else {
                                object.partitionToken = [];
                                if (options.bytes !== Array)
                                    object.partitionToken = $util.newBuffer(object.partitionToken);
                            }
                        }
                        if (message.session != null && message.hasOwnProperty("session"))
                            object.session = message.session;
                        if (message.transaction != null && message.hasOwnProperty("transaction"))
                            object.transaction = $root.google.spanner.v1.TransactionSelector.toObject(message.transaction, options);
                        if (message.table != null && message.hasOwnProperty("table"))
                            object.table = message.table;
                        if (message.index != null && message.hasOwnProperty("index"))
                            object.index = message.index;
                        if (message.columns && message.columns.length) {
                            object.columns = [];
                            for (var j = 0; j < message.columns.length; ++j)
                                object.columns[j] = message.columns[j];
                        }
                        if (message.keySet != null && message.hasOwnProperty("keySet"))
                            object.keySet = $root.google.spanner.v1.KeySet.toObject(message.keySet, options);
                        if (message.limit != null && message.hasOwnProperty("limit"))
                            if (typeof message.limit === "number")
                                object.limit = options.longs === String ? String(message.limit) : message.limit;
                            else
                                object.limit = options.longs === String ? $util.Long.prototype.toString.call(message.limit) : options.longs === Number ? new $util.LongBits(message.limit.low >>> 0, message.limit.high >>> 0).toNumber() : message.limit;
                        if (message.resumeToken != null && message.hasOwnProperty("resumeToken"))
                            object.resumeToken = options.bytes === String ? $util.base64.encode(message.resumeToken, 0, message.resumeToken.length) : options.bytes === Array ? Array.prototype.slice.call(message.resumeToken) : message.resumeToken;
                        if (message.partitionToken != null && message.hasOwnProperty("partitionToken"))
                            object.partitionToken = options.bytes === String ? $util.base64.encode(message.partitionToken, 0, message.partitionToken.length) : options.bytes === Array ? Array.prototype.slice.call(message.partitionToken) : message.partitionToken;
                        return object;
                    };
    
                    /**
                     * Converts this ReadRequest to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.ReadRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReadRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ReadRequest;
                })();
    
                v1.BeginTransactionRequest = (function() {
    
                    /**
                     * Properties of a BeginTransactionRequest.
                     * @memberof google.spanner.v1
                     * @interface IBeginTransactionRequest
                     * @property {string|null} [session] BeginTransactionRequest session
                     * @property {google.spanner.v1.ITransactionOptions|null} [options] BeginTransactionRequest options
                     */
    
                    /**
                     * Constructs a new BeginTransactionRequest.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a BeginTransactionRequest.
                     * @implements IBeginTransactionRequest
                     * @constructor
                     * @param {google.spanner.v1.IBeginTransactionRequest=} [properties] Properties to set
                     */
                    function BeginTransactionRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * BeginTransactionRequest session.
                     * @member {string} session
                     * @memberof google.spanner.v1.BeginTransactionRequest
                     * @instance
                     */
                    BeginTransactionRequest.prototype.session = "";
    
                    /**
                     * BeginTransactionRequest options.
                     * @member {google.spanner.v1.ITransactionOptions|null|undefined} options
                     * @memberof google.spanner.v1.BeginTransactionRequest
                     * @instance
                     */
                    BeginTransactionRequest.prototype.options = null;
    
                    /**
                     * Creates a new BeginTransactionRequest instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.BeginTransactionRequest
                     * @static
                     * @param {google.spanner.v1.IBeginTransactionRequest=} [properties] Properties to set
                     * @returns {google.spanner.v1.BeginTransactionRequest} BeginTransactionRequest instance
                     */
                    BeginTransactionRequest.create = function create(properties) {
                        return new BeginTransactionRequest(properties);
                    };
    
                    /**
                     * Encodes the specified BeginTransactionRequest message. Does not implicitly {@link google.spanner.v1.BeginTransactionRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.BeginTransactionRequest
                     * @static
                     * @param {google.spanner.v1.IBeginTransactionRequest} message BeginTransactionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BeginTransactionRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.session != null && Object.hasOwnProperty.call(message, "session"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.session);
                        if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                            $root.google.spanner.v1.TransactionOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified BeginTransactionRequest message, length delimited. Does not implicitly {@link google.spanner.v1.BeginTransactionRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.BeginTransactionRequest
                     * @static
                     * @param {google.spanner.v1.IBeginTransactionRequest} message BeginTransactionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BeginTransactionRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a BeginTransactionRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.BeginTransactionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.BeginTransactionRequest} BeginTransactionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BeginTransactionRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.BeginTransactionRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.session = reader.string();
                                break;
                            case 2:
                                message.options = $root.google.spanner.v1.TransactionOptions.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a BeginTransactionRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.BeginTransactionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.BeginTransactionRequest} BeginTransactionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BeginTransactionRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a BeginTransactionRequest message.
                     * @function verify
                     * @memberof google.spanner.v1.BeginTransactionRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    BeginTransactionRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.session != null && message.hasOwnProperty("session"))
                            if (!$util.isString(message.session))
                                return "session: string expected";
                        if (message.options != null && message.hasOwnProperty("options")) {
                            var error = $root.google.spanner.v1.TransactionOptions.verify(message.options);
                            if (error)
                                return "options." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a BeginTransactionRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.BeginTransactionRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.BeginTransactionRequest} BeginTransactionRequest
                     */
                    BeginTransactionRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.BeginTransactionRequest)
                            return object;
                        var message = new $root.google.spanner.v1.BeginTransactionRequest();
                        if (object.session != null)
                            message.session = String(object.session);
                        if (object.options != null) {
                            if (typeof object.options !== "object")
                                throw TypeError(".google.spanner.v1.BeginTransactionRequest.options: object expected");
                            message.options = $root.google.spanner.v1.TransactionOptions.fromObject(object.options);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a BeginTransactionRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.BeginTransactionRequest
                     * @static
                     * @param {google.spanner.v1.BeginTransactionRequest} message BeginTransactionRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    BeginTransactionRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.session = "";
                            object.options = null;
                        }
                        if (message.session != null && message.hasOwnProperty("session"))
                            object.session = message.session;
                        if (message.options != null && message.hasOwnProperty("options"))
                            object.options = $root.google.spanner.v1.TransactionOptions.toObject(message.options, options);
                        return object;
                    };
    
                    /**
                     * Converts this BeginTransactionRequest to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.BeginTransactionRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    BeginTransactionRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return BeginTransactionRequest;
                })();
    
                v1.CommitRequest = (function() {
    
                    /**
                     * Properties of a CommitRequest.
                     * @memberof google.spanner.v1
                     * @interface ICommitRequest
                     * @property {string|null} [session] CommitRequest session
                     * @property {Uint8Array|null} [transactionId] CommitRequest transactionId
                     * @property {google.spanner.v1.ITransactionOptions|null} [singleUseTransaction] CommitRequest singleUseTransaction
                     * @property {Array.<google.spanner.v1.IMutation>|null} [mutations] CommitRequest mutations
                     */
    
                    /**
                     * Constructs a new CommitRequest.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a CommitRequest.
                     * @implements ICommitRequest
                     * @constructor
                     * @param {google.spanner.v1.ICommitRequest=} [properties] Properties to set
                     */
                    function CommitRequest(properties) {
                        this.mutations = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CommitRequest session.
                     * @member {string} session
                     * @memberof google.spanner.v1.CommitRequest
                     * @instance
                     */
                    CommitRequest.prototype.session = "";
    
                    /**
                     * CommitRequest transactionId.
                     * @member {Uint8Array} transactionId
                     * @memberof google.spanner.v1.CommitRequest
                     * @instance
                     */
                    CommitRequest.prototype.transactionId = $util.newBuffer([]);
    
                    /**
                     * CommitRequest singleUseTransaction.
                     * @member {google.spanner.v1.ITransactionOptions|null|undefined} singleUseTransaction
                     * @memberof google.spanner.v1.CommitRequest
                     * @instance
                     */
                    CommitRequest.prototype.singleUseTransaction = null;
    
                    /**
                     * CommitRequest mutations.
                     * @member {Array.<google.spanner.v1.IMutation>} mutations
                     * @memberof google.spanner.v1.CommitRequest
                     * @instance
                     */
                    CommitRequest.prototype.mutations = $util.emptyArray;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * CommitRequest transaction.
                     * @member {"transactionId"|"singleUseTransaction"|undefined} transaction
                     * @memberof google.spanner.v1.CommitRequest
                     * @instance
                     */
                    Object.defineProperty(CommitRequest.prototype, "transaction", {
                        get: $util.oneOfGetter($oneOfFields = ["transactionId", "singleUseTransaction"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new CommitRequest instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.CommitRequest
                     * @static
                     * @param {google.spanner.v1.ICommitRequest=} [properties] Properties to set
                     * @returns {google.spanner.v1.CommitRequest} CommitRequest instance
                     */
                    CommitRequest.create = function create(properties) {
                        return new CommitRequest(properties);
                    };
    
                    /**
                     * Encodes the specified CommitRequest message. Does not implicitly {@link google.spanner.v1.CommitRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.CommitRequest
                     * @static
                     * @param {google.spanner.v1.ICommitRequest} message CommitRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CommitRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.session != null && Object.hasOwnProperty.call(message, "session"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.session);
                        if (message.transactionId != null && Object.hasOwnProperty.call(message, "transactionId"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.transactionId);
                        if (message.singleUseTransaction != null && Object.hasOwnProperty.call(message, "singleUseTransaction"))
                            $root.google.spanner.v1.TransactionOptions.encode(message.singleUseTransaction, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.mutations != null && message.mutations.length)
                            for (var i = 0; i < message.mutations.length; ++i)
                                $root.google.spanner.v1.Mutation.encode(message.mutations[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CommitRequest message, length delimited. Does not implicitly {@link google.spanner.v1.CommitRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.CommitRequest
                     * @static
                     * @param {google.spanner.v1.ICommitRequest} message CommitRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CommitRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CommitRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.CommitRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.CommitRequest} CommitRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CommitRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.CommitRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.session = reader.string();
                                break;
                            case 2:
                                message.transactionId = reader.bytes();
                                break;
                            case 3:
                                message.singleUseTransaction = $root.google.spanner.v1.TransactionOptions.decode(reader, reader.uint32());
                                break;
                            case 4:
                                if (!(message.mutations && message.mutations.length))
                                    message.mutations = [];
                                message.mutations.push($root.google.spanner.v1.Mutation.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CommitRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.CommitRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.CommitRequest} CommitRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CommitRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CommitRequest message.
                     * @function verify
                     * @memberof google.spanner.v1.CommitRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CommitRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.session != null && message.hasOwnProperty("session"))
                            if (!$util.isString(message.session))
                                return "session: string expected";
                        if (message.transactionId != null && message.hasOwnProperty("transactionId")) {
                            properties.transaction = 1;
                            if (!(message.transactionId && typeof message.transactionId.length === "number" || $util.isString(message.transactionId)))
                                return "transactionId: buffer expected";
                        }
                        if (message.singleUseTransaction != null && message.hasOwnProperty("singleUseTransaction")) {
                            if (properties.transaction === 1)
                                return "transaction: multiple values";
                            properties.transaction = 1;
                            {
                                var error = $root.google.spanner.v1.TransactionOptions.verify(message.singleUseTransaction);
                                if (error)
                                    return "singleUseTransaction." + error;
                            }
                        }
                        if (message.mutations != null && message.hasOwnProperty("mutations")) {
                            if (!Array.isArray(message.mutations))
                                return "mutations: array expected";
                            for (var i = 0; i < message.mutations.length; ++i) {
                                var error = $root.google.spanner.v1.Mutation.verify(message.mutations[i]);
                                if (error)
                                    return "mutations." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a CommitRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.CommitRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.CommitRequest} CommitRequest
                     */
                    CommitRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.CommitRequest)
                            return object;
                        var message = new $root.google.spanner.v1.CommitRequest();
                        if (object.session != null)
                            message.session = String(object.session);
                        if (object.transactionId != null)
                            if (typeof object.transactionId === "string")
                                $util.base64.decode(object.transactionId, message.transactionId = $util.newBuffer($util.base64.length(object.transactionId)), 0);
                            else if (object.transactionId.length)
                                message.transactionId = object.transactionId;
                        if (object.singleUseTransaction != null) {
                            if (typeof object.singleUseTransaction !== "object")
                                throw TypeError(".google.spanner.v1.CommitRequest.singleUseTransaction: object expected");
                            message.singleUseTransaction = $root.google.spanner.v1.TransactionOptions.fromObject(object.singleUseTransaction);
                        }
                        if (object.mutations) {
                            if (!Array.isArray(object.mutations))
                                throw TypeError(".google.spanner.v1.CommitRequest.mutations: array expected");
                            message.mutations = [];
                            for (var i = 0; i < object.mutations.length; ++i) {
                                if (typeof object.mutations[i] !== "object")
                                    throw TypeError(".google.spanner.v1.CommitRequest.mutations: object expected");
                                message.mutations[i] = $root.google.spanner.v1.Mutation.fromObject(object.mutations[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CommitRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.CommitRequest
                     * @static
                     * @param {google.spanner.v1.CommitRequest} message CommitRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CommitRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.mutations = [];
                        if (options.defaults)
                            object.session = "";
                        if (message.session != null && message.hasOwnProperty("session"))
                            object.session = message.session;
                        if (message.transactionId != null && message.hasOwnProperty("transactionId")) {
                            object.transactionId = options.bytes === String ? $util.base64.encode(message.transactionId, 0, message.transactionId.length) : options.bytes === Array ? Array.prototype.slice.call(message.transactionId) : message.transactionId;
                            if (options.oneofs)
                                object.transaction = "transactionId";
                        }
                        if (message.singleUseTransaction != null && message.hasOwnProperty("singleUseTransaction")) {
                            object.singleUseTransaction = $root.google.spanner.v1.TransactionOptions.toObject(message.singleUseTransaction, options);
                            if (options.oneofs)
                                object.transaction = "singleUseTransaction";
                        }
                        if (message.mutations && message.mutations.length) {
                            object.mutations = [];
                            for (var j = 0; j < message.mutations.length; ++j)
                                object.mutations[j] = $root.google.spanner.v1.Mutation.toObject(message.mutations[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this CommitRequest to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.CommitRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CommitRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return CommitRequest;
                })();
    
                v1.CommitResponse = (function() {
    
                    /**
                     * Properties of a CommitResponse.
                     * @memberof google.spanner.v1
                     * @interface ICommitResponse
                     * @property {google.protobuf.ITimestamp|null} [commitTimestamp] CommitResponse commitTimestamp
                     */
    
                    /**
                     * Constructs a new CommitResponse.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a CommitResponse.
                     * @implements ICommitResponse
                     * @constructor
                     * @param {google.spanner.v1.ICommitResponse=} [properties] Properties to set
                     */
                    function CommitResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CommitResponse commitTimestamp.
                     * @member {google.protobuf.ITimestamp|null|undefined} commitTimestamp
                     * @memberof google.spanner.v1.CommitResponse
                     * @instance
                     */
                    CommitResponse.prototype.commitTimestamp = null;
    
                    /**
                     * Creates a new CommitResponse instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.CommitResponse
                     * @static
                     * @param {google.spanner.v1.ICommitResponse=} [properties] Properties to set
                     * @returns {google.spanner.v1.CommitResponse} CommitResponse instance
                     */
                    CommitResponse.create = function create(properties) {
                        return new CommitResponse(properties);
                    };
    
                    /**
                     * Encodes the specified CommitResponse message. Does not implicitly {@link google.spanner.v1.CommitResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.CommitResponse
                     * @static
                     * @param {google.spanner.v1.ICommitResponse} message CommitResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CommitResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.commitTimestamp != null && Object.hasOwnProperty.call(message, "commitTimestamp"))
                            $root.google.protobuf.Timestamp.encode(message.commitTimestamp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CommitResponse message, length delimited. Does not implicitly {@link google.spanner.v1.CommitResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.CommitResponse
                     * @static
                     * @param {google.spanner.v1.ICommitResponse} message CommitResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CommitResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CommitResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.CommitResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.CommitResponse} CommitResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CommitResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.CommitResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.commitTimestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CommitResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.CommitResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.CommitResponse} CommitResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CommitResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CommitResponse message.
                     * @function verify
                     * @memberof google.spanner.v1.CommitResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CommitResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.commitTimestamp != null && message.hasOwnProperty("commitTimestamp")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.commitTimestamp);
                            if (error)
                                return "commitTimestamp." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a CommitResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.CommitResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.CommitResponse} CommitResponse
                     */
                    CommitResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.CommitResponse)
                            return object;
                        var message = new $root.google.spanner.v1.CommitResponse();
                        if (object.commitTimestamp != null) {
                            if (typeof object.commitTimestamp !== "object")
                                throw TypeError(".google.spanner.v1.CommitResponse.commitTimestamp: object expected");
                            message.commitTimestamp = $root.google.protobuf.Timestamp.fromObject(object.commitTimestamp);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CommitResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.CommitResponse
                     * @static
                     * @param {google.spanner.v1.CommitResponse} message CommitResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CommitResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.commitTimestamp = null;
                        if (message.commitTimestamp != null && message.hasOwnProperty("commitTimestamp"))
                            object.commitTimestamp = $root.google.protobuf.Timestamp.toObject(message.commitTimestamp, options);
                        return object;
                    };
    
                    /**
                     * Converts this CommitResponse to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.CommitResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CommitResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return CommitResponse;
                })();
    
                v1.RollbackRequest = (function() {
    
                    /**
                     * Properties of a RollbackRequest.
                     * @memberof google.spanner.v1
                     * @interface IRollbackRequest
                     * @property {string|null} [session] RollbackRequest session
                     * @property {Uint8Array|null} [transactionId] RollbackRequest transactionId
                     */
    
                    /**
                     * Constructs a new RollbackRequest.
                     * @memberof google.spanner.v1
                     * @classdesc Represents a RollbackRequest.
                     * @implements IRollbackRequest
                     * @constructor
                     * @param {google.spanner.v1.IRollbackRequest=} [properties] Properties to set
                     */
                    function RollbackRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * RollbackRequest session.
                     * @member {string} session
                     * @memberof google.spanner.v1.RollbackRequest
                     * @instance
                     */
                    RollbackRequest.prototype.session = "";
    
                    /**
                     * RollbackRequest transactionId.
                     * @member {Uint8Array} transactionId
                     * @memberof google.spanner.v1.RollbackRequest
                     * @instance
                     */
                    RollbackRequest.prototype.transactionId = $util.newBuffer([]);
    
                    /**
                     * Creates a new RollbackRequest instance using the specified properties.
                     * @function create
                     * @memberof google.spanner.v1.RollbackRequest
                     * @static
                     * @param {google.spanner.v1.IRollbackRequest=} [properties] Properties to set
                     * @returns {google.spanner.v1.RollbackRequest} RollbackRequest instance
                     */
                    RollbackRequest.create = function create(properties) {
                        return new RollbackRequest(properties);
                    };
    
                    /**
                     * Encodes the specified RollbackRequest message. Does not implicitly {@link google.spanner.v1.RollbackRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.spanner.v1.RollbackRequest
                     * @static
                     * @param {google.spanner.v1.IRollbackRequest} message RollbackRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RollbackRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.session != null && Object.hasOwnProperty.call(message, "session"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.session);
                        if (message.transactionId != null && Object.hasOwnProperty.call(message, "transactionId"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.transactionId);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified RollbackRequest message, length delimited. Does not implicitly {@link google.spanner.v1.RollbackRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.spanner.v1.RollbackRequest
                     * @static
                     * @param {google.spanner.v1.IRollbackRequest} message RollbackRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RollbackRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a RollbackRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.spanner.v1.RollbackRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.spanner.v1.RollbackRequest} RollbackRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RollbackRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.spanner.v1.RollbackRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.session = reader.string();
                                break;
                            case 2:
                                message.transactionId = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a RollbackRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.spanner.v1.RollbackRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.spanner.v1.RollbackRequest} RollbackRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RollbackRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a RollbackRequest message.
                     * @function verify
                     * @memberof google.spanner.v1.RollbackRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    RollbackRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.session != null && message.hasOwnProperty("session"))
                            if (!$util.isString(message.session))
                                return "session: string expected";
                        if (message.transactionId != null && message.hasOwnProperty("transactionId"))
                            if (!(message.transactionId && typeof message.transactionId.length === "number" || $util.isString(message.transactionId)))
                                return "transactionId: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates a RollbackRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.spanner.v1.RollbackRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.spanner.v1.RollbackRequest} RollbackRequest
                     */
                    RollbackRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.spanner.v1.RollbackRequest)
                            return object;
                        var message = new $root.google.spanner.v1.RollbackRequest();
                        if (object.session != null)
                            message.session = String(object.session);
                        if (object.transactionId != null)
                            if (typeof object.transactionId === "string")
                                $util.base64.decode(object.transactionId, message.transactionId = $util.newBuffer($util.base64.length(object.transactionId)), 0);
                            else if (object.transactionId.length)
                                message.transactionId = object.transactionId;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a RollbackRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.spanner.v1.RollbackRequest
                     * @static
                     * @param {google.spanner.v1.RollbackRequest} message RollbackRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    RollbackRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.session = "";
                            if (options.bytes === String)
                                object.transactionId = "";
                            else {
                                object.transactionId = [];
                                if (options.bytes !== Array)
                                    object.transactionId = $util.newBuffer(object.transactionId);
                            }
                        }
                        if (message.session != null && message.hasOwnProperty("session"))
                            object.session = message.session;
                        if (message.transactionId != null && message.hasOwnProperty("transactionId"))
                            object.transactionId = options.bytes === String ? $util.base64.encode(message.transactionId, 0, message.transactionId.length) : options.bytes === Array ? Array.prototype.slice.call(message.transactionId) : message.transactionId;
                        return object;
                    };
    
                    /**
                     * Converts this RollbackRequest to JSON.
                     * @function toJSON
                     * @memberof google.spanner.v1.RollbackRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    RollbackRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return RollbackRequest;
                })();
    
                return v1;
            })();
    
            return spanner;
        })();
    
        google.api = (function() {
    
            /**
             * Namespace api.
             * @memberof google
             * @namespace
             */
            var api = {};
    
            /**
             * FieldBehavior enum.
             * @name google.api.FieldBehavior
             * @enum {number}
             * @property {number} FIELD_BEHAVIOR_UNSPECIFIED=0 FIELD_BEHAVIOR_UNSPECIFIED value
             * @property {number} OPTIONAL=1 OPTIONAL value
             * @property {number} REQUIRED=2 REQUIRED value
             * @property {number} OUTPUT_ONLY=3 OUTPUT_ONLY value
             * @property {number} INPUT_ONLY=4 INPUT_ONLY value
             * @property {number} IMMUTABLE=5 IMMUTABLE value
             */
            api.FieldBehavior = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "FIELD_BEHAVIOR_UNSPECIFIED"] = 0;
                values[valuesById[1] = "OPTIONAL"] = 1;
                values[valuesById[2] = "REQUIRED"] = 2;
                values[valuesById[3] = "OUTPUT_ONLY"] = 3;
                values[valuesById[4] = "INPUT_ONLY"] = 4;
                values[valuesById[5] = "IMMUTABLE"] = 5;
                return values;
            })();
    
            api.ResourceDescriptor = (function() {
    
                /**
                 * Properties of a ResourceDescriptor.
                 * @memberof google.api
                 * @interface IResourceDescriptor
                 * @property {string|null} [type] ResourceDescriptor type
                 * @property {Array.<string>|null} [pattern] ResourceDescriptor pattern
                 * @property {string|null} [nameField] ResourceDescriptor nameField
                 * @property {google.api.ResourceDescriptor.History|null} [history] ResourceDescriptor history
                 * @property {string|null} [plural] ResourceDescriptor plural
                 * @property {string|null} [singular] ResourceDescriptor singular
                 */
    
                /**
                 * Constructs a new ResourceDescriptor.
                 * @memberof google.api
                 * @classdesc Represents a ResourceDescriptor.
                 * @implements IResourceDescriptor
                 * @constructor
                 * @param {google.api.IResourceDescriptor=} [properties] Properties to set
                 */
                function ResourceDescriptor(properties) {
                    this.pattern = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResourceDescriptor type.
                 * @member {string} type
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.type = "";
    
                /**
                 * ResourceDescriptor pattern.
                 * @member {Array.<string>} pattern
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.pattern = $util.emptyArray;
    
                /**
                 * ResourceDescriptor nameField.
                 * @member {string} nameField
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.nameField = "";
    
                /**
                 * ResourceDescriptor history.
                 * @member {google.api.ResourceDescriptor.History} history
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.history = 0;
    
                /**
                 * ResourceDescriptor plural.
                 * @member {string} plural
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.plural = "";
    
                /**
                 * ResourceDescriptor singular.
                 * @member {string} singular
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.singular = "";
    
                /**
                 * Creates a new ResourceDescriptor instance using the specified properties.
                 * @function create
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor=} [properties] Properties to set
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor instance
                 */
                ResourceDescriptor.create = function create(properties) {
                    return new ResourceDescriptor(properties);
                };
    
                /**
                 * Encodes the specified ResourceDescriptor message. Does not implicitly {@link google.api.ResourceDescriptor.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor} message ResourceDescriptor message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceDescriptor.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                    if (message.pattern != null && message.pattern.length)
                        for (var i = 0; i < message.pattern.length; ++i)
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.pattern[i]);
                    if (message.nameField != null && Object.hasOwnProperty.call(message, "nameField"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.nameField);
                    if (message.history != null && Object.hasOwnProperty.call(message, "history"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.history);
                    if (message.plural != null && Object.hasOwnProperty.call(message, "plural"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.plural);
                    if (message.singular != null && Object.hasOwnProperty.call(message, "singular"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.singular);
                    return writer;
                };
    
                /**
                 * Encodes the specified ResourceDescriptor message, length delimited. Does not implicitly {@link google.api.ResourceDescriptor.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor} message ResourceDescriptor message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceDescriptor.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResourceDescriptor message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceDescriptor.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.ResourceDescriptor();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.type = reader.string();
                            break;
                        case 2:
                            if (!(message.pattern && message.pattern.length))
                                message.pattern = [];
                            message.pattern.push(reader.string());
                            break;
                        case 3:
                            message.nameField = reader.string();
                            break;
                        case 4:
                            message.history = reader.int32();
                            break;
                        case 5:
                            message.plural = reader.string();
                            break;
                        case 6:
                            message.singular = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResourceDescriptor message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceDescriptor.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResourceDescriptor message.
                 * @function verify
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResourceDescriptor.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.pattern != null && message.hasOwnProperty("pattern")) {
                        if (!Array.isArray(message.pattern))
                            return "pattern: array expected";
                        for (var i = 0; i < message.pattern.length; ++i)
                            if (!$util.isString(message.pattern[i]))
                                return "pattern: string[] expected";
                    }
                    if (message.nameField != null && message.hasOwnProperty("nameField"))
                        if (!$util.isString(message.nameField))
                            return "nameField: string expected";
                    if (message.history != null && message.hasOwnProperty("history"))
                        switch (message.history) {
                        default:
                            return "history: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.plural != null && message.hasOwnProperty("plural"))
                        if (!$util.isString(message.plural))
                            return "plural: string expected";
                    if (message.singular != null && message.hasOwnProperty("singular"))
                        if (!$util.isString(message.singular))
                            return "singular: string expected";
                    return null;
                };
    
                /**
                 * Creates a ResourceDescriptor message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 */
                ResourceDescriptor.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.ResourceDescriptor)
                        return object;
                    var message = new $root.google.api.ResourceDescriptor();
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.pattern) {
                        if (!Array.isArray(object.pattern))
                            throw TypeError(".google.api.ResourceDescriptor.pattern: array expected");
                        message.pattern = [];
                        for (var i = 0; i < object.pattern.length; ++i)
                            message.pattern[i] = String(object.pattern[i]);
                    }
                    if (object.nameField != null)
                        message.nameField = String(object.nameField);
                    switch (object.history) {
                    case "HISTORY_UNSPECIFIED":
                    case 0:
                        message.history = 0;
                        break;
                    case "ORIGINALLY_SINGLE_PATTERN":
                    case 1:
                        message.history = 1;
                        break;
                    case "FUTURE_MULTI_PATTERN":
                    case 2:
                        message.history = 2;
                        break;
                    }
                    if (object.plural != null)
                        message.plural = String(object.plural);
                    if (object.singular != null)
                        message.singular = String(object.singular);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResourceDescriptor message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.ResourceDescriptor} message ResourceDescriptor
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResourceDescriptor.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.pattern = [];
                    if (options.defaults) {
                        object.type = "";
                        object.nameField = "";
                        object.history = options.enums === String ? "HISTORY_UNSPECIFIED" : 0;
                        object.plural = "";
                        object.singular = "";
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.pattern && message.pattern.length) {
                        object.pattern = [];
                        for (var j = 0; j < message.pattern.length; ++j)
                            object.pattern[j] = message.pattern[j];
                    }
                    if (message.nameField != null && message.hasOwnProperty("nameField"))
                        object.nameField = message.nameField;
                    if (message.history != null && message.hasOwnProperty("history"))
                        object.history = options.enums === String ? $root.google.api.ResourceDescriptor.History[message.history] : message.history;
                    if (message.plural != null && message.hasOwnProperty("plural"))
                        object.plural = message.plural;
                    if (message.singular != null && message.hasOwnProperty("singular"))
                        object.singular = message.singular;
                    return object;
                };
    
                /**
                 * Converts this ResourceDescriptor to JSON.
                 * @function toJSON
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResourceDescriptor.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * History enum.
                 * @name google.api.ResourceDescriptor.History
                 * @enum {number}
                 * @property {number} HISTORY_UNSPECIFIED=0 HISTORY_UNSPECIFIED value
                 * @property {number} ORIGINALLY_SINGLE_PATTERN=1 ORIGINALLY_SINGLE_PATTERN value
                 * @property {number} FUTURE_MULTI_PATTERN=2 FUTURE_MULTI_PATTERN value
                 */
                ResourceDescriptor.History = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "HISTORY_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "ORIGINALLY_SINGLE_PATTERN"] = 1;
                    values[valuesById[2] = "FUTURE_MULTI_PATTERN"] = 2;
                    return values;
                })();
    
                return ResourceDescriptor;
            })();
    
            api.ResourceReference = (function() {
    
                /**
                 * Properties of a ResourceReference.
                 * @memberof google.api
                 * @interface IResourceReference
                 * @property {string|null} [type] ResourceReference type
                 * @property {string|null} [childType] ResourceReference childType
                 */
    
                /**
                 * Constructs a new ResourceReference.
                 * @memberof google.api
                 * @classdesc Represents a ResourceReference.
                 * @implements IResourceReference
                 * @constructor
                 * @param {google.api.IResourceReference=} [properties] Properties to set
                 */
                function ResourceReference(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResourceReference type.
                 * @member {string} type
                 * @memberof google.api.ResourceReference
                 * @instance
                 */
                ResourceReference.prototype.type = "";
    
                /**
                 * ResourceReference childType.
                 * @member {string} childType
                 * @memberof google.api.ResourceReference
                 * @instance
                 */
                ResourceReference.prototype.childType = "";
    
                /**
                 * Creates a new ResourceReference instance using the specified properties.
                 * @function create
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference=} [properties] Properties to set
                 * @returns {google.api.ResourceReference} ResourceReference instance
                 */
                ResourceReference.create = function create(properties) {
                    return new ResourceReference(properties);
                };
    
                /**
                 * Encodes the specified ResourceReference message. Does not implicitly {@link google.api.ResourceReference.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference} message ResourceReference message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceReference.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                    if (message.childType != null && Object.hasOwnProperty.call(message, "childType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.childType);
                    return writer;
                };
    
                /**
                 * Encodes the specified ResourceReference message, length delimited. Does not implicitly {@link google.api.ResourceReference.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference} message ResourceReference message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceReference.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResourceReference message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.ResourceReference} ResourceReference
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceReference.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.ResourceReference();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.type = reader.string();
                            break;
                        case 2:
                            message.childType = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResourceReference message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.ResourceReference} ResourceReference
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceReference.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResourceReference message.
                 * @function verify
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResourceReference.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.childType != null && message.hasOwnProperty("childType"))
                        if (!$util.isString(message.childType))
                            return "childType: string expected";
                    return null;
                };
    
                /**
                 * Creates a ResourceReference message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.ResourceReference} ResourceReference
                 */
                ResourceReference.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.ResourceReference)
                        return object;
                    var message = new $root.google.api.ResourceReference();
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.childType != null)
                        message.childType = String(object.childType);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResourceReference message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.ResourceReference} message ResourceReference
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResourceReference.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type = "";
                        object.childType = "";
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.childType != null && message.hasOwnProperty("childType"))
                        object.childType = message.childType;
                    return object;
                };
    
                /**
                 * Converts this ResourceReference to JSON.
                 * @function toJSON
                 * @memberof google.api.ResourceReference
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResourceReference.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ResourceReference;
            })();
    
            api.Http = (function() {
    
                /**
                 * Properties of a Http.
                 * @memberof google.api
                 * @interface IHttp
                 * @property {Array.<google.api.IHttpRule>|null} [rules] Http rules
                 * @property {boolean|null} [fullyDecodeReservedExpansion] Http fullyDecodeReservedExpansion
                 */
    
                /**
                 * Constructs a new Http.
                 * @memberof google.api
                 * @classdesc Represents a Http.
                 * @implements IHttp
                 * @constructor
                 * @param {google.api.IHttp=} [properties] Properties to set
                 */
                function Http(properties) {
                    this.rules = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Http rules.
                 * @member {Array.<google.api.IHttpRule>} rules
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.rules = $util.emptyArray;
    
                /**
                 * Http fullyDecodeReservedExpansion.
                 * @member {boolean} fullyDecodeReservedExpansion
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.fullyDecodeReservedExpansion = false;
    
                /**
                 * Creates a new Http instance using the specified properties.
                 * @function create
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp=} [properties] Properties to set
                 * @returns {google.api.Http} Http instance
                 */
                Http.create = function create(properties) {
                    return new Http(properties);
                };
    
                /**
                 * Encodes the specified Http message. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.rules != null && message.rules.length)
                        for (var i = 0; i < message.rules.length; ++i)
                            $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.fullyDecodeReservedExpansion != null && Object.hasOwnProperty.call(message, "fullyDecodeReservedExpansion"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.fullyDecodeReservedExpansion);
                    return writer;
                };
    
                /**
                 * Encodes the specified Http message, length delimited. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Http();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.rules && message.rules.length))
                                message.rules = [];
                            message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.fullyDecodeReservedExpansion = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Http message.
                 * @function verify
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Http.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.rules != null && message.hasOwnProperty("rules")) {
                        if (!Array.isArray(message.rules))
                            return "rules: array expected";
                        for (var i = 0; i < message.rules.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.rules[i]);
                            if (error)
                                return "rules." + error;
                        }
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        if (typeof message.fullyDecodeReservedExpansion !== "boolean")
                            return "fullyDecodeReservedExpansion: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a Http message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.Http} Http
                 */
                Http.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.Http)
                        return object;
                    var message = new $root.google.api.Http();
                    if (object.rules) {
                        if (!Array.isArray(object.rules))
                            throw TypeError(".google.api.Http.rules: array expected");
                        message.rules = [];
                        for (var i = 0; i < object.rules.length; ++i) {
                            if (typeof object.rules[i] !== "object")
                                throw TypeError(".google.api.Http.rules: object expected");
                            message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                        }
                    }
                    if (object.fullyDecodeReservedExpansion != null)
                        message.fullyDecodeReservedExpansion = Boolean(object.fullyDecodeReservedExpansion);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Http message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.Http} message Http
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Http.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.rules = [];
                    if (options.defaults)
                        object.fullyDecodeReservedExpansion = false;
                    if (message.rules && message.rules.length) {
                        object.rules = [];
                        for (var j = 0; j < message.rules.length; ++j)
                            object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        object.fullyDecodeReservedExpansion = message.fullyDecodeReservedExpansion;
                    return object;
                };
    
                /**
                 * Converts this Http to JSON.
                 * @function toJSON
                 * @memberof google.api.Http
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Http.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Http;
            })();
    
            api.HttpRule = (function() {
    
                /**
                 * Properties of a HttpRule.
                 * @memberof google.api
                 * @interface IHttpRule
                 * @property {string|null} [selector] HttpRule selector
                 * @property {string|null} [get] HttpRule get
                 * @property {string|null} [put] HttpRule put
                 * @property {string|null} [post] HttpRule post
                 * @property {string|null} ["delete"] HttpRule delete
                 * @property {string|null} [patch] HttpRule patch
                 * @property {google.api.ICustomHttpPattern|null} [custom] HttpRule custom
                 * @property {string|null} [body] HttpRule body
                 * @property {string|null} [responseBody] HttpRule responseBody
                 * @property {Array.<google.api.IHttpRule>|null} [additionalBindings] HttpRule additionalBindings
                 */
    
                /**
                 * Constructs a new HttpRule.
                 * @memberof google.api
                 * @classdesc Represents a HttpRule.
                 * @implements IHttpRule
                 * @constructor
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 */
                function HttpRule(properties) {
                    this.additionalBindings = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * HttpRule selector.
                 * @member {string} selector
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.selector = "";
    
                /**
                 * HttpRule get.
                 * @member {string} get
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.get = "";
    
                /**
                 * HttpRule put.
                 * @member {string} put
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.put = "";
    
                /**
                 * HttpRule post.
                 * @member {string} post
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.post = "";
    
                /**
                 * HttpRule delete.
                 * @member {string} delete
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype["delete"] = "";
    
                /**
                 * HttpRule patch.
                 * @member {string} patch
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.patch = "";
    
                /**
                 * HttpRule custom.
                 * @member {google.api.ICustomHttpPattern|null|undefined} custom
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.custom = null;
    
                /**
                 * HttpRule body.
                 * @member {string} body
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.body = "";
    
                /**
                 * HttpRule responseBody.
                 * @member {string} responseBody
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.responseBody = "";
    
                /**
                 * HttpRule additionalBindings.
                 * @member {Array.<google.api.IHttpRule>} additionalBindings
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.additionalBindings = $util.emptyArray;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * HttpRule pattern.
                 * @member {"get"|"put"|"post"|"delete"|"patch"|"custom"|undefined} pattern
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                Object.defineProperty(HttpRule.prototype, "pattern", {
                    get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new HttpRule instance using the specified properties.
                 * @function create
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 * @returns {google.api.HttpRule} HttpRule instance
                 */
                HttpRule.create = function create(properties) {
                    return new HttpRule(properties);
                };
    
                /**
                 * Encodes the specified HttpRule message. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                    if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.get);
                    if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.put);
                    if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.post);
                    if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message["delete"]);
                    if (message.patch != null && Object.hasOwnProperty.call(message, "patch"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.patch);
                    if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.body);
                    if (message.custom != null && Object.hasOwnProperty.call(message, "custom"))
                        $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.additionalBindings != null && message.additionalBindings.length)
                        for (var i = 0; i < message.additionalBindings.length; ++i)
                            $root.google.api.HttpRule.encode(message.additionalBindings[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                    if (message.responseBody != null && Object.hasOwnProperty.call(message, "responseBody"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.responseBody);
                    return writer;
                };
    
                /**
                 * Encodes the specified HttpRule message, length delimited. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.selector = reader.string();
                            break;
                        case 2:
                            message.get = reader.string();
                            break;
                        case 3:
                            message.put = reader.string();
                            break;
                        case 4:
                            message.post = reader.string();
                            break;
                        case 5:
                            message["delete"] = reader.string();
                            break;
                        case 6:
                            message.patch = reader.string();
                            break;
                        case 8:
                            message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                            break;
                        case 7:
                            message.body = reader.string();
                            break;
                        case 12:
                            message.responseBody = reader.string();
                            break;
                        case 11:
                            if (!(message.additionalBindings && message.additionalBindings.length))
                                message.additionalBindings = [];
                            message.additionalBindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a HttpRule message.
                 * @function verify
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                HttpRule.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        if (!$util.isString(message.selector))
                            return "selector: string expected";
                    if (message.get != null && message.hasOwnProperty("get")) {
                        properties.pattern = 1;
                        if (!$util.isString(message.get))
                            return "get: string expected";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.put))
                            return "put: string expected";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.post))
                            return "post: string expected";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message["delete"]))
                            return "delete: string expected";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.patch))
                            return "patch: string expected";
                    }
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        {
                            var error = $root.google.api.CustomHttpPattern.verify(message.custom);
                            if (error)
                                return "custom." + error;
                        }
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        if (!$util.isString(message.body))
                            return "body: string expected";
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        if (!$util.isString(message.responseBody))
                            return "responseBody: string expected";
                    if (message.additionalBindings != null && message.hasOwnProperty("additionalBindings")) {
                        if (!Array.isArray(message.additionalBindings))
                            return "additionalBindings: array expected";
                        for (var i = 0; i < message.additionalBindings.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.additionalBindings[i]);
                            if (error)
                                return "additionalBindings." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.HttpRule} HttpRule
                 */
                HttpRule.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.HttpRule)
                        return object;
                    var message = new $root.google.api.HttpRule();
                    if (object.selector != null)
                        message.selector = String(object.selector);
                    if (object.get != null)
                        message.get = String(object.get);
                    if (object.put != null)
                        message.put = String(object.put);
                    if (object.post != null)
                        message.post = String(object.post);
                    if (object["delete"] != null)
                        message["delete"] = String(object["delete"]);
                    if (object.patch != null)
                        message.patch = String(object.patch);
                    if (object.custom != null) {
                        if (typeof object.custom !== "object")
                            throw TypeError(".google.api.HttpRule.custom: object expected");
                        message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
                    }
                    if (object.body != null)
                        message.body = String(object.body);
                    if (object.responseBody != null)
                        message.responseBody = String(object.responseBody);
                    if (object.additionalBindings) {
                        if (!Array.isArray(object.additionalBindings))
                            throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
                        message.additionalBindings = [];
                        for (var i = 0; i < object.additionalBindings.length; ++i) {
                            if (typeof object.additionalBindings[i] !== "object")
                                throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
                            message.additionalBindings[i] = $root.google.api.HttpRule.fromObject(object.additionalBindings[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.HttpRule} message HttpRule
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                HttpRule.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.additionalBindings = [];
                    if (options.defaults) {
                        object.selector = "";
                        object.body = "";
                        object.responseBody = "";
                    }
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        object.selector = message.selector;
                    if (message.get != null && message.hasOwnProperty("get")) {
                        object.get = message.get;
                        if (options.oneofs)
                            object.pattern = "get";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        object.put = message.put;
                        if (options.oneofs)
                            object.pattern = "put";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        object.post = message.post;
                        if (options.oneofs)
                            object.pattern = "post";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        object["delete"] = message["delete"];
                        if (options.oneofs)
                            object.pattern = "delete";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        object.patch = message.patch;
                        if (options.oneofs)
                            object.pattern = "patch";
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        object.body = message.body;
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                        if (options.oneofs)
                            object.pattern = "custom";
                    }
                    if (message.additionalBindings && message.additionalBindings.length) {
                        object.additionalBindings = [];
                        for (var j = 0; j < message.additionalBindings.length; ++j)
                            object.additionalBindings[j] = $root.google.api.HttpRule.toObject(message.additionalBindings[j], options);
                    }
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        object.responseBody = message.responseBody;
                    return object;
                };
    
                /**
                 * Converts this HttpRule to JSON.
                 * @function toJSON
                 * @memberof google.api.HttpRule
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                HttpRule.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return HttpRule;
            })();
    
            api.CustomHttpPattern = (function() {
    
                /**
                 * Properties of a CustomHttpPattern.
                 * @memberof google.api
                 * @interface ICustomHttpPattern
                 * @property {string|null} [kind] CustomHttpPattern kind
                 * @property {string|null} [path] CustomHttpPattern path
                 */
    
                /**
                 * Constructs a new CustomHttpPattern.
                 * @memberof google.api
                 * @classdesc Represents a CustomHttpPattern.
                 * @implements ICustomHttpPattern
                 * @constructor
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 */
                function CustomHttpPattern(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CustomHttpPattern kind.
                 * @member {string} kind
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.kind = "";
    
                /**
                 * CustomHttpPattern path.
                 * @member {string} path
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.path = "";
    
                /**
                 * Creates a new CustomHttpPattern instance using the specified properties.
                 * @function create
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern instance
                 */
                CustomHttpPattern.create = function create(properties) {
                    return new CustomHttpPattern(properties);
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.kind);
                    if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                    return writer;
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message, length delimited. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.kind = reader.string();
                            break;
                        case 2:
                            message.path = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CustomHttpPattern message.
                 * @function verify
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CustomHttpPattern.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        if (!$util.isString(message.kind))
                            return "kind: string expected";
                    if (message.path != null && message.hasOwnProperty("path"))
                        if (!$util.isString(message.path))
                            return "path: string expected";
                    return null;
                };
    
                /**
                 * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 */
                CustomHttpPattern.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CustomHttpPattern)
                        return object;
                    var message = new $root.google.api.CustomHttpPattern();
                    if (object.kind != null)
                        message.kind = String(object.kind);
                    if (object.path != null)
                        message.path = String(object.path);
                    return message;
                };
    
                /**
                 * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.CustomHttpPattern} message CustomHttpPattern
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CustomHttpPattern.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.kind = "";
                        object.path = "";
                    }
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        object.kind = message.kind;
                    if (message.path != null && message.hasOwnProperty("path"))
                        object.path = message.path;
                    return object;
                };
    
                /**
                 * Converts this CustomHttpPattern to JSON.
                 * @function toJSON
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CustomHttpPattern.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return CustomHttpPattern;
            })();
    
            return api;
        })();
    
        google.longrunning = (function() {
    
            /**
             * Namespace longrunning.
             * @memberof google
             * @namespace
             */
            var longrunning = {};
    
            longrunning.Operations = (function() {
    
                /**
                 * Constructs a new Operations service.
                 * @memberof google.longrunning
                 * @classdesc Represents an Operations
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Operations(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
    
                (Operations.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Operations;
    
                /**
                 * Creates new Operations service using the specified rpc implementation.
                 * @function create
                 * @memberof google.longrunning.Operations
                 * @static
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {Operations} RPC service. Useful where requests and/or responses are streamed.
                 */
                Operations.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                    return new this(rpcImpl, requestDelimited, responseDelimited);
                };
    
                /**
                 * Callback as used by {@link google.longrunning.Operations#listOperations}.
                 * @memberof google.longrunning.Operations
                 * @typedef ListOperationsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.longrunning.ListOperationsResponse} [response] ListOperationsResponse
                 */
    
                /**
                 * Calls ListOperations.
                 * @function listOperations
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IListOperationsRequest} request ListOperationsRequest message or plain object
                 * @param {google.longrunning.Operations.ListOperationsCallback} callback Node-style callback called with the error, if any, and ListOperationsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.listOperations = function listOperations(request, callback) {
                    return this.rpcCall(listOperations, $root.google.longrunning.ListOperationsRequest, $root.google.longrunning.ListOperationsResponse, request, callback);
                }, "name", { value: "ListOperations" });
    
                /**
                 * Calls ListOperations.
                 * @function listOperations
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IListOperationsRequest} request ListOperationsRequest message or plain object
                 * @returns {Promise<google.longrunning.ListOperationsResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link google.longrunning.Operations#getOperation}.
                 * @memberof google.longrunning.Operations
                 * @typedef GetOperationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.longrunning.Operation} [response] Operation
                 */
    
                /**
                 * Calls GetOperation.
                 * @function getOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IGetOperationRequest} request GetOperationRequest message or plain object
                 * @param {google.longrunning.Operations.GetOperationCallback} callback Node-style callback called with the error, if any, and Operation
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.getOperation = function getOperation(request, callback) {
                    return this.rpcCall(getOperation, $root.google.longrunning.GetOperationRequest, $root.google.longrunning.Operation, request, callback);
                }, "name", { value: "GetOperation" });
    
                /**
                 * Calls GetOperation.
                 * @function getOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IGetOperationRequest} request GetOperationRequest message or plain object
                 * @returns {Promise<google.longrunning.Operation>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link google.longrunning.Operations#deleteOperation}.
                 * @memberof google.longrunning.Operations
                 * @typedef DeleteOperationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.protobuf.Empty} [response] Empty
                 */
    
                /**
                 * Calls DeleteOperation.
                 * @function deleteOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IDeleteOperationRequest} request DeleteOperationRequest message or plain object
                 * @param {google.longrunning.Operations.DeleteOperationCallback} callback Node-style callback called with the error, if any, and Empty
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.deleteOperation = function deleteOperation(request, callback) {
                    return this.rpcCall(deleteOperation, $root.google.longrunning.DeleteOperationRequest, $root.google.protobuf.Empty, request, callback);
                }, "name", { value: "DeleteOperation" });
    
                /**
                 * Calls DeleteOperation.
                 * @function deleteOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IDeleteOperationRequest} request DeleteOperationRequest message or plain object
                 * @returns {Promise<google.protobuf.Empty>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link google.longrunning.Operations#cancelOperation}.
                 * @memberof google.longrunning.Operations
                 * @typedef CancelOperationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.protobuf.Empty} [response] Empty
                 */
    
                /**
                 * Calls CancelOperation.
                 * @function cancelOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.ICancelOperationRequest} request CancelOperationRequest message or plain object
                 * @param {google.longrunning.Operations.CancelOperationCallback} callback Node-style callback called with the error, if any, and Empty
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.cancelOperation = function cancelOperation(request, callback) {
                    return this.rpcCall(cancelOperation, $root.google.longrunning.CancelOperationRequest, $root.google.protobuf.Empty, request, callback);
                }, "name", { value: "CancelOperation" });
    
                /**
                 * Calls CancelOperation.
                 * @function cancelOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.ICancelOperationRequest} request CancelOperationRequest message or plain object
                 * @returns {Promise<google.protobuf.Empty>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link google.longrunning.Operations#waitOperation}.
                 * @memberof google.longrunning.Operations
                 * @typedef WaitOperationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.longrunning.Operation} [response] Operation
                 */
    
                /**
                 * Calls WaitOperation.
                 * @function waitOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IWaitOperationRequest} request WaitOperationRequest message or plain object
                 * @param {google.longrunning.Operations.WaitOperationCallback} callback Node-style callback called with the error, if any, and Operation
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.waitOperation = function waitOperation(request, callback) {
                    return this.rpcCall(waitOperation, $root.google.longrunning.WaitOperationRequest, $root.google.longrunning.Operation, request, callback);
                }, "name", { value: "WaitOperation" });
    
                /**
                 * Calls WaitOperation.
                 * @function waitOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IWaitOperationRequest} request WaitOperationRequest message or plain object
                 * @returns {Promise<google.longrunning.Operation>} Promise
                 * @variation 2
                 */
    
                return Operations;
            })();
    
            longrunning.Operation = (function() {
    
                /**
                 * Properties of an Operation.
                 * @memberof google.longrunning
                 * @interface IOperation
                 * @property {string|null} [name] Operation name
                 * @property {google.protobuf.IAny|null} [metadata] Operation metadata
                 * @property {boolean|null} [done] Operation done
                 * @property {google.rpc.IStatus|null} [error] Operation error
                 * @property {google.protobuf.IAny|null} [response] Operation response
                 */
    
                /**
                 * Constructs a new Operation.
                 * @memberof google.longrunning
                 * @classdesc Represents an Operation.
                 * @implements IOperation
                 * @constructor
                 * @param {google.longrunning.IOperation=} [properties] Properties to set
                 */
                function Operation(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Operation name.
                 * @member {string} name
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.name = "";
    
                /**
                 * Operation metadata.
                 * @member {google.protobuf.IAny|null|undefined} metadata
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.metadata = null;
    
                /**
                 * Operation done.
                 * @member {boolean} done
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.done = false;
    
                /**
                 * Operation error.
                 * @member {google.rpc.IStatus|null|undefined} error
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.error = null;
    
                /**
                 * Operation response.
                 * @member {google.protobuf.IAny|null|undefined} response
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.response = null;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * Operation result.
                 * @member {"error"|"response"|undefined} result
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Object.defineProperty(Operation.prototype, "result", {
                    get: $util.oneOfGetter($oneOfFields = ["error", "response"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new Operation instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {google.longrunning.IOperation=} [properties] Properties to set
                 * @returns {google.longrunning.Operation} Operation instance
                 */
                Operation.create = function create(properties) {
                    return new Operation(properties);
                };
    
                /**
                 * Encodes the specified Operation message. Does not implicitly {@link google.longrunning.Operation.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {google.longrunning.IOperation} message Operation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Operation.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                        $root.google.protobuf.Any.encode(message.metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.done != null && Object.hasOwnProperty.call(message, "done"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.done);
                    if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                        $root.google.rpc.Status.encode(message.error, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.response != null && Object.hasOwnProperty.call(message, "response"))
                        $root.google.protobuf.Any.encode(message.response, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Operation message, length delimited. Does not implicitly {@link google.longrunning.Operation.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {google.longrunning.IOperation} message Operation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Operation.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Operation message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.Operation} Operation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Operation.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.Operation();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.metadata = $root.google.protobuf.Any.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.done = reader.bool();
                            break;
                        case 4:
                            message.error = $root.google.rpc.Status.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.response = $root.google.protobuf.Any.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Operation message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.Operation} Operation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Operation.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Operation message.
                 * @function verify
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Operation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.google.protobuf.Any.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.done != null && message.hasOwnProperty("done"))
                        if (typeof message.done !== "boolean")
                            return "done: boolean expected";
                    if (message.error != null && message.hasOwnProperty("error")) {
                        properties.result = 1;
                        {
                            var error = $root.google.rpc.Status.verify(message.error);
                            if (error)
                                return "error." + error;
                        }
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        if (properties.result === 1)
                            return "result: multiple values";
                        properties.result = 1;
                        {
                            var error = $root.google.protobuf.Any.verify(message.response);
                            if (error)
                                return "response." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an Operation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.Operation} Operation
                 */
                Operation.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.Operation)
                        return object;
                    var message = new $root.google.longrunning.Operation();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".google.longrunning.Operation.metadata: object expected");
                        message.metadata = $root.google.protobuf.Any.fromObject(object.metadata);
                    }
                    if (object.done != null)
                        message.done = Boolean(object.done);
                    if (object.error != null) {
                        if (typeof object.error !== "object")
                            throw TypeError(".google.longrunning.Operation.error: object expected");
                        message.error = $root.google.rpc.Status.fromObject(object.error);
                    }
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".google.longrunning.Operation.response: object expected");
                        message.response = $root.google.protobuf.Any.fromObject(object.response);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an Operation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {google.longrunning.Operation} message Operation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Operation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.metadata = null;
                        object.done = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.google.protobuf.Any.toObject(message.metadata, options);
                    if (message.done != null && message.hasOwnProperty("done"))
                        object.done = message.done;
                    if (message.error != null && message.hasOwnProperty("error")) {
                        object.error = $root.google.rpc.Status.toObject(message.error, options);
                        if (options.oneofs)
                            object.result = "error";
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        object.response = $root.google.protobuf.Any.toObject(message.response, options);
                        if (options.oneofs)
                            object.result = "response";
                    }
                    return object;
                };
    
                /**
                 * Converts this Operation to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.Operation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Operation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Operation;
            })();
    
            longrunning.GetOperationRequest = (function() {
    
                /**
                 * Properties of a GetOperationRequest.
                 * @memberof google.longrunning
                 * @interface IGetOperationRequest
                 * @property {string|null} [name] GetOperationRequest name
                 */
    
                /**
                 * Constructs a new GetOperationRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a GetOperationRequest.
                 * @implements IGetOperationRequest
                 * @constructor
                 * @param {google.longrunning.IGetOperationRequest=} [properties] Properties to set
                 */
                function GetOperationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GetOperationRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.GetOperationRequest
                 * @instance
                 */
                GetOperationRequest.prototype.name = "";
    
                /**
                 * Creates a new GetOperationRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {google.longrunning.IGetOperationRequest=} [properties] Properties to set
                 * @returns {google.longrunning.GetOperationRequest} GetOperationRequest instance
                 */
                GetOperationRequest.create = function create(properties) {
                    return new GetOperationRequest(properties);
                };
    
                /**
                 * Encodes the specified GetOperationRequest message. Does not implicitly {@link google.longrunning.GetOperationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {google.longrunning.IGetOperationRequest} message GetOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetOperationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified GetOperationRequest message, length delimited. Does not implicitly {@link google.longrunning.GetOperationRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {google.longrunning.IGetOperationRequest} message GetOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GetOperationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.GetOperationRequest} GetOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetOperationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.GetOperationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GetOperationRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.GetOperationRequest} GetOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetOperationRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GetOperationRequest message.
                 * @function verify
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetOperationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a GetOperationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.GetOperationRequest} GetOperationRequest
                 */
                GetOperationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.GetOperationRequest)
                        return object;
                    var message = new $root.google.longrunning.GetOperationRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a GetOperationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {google.longrunning.GetOperationRequest} message GetOperationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetOperationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this GetOperationRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.GetOperationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetOperationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return GetOperationRequest;
            })();
    
            longrunning.ListOperationsRequest = (function() {
    
                /**
                 * Properties of a ListOperationsRequest.
                 * @memberof google.longrunning
                 * @interface IListOperationsRequest
                 * @property {string|null} [name] ListOperationsRequest name
                 * @property {string|null} [filter] ListOperationsRequest filter
                 * @property {number|null} [pageSize] ListOperationsRequest pageSize
                 * @property {string|null} [pageToken] ListOperationsRequest pageToken
                 */
    
                /**
                 * Constructs a new ListOperationsRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a ListOperationsRequest.
                 * @implements IListOperationsRequest
                 * @constructor
                 * @param {google.longrunning.IListOperationsRequest=} [properties] Properties to set
                 */
                function ListOperationsRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListOperationsRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 */
                ListOperationsRequest.prototype.name = "";
    
                /**
                 * ListOperationsRequest filter.
                 * @member {string} filter
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 */
                ListOperationsRequest.prototype.filter = "";
    
                /**
                 * ListOperationsRequest pageSize.
                 * @member {number} pageSize
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 */
                ListOperationsRequest.prototype.pageSize = 0;
    
                /**
                 * ListOperationsRequest pageToken.
                 * @member {string} pageToken
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 */
                ListOperationsRequest.prototype.pageToken = "";
    
                /**
                 * Creates a new ListOperationsRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {google.longrunning.IListOperationsRequest=} [properties] Properties to set
                 * @returns {google.longrunning.ListOperationsRequest} ListOperationsRequest instance
                 */
                ListOperationsRequest.create = function create(properties) {
                    return new ListOperationsRequest(properties);
                };
    
                /**
                 * Encodes the specified ListOperationsRequest message. Does not implicitly {@link google.longrunning.ListOperationsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {google.longrunning.IListOperationsRequest} message ListOperationsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOperationsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.filter);
                    if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                    if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified ListOperationsRequest message, length delimited. Does not implicitly {@link google.longrunning.ListOperationsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {google.longrunning.IListOperationsRequest} message ListOperationsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOperationsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListOperationsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.ListOperationsRequest} ListOperationsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOperationsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.ListOperationsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 4:
                            message.name = reader.string();
                            break;
                        case 1:
                            message.filter = reader.string();
                            break;
                        case 2:
                            message.pageSize = reader.int32();
                            break;
                        case 3:
                            message.pageToken = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListOperationsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.ListOperationsRequest} ListOperationsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOperationsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListOperationsRequest message.
                 * @function verify
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListOperationsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.filter != null && message.hasOwnProperty("filter"))
                        if (!$util.isString(message.filter))
                            return "filter: string expected";
                    if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                        if (!$util.isInteger(message.pageSize))
                            return "pageSize: integer expected";
                    if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                        if (!$util.isString(message.pageToken))
                            return "pageToken: string expected";
                    return null;
                };
    
                /**
                 * Creates a ListOperationsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.ListOperationsRequest} ListOperationsRequest
                 */
                ListOperationsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.ListOperationsRequest)
                        return object;
                    var message = new $root.google.longrunning.ListOperationsRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.filter != null)
                        message.filter = String(object.filter);
                    if (object.pageSize != null)
                        message.pageSize = object.pageSize | 0;
                    if (object.pageToken != null)
                        message.pageToken = String(object.pageToken);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListOperationsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {google.longrunning.ListOperationsRequest} message ListOperationsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListOperationsRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.filter = "";
                        object.pageSize = 0;
                        object.pageToken = "";
                        object.name = "";
                    }
                    if (message.filter != null && message.hasOwnProperty("filter"))
                        object.filter = message.filter;
                    if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                        object.pageSize = message.pageSize;
                    if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                        object.pageToken = message.pageToken;
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this ListOperationsRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListOperationsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ListOperationsRequest;
            })();
    
            longrunning.ListOperationsResponse = (function() {
    
                /**
                 * Properties of a ListOperationsResponse.
                 * @memberof google.longrunning
                 * @interface IListOperationsResponse
                 * @property {Array.<google.longrunning.IOperation>|null} [operations] ListOperationsResponse operations
                 * @property {string|null} [nextPageToken] ListOperationsResponse nextPageToken
                 */
    
                /**
                 * Constructs a new ListOperationsResponse.
                 * @memberof google.longrunning
                 * @classdesc Represents a ListOperationsResponse.
                 * @implements IListOperationsResponse
                 * @constructor
                 * @param {google.longrunning.IListOperationsResponse=} [properties] Properties to set
                 */
                function ListOperationsResponse(properties) {
                    this.operations = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListOperationsResponse operations.
                 * @member {Array.<google.longrunning.IOperation>} operations
                 * @memberof google.longrunning.ListOperationsResponse
                 * @instance
                 */
                ListOperationsResponse.prototype.operations = $util.emptyArray;
    
                /**
                 * ListOperationsResponse nextPageToken.
                 * @member {string} nextPageToken
                 * @memberof google.longrunning.ListOperationsResponse
                 * @instance
                 */
                ListOperationsResponse.prototype.nextPageToken = "";
    
                /**
                 * Creates a new ListOperationsResponse instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {google.longrunning.IListOperationsResponse=} [properties] Properties to set
                 * @returns {google.longrunning.ListOperationsResponse} ListOperationsResponse instance
                 */
                ListOperationsResponse.create = function create(properties) {
                    return new ListOperationsResponse(properties);
                };
    
                /**
                 * Encodes the specified ListOperationsResponse message. Does not implicitly {@link google.longrunning.ListOperationsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {google.longrunning.IListOperationsResponse} message ListOperationsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOperationsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.operations != null && message.operations.length)
                        for (var i = 0; i < message.operations.length; ++i)
                            $root.google.longrunning.Operation.encode(message.operations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                    return writer;
                };
    
                /**
                 * Encodes the specified ListOperationsResponse message, length delimited. Does not implicitly {@link google.longrunning.ListOperationsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {google.longrunning.IListOperationsResponse} message ListOperationsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOperationsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListOperationsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.ListOperationsResponse} ListOperationsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOperationsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.ListOperationsResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.operations && message.operations.length))
                                message.operations = [];
                            message.operations.push($root.google.longrunning.Operation.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.nextPageToken = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListOperationsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.ListOperationsResponse} ListOperationsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOperationsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListOperationsResponse message.
                 * @function verify
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListOperationsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.operations != null && message.hasOwnProperty("operations")) {
                        if (!Array.isArray(message.operations))
                            return "operations: array expected";
                        for (var i = 0; i < message.operations.length; ++i) {
                            var error = $root.google.longrunning.Operation.verify(message.operations[i]);
                            if (error)
                                return "operations." + error;
                        }
                    }
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        if (!$util.isString(message.nextPageToken))
                            return "nextPageToken: string expected";
                    return null;
                };
    
                /**
                 * Creates a ListOperationsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.ListOperationsResponse} ListOperationsResponse
                 */
                ListOperationsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.ListOperationsResponse)
                        return object;
                    var message = new $root.google.longrunning.ListOperationsResponse();
                    if (object.operations) {
                        if (!Array.isArray(object.operations))
                            throw TypeError(".google.longrunning.ListOperationsResponse.operations: array expected");
                        message.operations = [];
                        for (var i = 0; i < object.operations.length; ++i) {
                            if (typeof object.operations[i] !== "object")
                                throw TypeError(".google.longrunning.ListOperationsResponse.operations: object expected");
                            message.operations[i] = $root.google.longrunning.Operation.fromObject(object.operations[i]);
                        }
                    }
                    if (object.nextPageToken != null)
                        message.nextPageToken = String(object.nextPageToken);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListOperationsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {google.longrunning.ListOperationsResponse} message ListOperationsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListOperationsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.operations = [];
                    if (options.defaults)
                        object.nextPageToken = "";
                    if (message.operations && message.operations.length) {
                        object.operations = [];
                        for (var j = 0; j < message.operations.length; ++j)
                            object.operations[j] = $root.google.longrunning.Operation.toObject(message.operations[j], options);
                    }
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        object.nextPageToken = message.nextPageToken;
                    return object;
                };
    
                /**
                 * Converts this ListOperationsResponse to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.ListOperationsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListOperationsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ListOperationsResponse;
            })();
    
            longrunning.CancelOperationRequest = (function() {
    
                /**
                 * Properties of a CancelOperationRequest.
                 * @memberof google.longrunning
                 * @interface ICancelOperationRequest
                 * @property {string|null} [name] CancelOperationRequest name
                 */
    
                /**
                 * Constructs a new CancelOperationRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a CancelOperationRequest.
                 * @implements ICancelOperationRequest
                 * @constructor
                 * @param {google.longrunning.ICancelOperationRequest=} [properties] Properties to set
                 */
                function CancelOperationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CancelOperationRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.CancelOperationRequest
                 * @instance
                 */
                CancelOperationRequest.prototype.name = "";
    
                /**
                 * Creates a new CancelOperationRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {google.longrunning.ICancelOperationRequest=} [properties] Properties to set
                 * @returns {google.longrunning.CancelOperationRequest} CancelOperationRequest instance
                 */
                CancelOperationRequest.create = function create(properties) {
                    return new CancelOperationRequest(properties);
                };
    
                /**
                 * Encodes the specified CancelOperationRequest message. Does not implicitly {@link google.longrunning.CancelOperationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {google.longrunning.ICancelOperationRequest} message CancelOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CancelOperationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified CancelOperationRequest message, length delimited. Does not implicitly {@link google.longrunning.CancelOperationRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {google.longrunning.ICancelOperationRequest} message CancelOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CancelOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CancelOperationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.CancelOperationRequest} CancelOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CancelOperationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.CancelOperationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CancelOperationRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.CancelOperationRequest} CancelOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CancelOperationRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CancelOperationRequest message.
                 * @function verify
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CancelOperationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a CancelOperationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.CancelOperationRequest} CancelOperationRequest
                 */
                CancelOperationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.CancelOperationRequest)
                        return object;
                    var message = new $root.google.longrunning.CancelOperationRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a CancelOperationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {google.longrunning.CancelOperationRequest} message CancelOperationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CancelOperationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this CancelOperationRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.CancelOperationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CancelOperationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return CancelOperationRequest;
            })();
    
            longrunning.DeleteOperationRequest = (function() {
    
                /**
                 * Properties of a DeleteOperationRequest.
                 * @memberof google.longrunning
                 * @interface IDeleteOperationRequest
                 * @property {string|null} [name] DeleteOperationRequest name
                 */
    
                /**
                 * Constructs a new DeleteOperationRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a DeleteOperationRequest.
                 * @implements IDeleteOperationRequest
                 * @constructor
                 * @param {google.longrunning.IDeleteOperationRequest=} [properties] Properties to set
                 */
                function DeleteOperationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DeleteOperationRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @instance
                 */
                DeleteOperationRequest.prototype.name = "";
    
                /**
                 * Creates a new DeleteOperationRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {google.longrunning.IDeleteOperationRequest=} [properties] Properties to set
                 * @returns {google.longrunning.DeleteOperationRequest} DeleteOperationRequest instance
                 */
                DeleteOperationRequest.create = function create(properties) {
                    return new DeleteOperationRequest(properties);
                };
    
                /**
                 * Encodes the specified DeleteOperationRequest message. Does not implicitly {@link google.longrunning.DeleteOperationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {google.longrunning.IDeleteOperationRequest} message DeleteOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteOperationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified DeleteOperationRequest message, length delimited. Does not implicitly {@link google.longrunning.DeleteOperationRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {google.longrunning.IDeleteOperationRequest} message DeleteOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DeleteOperationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.DeleteOperationRequest} DeleteOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteOperationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.DeleteOperationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DeleteOperationRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.DeleteOperationRequest} DeleteOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteOperationRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DeleteOperationRequest message.
                 * @function verify
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeleteOperationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a DeleteOperationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.DeleteOperationRequest} DeleteOperationRequest
                 */
                DeleteOperationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.DeleteOperationRequest)
                        return object;
                    var message = new $root.google.longrunning.DeleteOperationRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a DeleteOperationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {google.longrunning.DeleteOperationRequest} message DeleteOperationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeleteOperationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this DeleteOperationRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeleteOperationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return DeleteOperationRequest;
            })();
    
            longrunning.WaitOperationRequest = (function() {
    
                /**
                 * Properties of a WaitOperationRequest.
                 * @memberof google.longrunning
                 * @interface IWaitOperationRequest
                 * @property {string|null} [name] WaitOperationRequest name
                 * @property {google.protobuf.IDuration|null} [timeout] WaitOperationRequest timeout
                 */
    
                /**
                 * Constructs a new WaitOperationRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a WaitOperationRequest.
                 * @implements IWaitOperationRequest
                 * @constructor
                 * @param {google.longrunning.IWaitOperationRequest=} [properties] Properties to set
                 */
                function WaitOperationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * WaitOperationRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.WaitOperationRequest
                 * @instance
                 */
                WaitOperationRequest.prototype.name = "";
    
                /**
                 * WaitOperationRequest timeout.
                 * @member {google.protobuf.IDuration|null|undefined} timeout
                 * @memberof google.longrunning.WaitOperationRequest
                 * @instance
                 */
                WaitOperationRequest.prototype.timeout = null;
    
                /**
                 * Creates a new WaitOperationRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {google.longrunning.IWaitOperationRequest=} [properties] Properties to set
                 * @returns {google.longrunning.WaitOperationRequest} WaitOperationRequest instance
                 */
                WaitOperationRequest.create = function create(properties) {
                    return new WaitOperationRequest(properties);
                };
    
                /**
                 * Encodes the specified WaitOperationRequest message. Does not implicitly {@link google.longrunning.WaitOperationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {google.longrunning.IWaitOperationRequest} message WaitOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                WaitOperationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.timeout != null && Object.hasOwnProperty.call(message, "timeout"))
                        $root.google.protobuf.Duration.encode(message.timeout, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified WaitOperationRequest message, length delimited. Does not implicitly {@link google.longrunning.WaitOperationRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {google.longrunning.IWaitOperationRequest} message WaitOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                WaitOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a WaitOperationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.WaitOperationRequest} WaitOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                WaitOperationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.WaitOperationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.timeout = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a WaitOperationRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.WaitOperationRequest} WaitOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                WaitOperationRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a WaitOperationRequest message.
                 * @function verify
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                WaitOperationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.timeout != null && message.hasOwnProperty("timeout")) {
                        var error = $root.google.protobuf.Duration.verify(message.timeout);
                        if (error)
                            return "timeout." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a WaitOperationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.WaitOperationRequest} WaitOperationRequest
                 */
                WaitOperationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.WaitOperationRequest)
                        return object;
                    var message = new $root.google.longrunning.WaitOperationRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.timeout != null) {
                        if (typeof object.timeout !== "object")
                            throw TypeError(".google.longrunning.WaitOperationRequest.timeout: object expected");
                        message.timeout = $root.google.protobuf.Duration.fromObject(object.timeout);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a WaitOperationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {google.longrunning.WaitOperationRequest} message WaitOperationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                WaitOperationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.timeout = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.timeout != null && message.hasOwnProperty("timeout"))
                        object.timeout = $root.google.protobuf.Duration.toObject(message.timeout, options);
                    return object;
                };
    
                /**
                 * Converts this WaitOperationRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.WaitOperationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                WaitOperationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return WaitOperationRequest;
            })();
    
            longrunning.OperationInfo = (function() {
    
                /**
                 * Properties of an OperationInfo.
                 * @memberof google.longrunning
                 * @interface IOperationInfo
                 * @property {string|null} [responseType] OperationInfo responseType
                 * @property {string|null} [metadataType] OperationInfo metadataType
                 */
    
                /**
                 * Constructs a new OperationInfo.
                 * @memberof google.longrunning
                 * @classdesc Represents an OperationInfo.
                 * @implements IOperationInfo
                 * @constructor
                 * @param {google.longrunning.IOperationInfo=} [properties] Properties to set
                 */
                function OperationInfo(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OperationInfo responseType.
                 * @member {string} responseType
                 * @memberof google.longrunning.OperationInfo
                 * @instance
                 */
                OperationInfo.prototype.responseType = "";
    
                /**
                 * OperationInfo metadataType.
                 * @member {string} metadataType
                 * @memberof google.longrunning.OperationInfo
                 * @instance
                 */
                OperationInfo.prototype.metadataType = "";
    
                /**
                 * Creates a new OperationInfo instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {google.longrunning.IOperationInfo=} [properties] Properties to set
                 * @returns {google.longrunning.OperationInfo} OperationInfo instance
                 */
                OperationInfo.create = function create(properties) {
                    return new OperationInfo(properties);
                };
    
                /**
                 * Encodes the specified OperationInfo message. Does not implicitly {@link google.longrunning.OperationInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {google.longrunning.IOperationInfo} message OperationInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OperationInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.responseType != null && Object.hasOwnProperty.call(message, "responseType"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.responseType);
                    if (message.metadataType != null && Object.hasOwnProperty.call(message, "metadataType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.metadataType);
                    return writer;
                };
    
                /**
                 * Encodes the specified OperationInfo message, length delimited. Does not implicitly {@link google.longrunning.OperationInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {google.longrunning.IOperationInfo} message OperationInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OperationInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OperationInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.OperationInfo} OperationInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OperationInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.OperationInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.responseType = reader.string();
                            break;
                        case 2:
                            message.metadataType = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OperationInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.OperationInfo} OperationInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OperationInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OperationInfo message.
                 * @function verify
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OperationInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.responseType != null && message.hasOwnProperty("responseType"))
                        if (!$util.isString(message.responseType))
                            return "responseType: string expected";
                    if (message.metadataType != null && message.hasOwnProperty("metadataType"))
                        if (!$util.isString(message.metadataType))
                            return "metadataType: string expected";
                    return null;
                };
    
                /**
                 * Creates an OperationInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.OperationInfo} OperationInfo
                 */
                OperationInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.OperationInfo)
                        return object;
                    var message = new $root.google.longrunning.OperationInfo();
                    if (object.responseType != null)
                        message.responseType = String(object.responseType);
                    if (object.metadataType != null)
                        message.metadataType = String(object.metadataType);
                    return message;
                };
    
                /**
                 * Creates a plain object from an OperationInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {google.longrunning.OperationInfo} message OperationInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OperationInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.responseType = "";
                        object.metadataType = "";
                    }
                    if (message.responseType != null && message.hasOwnProperty("responseType"))
                        object.responseType = message.responseType;
                    if (message.metadataType != null && message.hasOwnProperty("metadataType"))
                        object.metadataType = message.metadataType;
                    return object;
                };
    
                /**
                 * Converts this OperationInfo to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.OperationInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OperationInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OperationInfo;
            })();
    
            return longrunning;
        })();
    
        google.iam = (function() {
    
            /**
             * Namespace iam.
             * @memberof google
             * @namespace
             */
            var iam = {};
    
            iam.v1 = (function() {
    
                /**
                 * Namespace v1.
                 * @memberof google.iam
                 * @namespace
                 */
                var v1 = {};
    
                v1.IAMPolicy = (function() {
    
                    /**
                     * Constructs a new IAMPolicy service.
                     * @memberof google.iam.v1
                     * @classdesc Represents a IAMPolicy
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function IAMPolicy(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }
    
                    (IAMPolicy.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = IAMPolicy;
    
                    /**
                     * Creates new IAMPolicy service using the specified rpc implementation.
                     * @function create
                     * @memberof google.iam.v1.IAMPolicy
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {IAMPolicy} RPC service. Useful where requests and/or responses are streamed.
                     */
                    IAMPolicy.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };
    
                    /**
                     * Callback as used by {@link google.iam.v1.IAMPolicy#setIamPolicy}.
                     * @memberof google.iam.v1.IAMPolicy
                     * @typedef SetIamPolicyCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.iam.v1.Policy} [response] Policy
                     */
    
                    /**
                     * Calls SetIamPolicy.
                     * @function setIamPolicy
                     * @memberof google.iam.v1.IAMPolicy
                     * @instance
                     * @param {google.iam.v1.ISetIamPolicyRequest} request SetIamPolicyRequest message or plain object
                     * @param {google.iam.v1.IAMPolicy.SetIamPolicyCallback} callback Node-style callback called with the error, if any, and Policy
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(IAMPolicy.prototype.setIamPolicy = function setIamPolicy(request, callback) {
                        return this.rpcCall(setIamPolicy, $root.google.iam.v1.SetIamPolicyRequest, $root.google.iam.v1.Policy, request, callback);
                    }, "name", { value: "SetIamPolicy" });
    
                    /**
                     * Calls SetIamPolicy.
                     * @function setIamPolicy
                     * @memberof google.iam.v1.IAMPolicy
                     * @instance
                     * @param {google.iam.v1.ISetIamPolicyRequest} request SetIamPolicyRequest message or plain object
                     * @returns {Promise<google.iam.v1.Policy>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.iam.v1.IAMPolicy#getIamPolicy}.
                     * @memberof google.iam.v1.IAMPolicy
                     * @typedef GetIamPolicyCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.iam.v1.Policy} [response] Policy
                     */
    
                    /**
                     * Calls GetIamPolicy.
                     * @function getIamPolicy
                     * @memberof google.iam.v1.IAMPolicy
                     * @instance
                     * @param {google.iam.v1.IGetIamPolicyRequest} request GetIamPolicyRequest message or plain object
                     * @param {google.iam.v1.IAMPolicy.GetIamPolicyCallback} callback Node-style callback called with the error, if any, and Policy
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(IAMPolicy.prototype.getIamPolicy = function getIamPolicy(request, callback) {
                        return this.rpcCall(getIamPolicy, $root.google.iam.v1.GetIamPolicyRequest, $root.google.iam.v1.Policy, request, callback);
                    }, "name", { value: "GetIamPolicy" });
    
                    /**
                     * Calls GetIamPolicy.
                     * @function getIamPolicy
                     * @memberof google.iam.v1.IAMPolicy
                     * @instance
                     * @param {google.iam.v1.IGetIamPolicyRequest} request GetIamPolicyRequest message or plain object
                     * @returns {Promise<google.iam.v1.Policy>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.iam.v1.IAMPolicy#testIamPermissions}.
                     * @memberof google.iam.v1.IAMPolicy
                     * @typedef TestIamPermissionsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.iam.v1.TestIamPermissionsResponse} [response] TestIamPermissionsResponse
                     */
    
                    /**
                     * Calls TestIamPermissions.
                     * @function testIamPermissions
                     * @memberof google.iam.v1.IAMPolicy
                     * @instance
                     * @param {google.iam.v1.ITestIamPermissionsRequest} request TestIamPermissionsRequest message or plain object
                     * @param {google.iam.v1.IAMPolicy.TestIamPermissionsCallback} callback Node-style callback called with the error, if any, and TestIamPermissionsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(IAMPolicy.prototype.testIamPermissions = function testIamPermissions(request, callback) {
                        return this.rpcCall(testIamPermissions, $root.google.iam.v1.TestIamPermissionsRequest, $root.google.iam.v1.TestIamPermissionsResponse, request, callback);
                    }, "name", { value: "TestIamPermissions" });
    
                    /**
                     * Calls TestIamPermissions.
                     * @function testIamPermissions
                     * @memberof google.iam.v1.IAMPolicy
                     * @instance
                     * @param {google.iam.v1.ITestIamPermissionsRequest} request TestIamPermissionsRequest message or plain object
                     * @returns {Promise<google.iam.v1.TestIamPermissionsResponse>} Promise
                     * @variation 2
                     */
    
                    return IAMPolicy;
                })();
    
                v1.SetIamPolicyRequest = (function() {
    
                    /**
                     * Properties of a SetIamPolicyRequest.
                     * @memberof google.iam.v1
                     * @interface ISetIamPolicyRequest
                     * @property {string|null} [resource] SetIamPolicyRequest resource
                     * @property {google.iam.v1.IPolicy|null} [policy] SetIamPolicyRequest policy
                     */
    
                    /**
                     * Constructs a new SetIamPolicyRequest.
                     * @memberof google.iam.v1
                     * @classdesc Represents a SetIamPolicyRequest.
                     * @implements ISetIamPolicyRequest
                     * @constructor
                     * @param {google.iam.v1.ISetIamPolicyRequest=} [properties] Properties to set
                     */
                    function SetIamPolicyRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SetIamPolicyRequest resource.
                     * @member {string} resource
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @instance
                     */
                    SetIamPolicyRequest.prototype.resource = "";
    
                    /**
                     * SetIamPolicyRequest policy.
                     * @member {google.iam.v1.IPolicy|null|undefined} policy
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @instance
                     */
                    SetIamPolicyRequest.prototype.policy = null;
    
                    /**
                     * Creates a new SetIamPolicyRequest instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @static
                     * @param {google.iam.v1.ISetIamPolicyRequest=} [properties] Properties to set
                     * @returns {google.iam.v1.SetIamPolicyRequest} SetIamPolicyRequest instance
                     */
                    SetIamPolicyRequest.create = function create(properties) {
                        return new SetIamPolicyRequest(properties);
                    };
    
                    /**
                     * Encodes the specified SetIamPolicyRequest message. Does not implicitly {@link google.iam.v1.SetIamPolicyRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @static
                     * @param {google.iam.v1.ISetIamPolicyRequest} message SetIamPolicyRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SetIamPolicyRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.resource != null && Object.hasOwnProperty.call(message, "resource"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.resource);
                        if (message.policy != null && Object.hasOwnProperty.call(message, "policy"))
                            $root.google.iam.v1.Policy.encode(message.policy, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SetIamPolicyRequest message, length delimited. Does not implicitly {@link google.iam.v1.SetIamPolicyRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @static
                     * @param {google.iam.v1.ISetIamPolicyRequest} message SetIamPolicyRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SetIamPolicyRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SetIamPolicyRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.SetIamPolicyRequest} SetIamPolicyRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SetIamPolicyRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.SetIamPolicyRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.resource = reader.string();
                                break;
                            case 2:
                                message.policy = $root.google.iam.v1.Policy.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SetIamPolicyRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.SetIamPolicyRequest} SetIamPolicyRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SetIamPolicyRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SetIamPolicyRequest message.
                     * @function verify
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SetIamPolicyRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.resource != null && message.hasOwnProperty("resource"))
                            if (!$util.isString(message.resource))
                                return "resource: string expected";
                        if (message.policy != null && message.hasOwnProperty("policy")) {
                            var error = $root.google.iam.v1.Policy.verify(message.policy);
                            if (error)
                                return "policy." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a SetIamPolicyRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.SetIamPolicyRequest} SetIamPolicyRequest
                     */
                    SetIamPolicyRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.SetIamPolicyRequest)
                            return object;
                        var message = new $root.google.iam.v1.SetIamPolicyRequest();
                        if (object.resource != null)
                            message.resource = String(object.resource);
                        if (object.policy != null) {
                            if (typeof object.policy !== "object")
                                throw TypeError(".google.iam.v1.SetIamPolicyRequest.policy: object expected");
                            message.policy = $root.google.iam.v1.Policy.fromObject(object.policy);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SetIamPolicyRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @static
                     * @param {google.iam.v1.SetIamPolicyRequest} message SetIamPolicyRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SetIamPolicyRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.resource = "";
                            object.policy = null;
                        }
                        if (message.resource != null && message.hasOwnProperty("resource"))
                            object.resource = message.resource;
                        if (message.policy != null && message.hasOwnProperty("policy"))
                            object.policy = $root.google.iam.v1.Policy.toObject(message.policy, options);
                        return object;
                    };
    
                    /**
                     * Converts this SetIamPolicyRequest to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SetIamPolicyRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return SetIamPolicyRequest;
                })();
    
                v1.GetIamPolicyRequest = (function() {
    
                    /**
                     * Properties of a GetIamPolicyRequest.
                     * @memberof google.iam.v1
                     * @interface IGetIamPolicyRequest
                     * @property {string|null} [resource] GetIamPolicyRequest resource
                     * @property {google.iam.v1.IGetPolicyOptions|null} [options] GetIamPolicyRequest options
                     */
    
                    /**
                     * Constructs a new GetIamPolicyRequest.
                     * @memberof google.iam.v1
                     * @classdesc Represents a GetIamPolicyRequest.
                     * @implements IGetIamPolicyRequest
                     * @constructor
                     * @param {google.iam.v1.IGetIamPolicyRequest=} [properties] Properties to set
                     */
                    function GetIamPolicyRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GetIamPolicyRequest resource.
                     * @member {string} resource
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @instance
                     */
                    GetIamPolicyRequest.prototype.resource = "";
    
                    /**
                     * GetIamPolicyRequest options.
                     * @member {google.iam.v1.IGetPolicyOptions|null|undefined} options
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @instance
                     */
                    GetIamPolicyRequest.prototype.options = null;
    
                    /**
                     * Creates a new GetIamPolicyRequest instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @static
                     * @param {google.iam.v1.IGetIamPolicyRequest=} [properties] Properties to set
                     * @returns {google.iam.v1.GetIamPolicyRequest} GetIamPolicyRequest instance
                     */
                    GetIamPolicyRequest.create = function create(properties) {
                        return new GetIamPolicyRequest(properties);
                    };
    
                    /**
                     * Encodes the specified GetIamPolicyRequest message. Does not implicitly {@link google.iam.v1.GetIamPolicyRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @static
                     * @param {google.iam.v1.IGetIamPolicyRequest} message GetIamPolicyRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetIamPolicyRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.resource != null && Object.hasOwnProperty.call(message, "resource"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.resource);
                        if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                            $root.google.iam.v1.GetPolicyOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GetIamPolicyRequest message, length delimited. Does not implicitly {@link google.iam.v1.GetIamPolicyRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @static
                     * @param {google.iam.v1.IGetIamPolicyRequest} message GetIamPolicyRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetIamPolicyRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GetIamPolicyRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.GetIamPolicyRequest} GetIamPolicyRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetIamPolicyRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.GetIamPolicyRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.resource = reader.string();
                                break;
                            case 2:
                                message.options = $root.google.iam.v1.GetPolicyOptions.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GetIamPolicyRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.GetIamPolicyRequest} GetIamPolicyRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetIamPolicyRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GetIamPolicyRequest message.
                     * @function verify
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetIamPolicyRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.resource != null && message.hasOwnProperty("resource"))
                            if (!$util.isString(message.resource))
                                return "resource: string expected";
                        if (message.options != null && message.hasOwnProperty("options")) {
                            var error = $root.google.iam.v1.GetPolicyOptions.verify(message.options);
                            if (error)
                                return "options." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a GetIamPolicyRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.GetIamPolicyRequest} GetIamPolicyRequest
                     */
                    GetIamPolicyRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.GetIamPolicyRequest)
                            return object;
                        var message = new $root.google.iam.v1.GetIamPolicyRequest();
                        if (object.resource != null)
                            message.resource = String(object.resource);
                        if (object.options != null) {
                            if (typeof object.options !== "object")
                                throw TypeError(".google.iam.v1.GetIamPolicyRequest.options: object expected");
                            message.options = $root.google.iam.v1.GetPolicyOptions.fromObject(object.options);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GetIamPolicyRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @static
                     * @param {google.iam.v1.GetIamPolicyRequest} message GetIamPolicyRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetIamPolicyRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.resource = "";
                            object.options = null;
                        }
                        if (message.resource != null && message.hasOwnProperty("resource"))
                            object.resource = message.resource;
                        if (message.options != null && message.hasOwnProperty("options"))
                            object.options = $root.google.iam.v1.GetPolicyOptions.toObject(message.options, options);
                        return object;
                    };
    
                    /**
                     * Converts this GetIamPolicyRequest to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetIamPolicyRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return GetIamPolicyRequest;
                })();
    
                v1.TestIamPermissionsRequest = (function() {
    
                    /**
                     * Properties of a TestIamPermissionsRequest.
                     * @memberof google.iam.v1
                     * @interface ITestIamPermissionsRequest
                     * @property {string|null} [resource] TestIamPermissionsRequest resource
                     * @property {Array.<string>|null} [permissions] TestIamPermissionsRequest permissions
                     */
    
                    /**
                     * Constructs a new TestIamPermissionsRequest.
                     * @memberof google.iam.v1
                     * @classdesc Represents a TestIamPermissionsRequest.
                     * @implements ITestIamPermissionsRequest
                     * @constructor
                     * @param {google.iam.v1.ITestIamPermissionsRequest=} [properties] Properties to set
                     */
                    function TestIamPermissionsRequest(properties) {
                        this.permissions = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * TestIamPermissionsRequest resource.
                     * @member {string} resource
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @instance
                     */
                    TestIamPermissionsRequest.prototype.resource = "";
    
                    /**
                     * TestIamPermissionsRequest permissions.
                     * @member {Array.<string>} permissions
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @instance
                     */
                    TestIamPermissionsRequest.prototype.permissions = $util.emptyArray;
    
                    /**
                     * Creates a new TestIamPermissionsRequest instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @static
                     * @param {google.iam.v1.ITestIamPermissionsRequest=} [properties] Properties to set
                     * @returns {google.iam.v1.TestIamPermissionsRequest} TestIamPermissionsRequest instance
                     */
                    TestIamPermissionsRequest.create = function create(properties) {
                        return new TestIamPermissionsRequest(properties);
                    };
    
                    /**
                     * Encodes the specified TestIamPermissionsRequest message. Does not implicitly {@link google.iam.v1.TestIamPermissionsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @static
                     * @param {google.iam.v1.ITestIamPermissionsRequest} message TestIamPermissionsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TestIamPermissionsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.resource != null && Object.hasOwnProperty.call(message, "resource"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.resource);
                        if (message.permissions != null && message.permissions.length)
                            for (var i = 0; i < message.permissions.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.permissions[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified TestIamPermissionsRequest message, length delimited. Does not implicitly {@link google.iam.v1.TestIamPermissionsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @static
                     * @param {google.iam.v1.ITestIamPermissionsRequest} message TestIamPermissionsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TestIamPermissionsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a TestIamPermissionsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.TestIamPermissionsRequest} TestIamPermissionsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TestIamPermissionsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.TestIamPermissionsRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.resource = reader.string();
                                break;
                            case 2:
                                if (!(message.permissions && message.permissions.length))
                                    message.permissions = [];
                                message.permissions.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a TestIamPermissionsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.TestIamPermissionsRequest} TestIamPermissionsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TestIamPermissionsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a TestIamPermissionsRequest message.
                     * @function verify
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TestIamPermissionsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.resource != null && message.hasOwnProperty("resource"))
                            if (!$util.isString(message.resource))
                                return "resource: string expected";
                        if (message.permissions != null && message.hasOwnProperty("permissions")) {
                            if (!Array.isArray(message.permissions))
                                return "permissions: array expected";
                            for (var i = 0; i < message.permissions.length; ++i)
                                if (!$util.isString(message.permissions[i]))
                                    return "permissions: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a TestIamPermissionsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.TestIamPermissionsRequest} TestIamPermissionsRequest
                     */
                    TestIamPermissionsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.TestIamPermissionsRequest)
                            return object;
                        var message = new $root.google.iam.v1.TestIamPermissionsRequest();
                        if (object.resource != null)
                            message.resource = String(object.resource);
                        if (object.permissions) {
                            if (!Array.isArray(object.permissions))
                                throw TypeError(".google.iam.v1.TestIamPermissionsRequest.permissions: array expected");
                            message.permissions = [];
                            for (var i = 0; i < object.permissions.length; ++i)
                                message.permissions[i] = String(object.permissions[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a TestIamPermissionsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @static
                     * @param {google.iam.v1.TestIamPermissionsRequest} message TestIamPermissionsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TestIamPermissionsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.permissions = [];
                        if (options.defaults)
                            object.resource = "";
                        if (message.resource != null && message.hasOwnProperty("resource"))
                            object.resource = message.resource;
                        if (message.permissions && message.permissions.length) {
                            object.permissions = [];
                            for (var j = 0; j < message.permissions.length; ++j)
                                object.permissions[j] = message.permissions[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this TestIamPermissionsRequest to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TestIamPermissionsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return TestIamPermissionsRequest;
                })();
    
                v1.TestIamPermissionsResponse = (function() {
    
                    /**
                     * Properties of a TestIamPermissionsResponse.
                     * @memberof google.iam.v1
                     * @interface ITestIamPermissionsResponse
                     * @property {Array.<string>|null} [permissions] TestIamPermissionsResponse permissions
                     */
    
                    /**
                     * Constructs a new TestIamPermissionsResponse.
                     * @memberof google.iam.v1
                     * @classdesc Represents a TestIamPermissionsResponse.
                     * @implements ITestIamPermissionsResponse
                     * @constructor
                     * @param {google.iam.v1.ITestIamPermissionsResponse=} [properties] Properties to set
                     */
                    function TestIamPermissionsResponse(properties) {
                        this.permissions = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * TestIamPermissionsResponse permissions.
                     * @member {Array.<string>} permissions
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @instance
                     */
                    TestIamPermissionsResponse.prototype.permissions = $util.emptyArray;
    
                    /**
                     * Creates a new TestIamPermissionsResponse instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @static
                     * @param {google.iam.v1.ITestIamPermissionsResponse=} [properties] Properties to set
                     * @returns {google.iam.v1.TestIamPermissionsResponse} TestIamPermissionsResponse instance
                     */
                    TestIamPermissionsResponse.create = function create(properties) {
                        return new TestIamPermissionsResponse(properties);
                    };
    
                    /**
                     * Encodes the specified TestIamPermissionsResponse message. Does not implicitly {@link google.iam.v1.TestIamPermissionsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @static
                     * @param {google.iam.v1.ITestIamPermissionsResponse} message TestIamPermissionsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TestIamPermissionsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.permissions != null && message.permissions.length)
                            for (var i = 0; i < message.permissions.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.permissions[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified TestIamPermissionsResponse message, length delimited. Does not implicitly {@link google.iam.v1.TestIamPermissionsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @static
                     * @param {google.iam.v1.ITestIamPermissionsResponse} message TestIamPermissionsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TestIamPermissionsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a TestIamPermissionsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.TestIamPermissionsResponse} TestIamPermissionsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TestIamPermissionsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.TestIamPermissionsResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.permissions && message.permissions.length))
                                    message.permissions = [];
                                message.permissions.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a TestIamPermissionsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.TestIamPermissionsResponse} TestIamPermissionsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TestIamPermissionsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a TestIamPermissionsResponse message.
                     * @function verify
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TestIamPermissionsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.permissions != null && message.hasOwnProperty("permissions")) {
                            if (!Array.isArray(message.permissions))
                                return "permissions: array expected";
                            for (var i = 0; i < message.permissions.length; ++i)
                                if (!$util.isString(message.permissions[i]))
                                    return "permissions: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a TestIamPermissionsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.TestIamPermissionsResponse} TestIamPermissionsResponse
                     */
                    TestIamPermissionsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.TestIamPermissionsResponse)
                            return object;
                        var message = new $root.google.iam.v1.TestIamPermissionsResponse();
                        if (object.permissions) {
                            if (!Array.isArray(object.permissions))
                                throw TypeError(".google.iam.v1.TestIamPermissionsResponse.permissions: array expected");
                            message.permissions = [];
                            for (var i = 0; i < object.permissions.length; ++i)
                                message.permissions[i] = String(object.permissions[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a TestIamPermissionsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @static
                     * @param {google.iam.v1.TestIamPermissionsResponse} message TestIamPermissionsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TestIamPermissionsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.permissions = [];
                        if (message.permissions && message.permissions.length) {
                            object.permissions = [];
                            for (var j = 0; j < message.permissions.length; ++j)
                                object.permissions[j] = message.permissions[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this TestIamPermissionsResponse to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TestIamPermissionsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return TestIamPermissionsResponse;
                })();
    
                v1.GetPolicyOptions = (function() {
    
                    /**
                     * Properties of a GetPolicyOptions.
                     * @memberof google.iam.v1
                     * @interface IGetPolicyOptions
                     * @property {number|null} [requestedPolicyVersion] GetPolicyOptions requestedPolicyVersion
                     */
    
                    /**
                     * Constructs a new GetPolicyOptions.
                     * @memberof google.iam.v1
                     * @classdesc Represents a GetPolicyOptions.
                     * @implements IGetPolicyOptions
                     * @constructor
                     * @param {google.iam.v1.IGetPolicyOptions=} [properties] Properties to set
                     */
                    function GetPolicyOptions(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GetPolicyOptions requestedPolicyVersion.
                     * @member {number} requestedPolicyVersion
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @instance
                     */
                    GetPolicyOptions.prototype.requestedPolicyVersion = 0;
    
                    /**
                     * Creates a new GetPolicyOptions instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @static
                     * @param {google.iam.v1.IGetPolicyOptions=} [properties] Properties to set
                     * @returns {google.iam.v1.GetPolicyOptions} GetPolicyOptions instance
                     */
                    GetPolicyOptions.create = function create(properties) {
                        return new GetPolicyOptions(properties);
                    };
    
                    /**
                     * Encodes the specified GetPolicyOptions message. Does not implicitly {@link google.iam.v1.GetPolicyOptions.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @static
                     * @param {google.iam.v1.IGetPolicyOptions} message GetPolicyOptions message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetPolicyOptions.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.requestedPolicyVersion != null && Object.hasOwnProperty.call(message, "requestedPolicyVersion"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.requestedPolicyVersion);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GetPolicyOptions message, length delimited. Does not implicitly {@link google.iam.v1.GetPolicyOptions.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @static
                     * @param {google.iam.v1.IGetPolicyOptions} message GetPolicyOptions message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetPolicyOptions.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GetPolicyOptions message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.GetPolicyOptions} GetPolicyOptions
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetPolicyOptions.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.GetPolicyOptions();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.requestedPolicyVersion = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GetPolicyOptions message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.GetPolicyOptions} GetPolicyOptions
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetPolicyOptions.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GetPolicyOptions message.
                     * @function verify
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetPolicyOptions.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.requestedPolicyVersion != null && message.hasOwnProperty("requestedPolicyVersion"))
                            if (!$util.isInteger(message.requestedPolicyVersion))
                                return "requestedPolicyVersion: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a GetPolicyOptions message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.GetPolicyOptions} GetPolicyOptions
                     */
                    GetPolicyOptions.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.GetPolicyOptions)
                            return object;
                        var message = new $root.google.iam.v1.GetPolicyOptions();
                        if (object.requestedPolicyVersion != null)
                            message.requestedPolicyVersion = object.requestedPolicyVersion | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GetPolicyOptions message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @static
                     * @param {google.iam.v1.GetPolicyOptions} message GetPolicyOptions
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetPolicyOptions.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.requestedPolicyVersion = 0;
                        if (message.requestedPolicyVersion != null && message.hasOwnProperty("requestedPolicyVersion"))
                            object.requestedPolicyVersion = message.requestedPolicyVersion;
                        return object;
                    };
    
                    /**
                     * Converts this GetPolicyOptions to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetPolicyOptions.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return GetPolicyOptions;
                })();
    
                v1.Policy = (function() {
    
                    /**
                     * Properties of a Policy.
                     * @memberof google.iam.v1
                     * @interface IPolicy
                     * @property {number|null} [version] Policy version
                     * @property {Array.<google.iam.v1.IBinding>|null} [bindings] Policy bindings
                     * @property {Uint8Array|null} [etag] Policy etag
                     */
    
                    /**
                     * Constructs a new Policy.
                     * @memberof google.iam.v1
                     * @classdesc Represents a Policy.
                     * @implements IPolicy
                     * @constructor
                     * @param {google.iam.v1.IPolicy=} [properties] Properties to set
                     */
                    function Policy(properties) {
                        this.bindings = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Policy version.
                     * @member {number} version
                     * @memberof google.iam.v1.Policy
                     * @instance
                     */
                    Policy.prototype.version = 0;
    
                    /**
                     * Policy bindings.
                     * @member {Array.<google.iam.v1.IBinding>} bindings
                     * @memberof google.iam.v1.Policy
                     * @instance
                     */
                    Policy.prototype.bindings = $util.emptyArray;
    
                    /**
                     * Policy etag.
                     * @member {Uint8Array} etag
                     * @memberof google.iam.v1.Policy
                     * @instance
                     */
                    Policy.prototype.etag = $util.newBuffer([]);
    
                    /**
                     * Creates a new Policy instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {google.iam.v1.IPolicy=} [properties] Properties to set
                     * @returns {google.iam.v1.Policy} Policy instance
                     */
                    Policy.create = function create(properties) {
                        return new Policy(properties);
                    };
    
                    /**
                     * Encodes the specified Policy message. Does not implicitly {@link google.iam.v1.Policy.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {google.iam.v1.IPolicy} message Policy message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Policy.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.version);
                        if (message.etag != null && Object.hasOwnProperty.call(message, "etag"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.etag);
                        if (message.bindings != null && message.bindings.length)
                            for (var i = 0; i < message.bindings.length; ++i)
                                $root.google.iam.v1.Binding.encode(message.bindings[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Policy message, length delimited. Does not implicitly {@link google.iam.v1.Policy.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {google.iam.v1.IPolicy} message Policy message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Policy.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Policy message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.Policy} Policy
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Policy.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.Policy();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.version = reader.int32();
                                break;
                            case 4:
                                if (!(message.bindings && message.bindings.length))
                                    message.bindings = [];
                                message.bindings.push($root.google.iam.v1.Binding.decode(reader, reader.uint32()));
                                break;
                            case 3:
                                message.etag = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Policy message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.Policy} Policy
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Policy.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Policy message.
                     * @function verify
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Policy.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.version != null && message.hasOwnProperty("version"))
                            if (!$util.isInteger(message.version))
                                return "version: integer expected";
                        if (message.bindings != null && message.hasOwnProperty("bindings")) {
                            if (!Array.isArray(message.bindings))
                                return "bindings: array expected";
                            for (var i = 0; i < message.bindings.length; ++i) {
                                var error = $root.google.iam.v1.Binding.verify(message.bindings[i]);
                                if (error)
                                    return "bindings." + error;
                            }
                        }
                        if (message.etag != null && message.hasOwnProperty("etag"))
                            if (!(message.etag && typeof message.etag.length === "number" || $util.isString(message.etag)))
                                return "etag: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates a Policy message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.Policy} Policy
                     */
                    Policy.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.Policy)
                            return object;
                        var message = new $root.google.iam.v1.Policy();
                        if (object.version != null)
                            message.version = object.version | 0;
                        if (object.bindings) {
                            if (!Array.isArray(object.bindings))
                                throw TypeError(".google.iam.v1.Policy.bindings: array expected");
                            message.bindings = [];
                            for (var i = 0; i < object.bindings.length; ++i) {
                                if (typeof object.bindings[i] !== "object")
                                    throw TypeError(".google.iam.v1.Policy.bindings: object expected");
                                message.bindings[i] = $root.google.iam.v1.Binding.fromObject(object.bindings[i]);
                            }
                        }
                        if (object.etag != null)
                            if (typeof object.etag === "string")
                                $util.base64.decode(object.etag, message.etag = $util.newBuffer($util.base64.length(object.etag)), 0);
                            else if (object.etag.length)
                                message.etag = object.etag;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Policy message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {google.iam.v1.Policy} message Policy
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Policy.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.bindings = [];
                        if (options.defaults) {
                            object.version = 0;
                            if (options.bytes === String)
                                object.etag = "";
                            else {
                                object.etag = [];
                                if (options.bytes !== Array)
                                    object.etag = $util.newBuffer(object.etag);
                            }
                        }
                        if (message.version != null && message.hasOwnProperty("version"))
                            object.version = message.version;
                        if (message.etag != null && message.hasOwnProperty("etag"))
                            object.etag = options.bytes === String ? $util.base64.encode(message.etag, 0, message.etag.length) : options.bytes === Array ? Array.prototype.slice.call(message.etag) : message.etag;
                        if (message.bindings && message.bindings.length) {
                            object.bindings = [];
                            for (var j = 0; j < message.bindings.length; ++j)
                                object.bindings[j] = $root.google.iam.v1.Binding.toObject(message.bindings[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Policy to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.Policy
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Policy.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Policy;
                })();
    
                v1.Binding = (function() {
    
                    /**
                     * Properties of a Binding.
                     * @memberof google.iam.v1
                     * @interface IBinding
                     * @property {string|null} [role] Binding role
                     * @property {Array.<string>|null} [members] Binding members
                     * @property {google.type.IExpr|null} [condition] Binding condition
                     */
    
                    /**
                     * Constructs a new Binding.
                     * @memberof google.iam.v1
                     * @classdesc Represents a Binding.
                     * @implements IBinding
                     * @constructor
                     * @param {google.iam.v1.IBinding=} [properties] Properties to set
                     */
                    function Binding(properties) {
                        this.members = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Binding role.
                     * @member {string} role
                     * @memberof google.iam.v1.Binding
                     * @instance
                     */
                    Binding.prototype.role = "";
    
                    /**
                     * Binding members.
                     * @member {Array.<string>} members
                     * @memberof google.iam.v1.Binding
                     * @instance
                     */
                    Binding.prototype.members = $util.emptyArray;
    
                    /**
                     * Binding condition.
                     * @member {google.type.IExpr|null|undefined} condition
                     * @memberof google.iam.v1.Binding
                     * @instance
                     */
                    Binding.prototype.condition = null;
    
                    /**
                     * Creates a new Binding instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {google.iam.v1.IBinding=} [properties] Properties to set
                     * @returns {google.iam.v1.Binding} Binding instance
                     */
                    Binding.create = function create(properties) {
                        return new Binding(properties);
                    };
    
                    /**
                     * Encodes the specified Binding message. Does not implicitly {@link google.iam.v1.Binding.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {google.iam.v1.IBinding} message Binding message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Binding.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.role != null && Object.hasOwnProperty.call(message, "role"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.role);
                        if (message.members != null && message.members.length)
                            for (var i = 0; i < message.members.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.members[i]);
                        if (message.condition != null && Object.hasOwnProperty.call(message, "condition"))
                            $root.google.type.Expr.encode(message.condition, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Binding message, length delimited. Does not implicitly {@link google.iam.v1.Binding.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {google.iam.v1.IBinding} message Binding message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Binding.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Binding message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.Binding} Binding
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Binding.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.Binding();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.role = reader.string();
                                break;
                            case 2:
                                if (!(message.members && message.members.length))
                                    message.members = [];
                                message.members.push(reader.string());
                                break;
                            case 3:
                                message.condition = $root.google.type.Expr.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Binding message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.Binding} Binding
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Binding.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Binding message.
                     * @function verify
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Binding.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.role != null && message.hasOwnProperty("role"))
                            if (!$util.isString(message.role))
                                return "role: string expected";
                        if (message.members != null && message.hasOwnProperty("members")) {
                            if (!Array.isArray(message.members))
                                return "members: array expected";
                            for (var i = 0; i < message.members.length; ++i)
                                if (!$util.isString(message.members[i]))
                                    return "members: string[] expected";
                        }
                        if (message.condition != null && message.hasOwnProperty("condition")) {
                            var error = $root.google.type.Expr.verify(message.condition);
                            if (error)
                                return "condition." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Binding message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.Binding} Binding
                     */
                    Binding.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.Binding)
                            return object;
                        var message = new $root.google.iam.v1.Binding();
                        if (object.role != null)
                            message.role = String(object.role);
                        if (object.members) {
                            if (!Array.isArray(object.members))
                                throw TypeError(".google.iam.v1.Binding.members: array expected");
                            message.members = [];
                            for (var i = 0; i < object.members.length; ++i)
                                message.members[i] = String(object.members[i]);
                        }
                        if (object.condition != null) {
                            if (typeof object.condition !== "object")
                                throw TypeError(".google.iam.v1.Binding.condition: object expected");
                            message.condition = $root.google.type.Expr.fromObject(object.condition);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Binding message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {google.iam.v1.Binding} message Binding
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Binding.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.members = [];
                        if (options.defaults) {
                            object.role = "";
                            object.condition = null;
                        }
                        if (message.role != null && message.hasOwnProperty("role"))
                            object.role = message.role;
                        if (message.members && message.members.length) {
                            object.members = [];
                            for (var j = 0; j < message.members.length; ++j)
                                object.members[j] = message.members[j];
                        }
                        if (message.condition != null && message.hasOwnProperty("condition"))
                            object.condition = $root.google.type.Expr.toObject(message.condition, options);
                        return object;
                    };
    
                    /**
                     * Converts this Binding to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.Binding
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Binding.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Binding;
                })();
    
                v1.PolicyDelta = (function() {
    
                    /**
                     * Properties of a PolicyDelta.
                     * @memberof google.iam.v1
                     * @interface IPolicyDelta
                     * @property {Array.<google.iam.v1.IBindingDelta>|null} [bindingDeltas] PolicyDelta bindingDeltas
                     * @property {Array.<google.iam.v1.IAuditConfigDelta>|null} [auditConfigDeltas] PolicyDelta auditConfigDeltas
                     */
    
                    /**
                     * Constructs a new PolicyDelta.
                     * @memberof google.iam.v1
                     * @classdesc Represents a PolicyDelta.
                     * @implements IPolicyDelta
                     * @constructor
                     * @param {google.iam.v1.IPolicyDelta=} [properties] Properties to set
                     */
                    function PolicyDelta(properties) {
                        this.bindingDeltas = [];
                        this.auditConfigDeltas = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PolicyDelta bindingDeltas.
                     * @member {Array.<google.iam.v1.IBindingDelta>} bindingDeltas
                     * @memberof google.iam.v1.PolicyDelta
                     * @instance
                     */
                    PolicyDelta.prototype.bindingDeltas = $util.emptyArray;
    
                    /**
                     * PolicyDelta auditConfigDeltas.
                     * @member {Array.<google.iam.v1.IAuditConfigDelta>} auditConfigDeltas
                     * @memberof google.iam.v1.PolicyDelta
                     * @instance
                     */
                    PolicyDelta.prototype.auditConfigDeltas = $util.emptyArray;
    
                    /**
                     * Creates a new PolicyDelta instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {google.iam.v1.IPolicyDelta=} [properties] Properties to set
                     * @returns {google.iam.v1.PolicyDelta} PolicyDelta instance
                     */
                    PolicyDelta.create = function create(properties) {
                        return new PolicyDelta(properties);
                    };
    
                    /**
                     * Encodes the specified PolicyDelta message. Does not implicitly {@link google.iam.v1.PolicyDelta.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {google.iam.v1.IPolicyDelta} message PolicyDelta message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PolicyDelta.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.bindingDeltas != null && message.bindingDeltas.length)
                            for (var i = 0; i < message.bindingDeltas.length; ++i)
                                $root.google.iam.v1.BindingDelta.encode(message.bindingDeltas[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.auditConfigDeltas != null && message.auditConfigDeltas.length)
                            for (var i = 0; i < message.auditConfigDeltas.length; ++i)
                                $root.google.iam.v1.AuditConfigDelta.encode(message.auditConfigDeltas[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PolicyDelta message, length delimited. Does not implicitly {@link google.iam.v1.PolicyDelta.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {google.iam.v1.IPolicyDelta} message PolicyDelta message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PolicyDelta.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PolicyDelta message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.PolicyDelta} PolicyDelta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PolicyDelta.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.PolicyDelta();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.bindingDeltas && message.bindingDeltas.length))
                                    message.bindingDeltas = [];
                                message.bindingDeltas.push($root.google.iam.v1.BindingDelta.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                if (!(message.auditConfigDeltas && message.auditConfigDeltas.length))
                                    message.auditConfigDeltas = [];
                                message.auditConfigDeltas.push($root.google.iam.v1.AuditConfigDelta.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PolicyDelta message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.PolicyDelta} PolicyDelta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PolicyDelta.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PolicyDelta message.
                     * @function verify
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PolicyDelta.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.bindingDeltas != null && message.hasOwnProperty("bindingDeltas")) {
                            if (!Array.isArray(message.bindingDeltas))
                                return "bindingDeltas: array expected";
                            for (var i = 0; i < message.bindingDeltas.length; ++i) {
                                var error = $root.google.iam.v1.BindingDelta.verify(message.bindingDeltas[i]);
                                if (error)
                                    return "bindingDeltas." + error;
                            }
                        }
                        if (message.auditConfigDeltas != null && message.hasOwnProperty("auditConfigDeltas")) {
                            if (!Array.isArray(message.auditConfigDeltas))
                                return "auditConfigDeltas: array expected";
                            for (var i = 0; i < message.auditConfigDeltas.length; ++i) {
                                var error = $root.google.iam.v1.AuditConfigDelta.verify(message.auditConfigDeltas[i]);
                                if (error)
                                    return "auditConfigDeltas." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a PolicyDelta message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.PolicyDelta} PolicyDelta
                     */
                    PolicyDelta.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.PolicyDelta)
                            return object;
                        var message = new $root.google.iam.v1.PolicyDelta();
                        if (object.bindingDeltas) {
                            if (!Array.isArray(object.bindingDeltas))
                                throw TypeError(".google.iam.v1.PolicyDelta.bindingDeltas: array expected");
                            message.bindingDeltas = [];
                            for (var i = 0; i < object.bindingDeltas.length; ++i) {
                                if (typeof object.bindingDeltas[i] !== "object")
                                    throw TypeError(".google.iam.v1.PolicyDelta.bindingDeltas: object expected");
                                message.bindingDeltas[i] = $root.google.iam.v1.BindingDelta.fromObject(object.bindingDeltas[i]);
                            }
                        }
                        if (object.auditConfigDeltas) {
                            if (!Array.isArray(object.auditConfigDeltas))
                                throw TypeError(".google.iam.v1.PolicyDelta.auditConfigDeltas: array expected");
                            message.auditConfigDeltas = [];
                            for (var i = 0; i < object.auditConfigDeltas.length; ++i) {
                                if (typeof object.auditConfigDeltas[i] !== "object")
                                    throw TypeError(".google.iam.v1.PolicyDelta.auditConfigDeltas: object expected");
                                message.auditConfigDeltas[i] = $root.google.iam.v1.AuditConfigDelta.fromObject(object.auditConfigDeltas[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PolicyDelta message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {google.iam.v1.PolicyDelta} message PolicyDelta
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PolicyDelta.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.bindingDeltas = [];
                            object.auditConfigDeltas = [];
                        }
                        if (message.bindingDeltas && message.bindingDeltas.length) {
                            object.bindingDeltas = [];
                            for (var j = 0; j < message.bindingDeltas.length; ++j)
                                object.bindingDeltas[j] = $root.google.iam.v1.BindingDelta.toObject(message.bindingDeltas[j], options);
                        }
                        if (message.auditConfigDeltas && message.auditConfigDeltas.length) {
                            object.auditConfigDeltas = [];
                            for (var j = 0; j < message.auditConfigDeltas.length; ++j)
                                object.auditConfigDeltas[j] = $root.google.iam.v1.AuditConfigDelta.toObject(message.auditConfigDeltas[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this PolicyDelta to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.PolicyDelta
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PolicyDelta.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PolicyDelta;
                })();
    
                v1.BindingDelta = (function() {
    
                    /**
                     * Properties of a BindingDelta.
                     * @memberof google.iam.v1
                     * @interface IBindingDelta
                     * @property {google.iam.v1.BindingDelta.Action|null} [action] BindingDelta action
                     * @property {string|null} [role] BindingDelta role
                     * @property {string|null} [member] BindingDelta member
                     * @property {google.type.IExpr|null} [condition] BindingDelta condition
                     */
    
                    /**
                     * Constructs a new BindingDelta.
                     * @memberof google.iam.v1
                     * @classdesc Represents a BindingDelta.
                     * @implements IBindingDelta
                     * @constructor
                     * @param {google.iam.v1.IBindingDelta=} [properties] Properties to set
                     */
                    function BindingDelta(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * BindingDelta action.
                     * @member {google.iam.v1.BindingDelta.Action} action
                     * @memberof google.iam.v1.BindingDelta
                     * @instance
                     */
                    BindingDelta.prototype.action = 0;
    
                    /**
                     * BindingDelta role.
                     * @member {string} role
                     * @memberof google.iam.v1.BindingDelta
                     * @instance
                     */
                    BindingDelta.prototype.role = "";
    
                    /**
                     * BindingDelta member.
                     * @member {string} member
                     * @memberof google.iam.v1.BindingDelta
                     * @instance
                     */
                    BindingDelta.prototype.member = "";
    
                    /**
                     * BindingDelta condition.
                     * @member {google.type.IExpr|null|undefined} condition
                     * @memberof google.iam.v1.BindingDelta
                     * @instance
                     */
                    BindingDelta.prototype.condition = null;
    
                    /**
                     * Creates a new BindingDelta instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {google.iam.v1.IBindingDelta=} [properties] Properties to set
                     * @returns {google.iam.v1.BindingDelta} BindingDelta instance
                     */
                    BindingDelta.create = function create(properties) {
                        return new BindingDelta(properties);
                    };
    
                    /**
                     * Encodes the specified BindingDelta message. Does not implicitly {@link google.iam.v1.BindingDelta.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {google.iam.v1.IBindingDelta} message BindingDelta message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BindingDelta.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.action != null && Object.hasOwnProperty.call(message, "action"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.action);
                        if (message.role != null && Object.hasOwnProperty.call(message, "role"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.role);
                        if (message.member != null && Object.hasOwnProperty.call(message, "member"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.member);
                        if (message.condition != null && Object.hasOwnProperty.call(message, "condition"))
                            $root.google.type.Expr.encode(message.condition, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified BindingDelta message, length delimited. Does not implicitly {@link google.iam.v1.BindingDelta.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {google.iam.v1.IBindingDelta} message BindingDelta message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BindingDelta.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a BindingDelta message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.BindingDelta} BindingDelta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BindingDelta.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.BindingDelta();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.action = reader.int32();
                                break;
                            case 2:
                                message.role = reader.string();
                                break;
                            case 3:
                                message.member = reader.string();
                                break;
                            case 4:
                                message.condition = $root.google.type.Expr.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a BindingDelta message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.BindingDelta} BindingDelta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BindingDelta.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a BindingDelta message.
                     * @function verify
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    BindingDelta.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.action != null && message.hasOwnProperty("action"))
                            switch (message.action) {
                            default:
                                return "action: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.role != null && message.hasOwnProperty("role"))
                            if (!$util.isString(message.role))
                                return "role: string expected";
                        if (message.member != null && message.hasOwnProperty("member"))
                            if (!$util.isString(message.member))
                                return "member: string expected";
                        if (message.condition != null && message.hasOwnProperty("condition")) {
                            var error = $root.google.type.Expr.verify(message.condition);
                            if (error)
                                return "condition." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a BindingDelta message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.BindingDelta} BindingDelta
                     */
                    BindingDelta.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.BindingDelta)
                            return object;
                        var message = new $root.google.iam.v1.BindingDelta();
                        switch (object.action) {
                        case "ACTION_UNSPECIFIED":
                        case 0:
                            message.action = 0;
                            break;
                        case "ADD":
                        case 1:
                            message.action = 1;
                            break;
                        case "REMOVE":
                        case 2:
                            message.action = 2;
                            break;
                        }
                        if (object.role != null)
                            message.role = String(object.role);
                        if (object.member != null)
                            message.member = String(object.member);
                        if (object.condition != null) {
                            if (typeof object.condition !== "object")
                                throw TypeError(".google.iam.v1.BindingDelta.condition: object expected");
                            message.condition = $root.google.type.Expr.fromObject(object.condition);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a BindingDelta message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {google.iam.v1.BindingDelta} message BindingDelta
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    BindingDelta.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.action = options.enums === String ? "ACTION_UNSPECIFIED" : 0;
                            object.role = "";
                            object.member = "";
                            object.condition = null;
                        }
                        if (message.action != null && message.hasOwnProperty("action"))
                            object.action = options.enums === String ? $root.google.iam.v1.BindingDelta.Action[message.action] : message.action;
                        if (message.role != null && message.hasOwnProperty("role"))
                            object.role = message.role;
                        if (message.member != null && message.hasOwnProperty("member"))
                            object.member = message.member;
                        if (message.condition != null && message.hasOwnProperty("condition"))
                            object.condition = $root.google.type.Expr.toObject(message.condition, options);
                        return object;
                    };
    
                    /**
                     * Converts this BindingDelta to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.BindingDelta
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    BindingDelta.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Action enum.
                     * @name google.iam.v1.BindingDelta.Action
                     * @enum {number}
                     * @property {number} ACTION_UNSPECIFIED=0 ACTION_UNSPECIFIED value
                     * @property {number} ADD=1 ADD value
                     * @property {number} REMOVE=2 REMOVE value
                     */
                    BindingDelta.Action = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "ACTION_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "ADD"] = 1;
                        values[valuesById[2] = "REMOVE"] = 2;
                        return values;
                    })();
    
                    return BindingDelta;
                })();
    
                v1.AuditConfigDelta = (function() {
    
                    /**
                     * Properties of an AuditConfigDelta.
                     * @memberof google.iam.v1
                     * @interface IAuditConfigDelta
                     * @property {google.iam.v1.AuditConfigDelta.Action|null} [action] AuditConfigDelta action
                     * @property {string|null} [service] AuditConfigDelta service
                     * @property {string|null} [exemptedMember] AuditConfigDelta exemptedMember
                     * @property {string|null} [logType] AuditConfigDelta logType
                     */
    
                    /**
                     * Constructs a new AuditConfigDelta.
                     * @memberof google.iam.v1
                     * @classdesc Represents an AuditConfigDelta.
                     * @implements IAuditConfigDelta
                     * @constructor
                     * @param {google.iam.v1.IAuditConfigDelta=} [properties] Properties to set
                     */
                    function AuditConfigDelta(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * AuditConfigDelta action.
                     * @member {google.iam.v1.AuditConfigDelta.Action} action
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @instance
                     */
                    AuditConfigDelta.prototype.action = 0;
    
                    /**
                     * AuditConfigDelta service.
                     * @member {string} service
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @instance
                     */
                    AuditConfigDelta.prototype.service = "";
    
                    /**
                     * AuditConfigDelta exemptedMember.
                     * @member {string} exemptedMember
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @instance
                     */
                    AuditConfigDelta.prototype.exemptedMember = "";
    
                    /**
                     * AuditConfigDelta logType.
                     * @member {string} logType
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @instance
                     */
                    AuditConfigDelta.prototype.logType = "";
    
                    /**
                     * Creates a new AuditConfigDelta instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {google.iam.v1.IAuditConfigDelta=} [properties] Properties to set
                     * @returns {google.iam.v1.AuditConfigDelta} AuditConfigDelta instance
                     */
                    AuditConfigDelta.create = function create(properties) {
                        return new AuditConfigDelta(properties);
                    };
    
                    /**
                     * Encodes the specified AuditConfigDelta message. Does not implicitly {@link google.iam.v1.AuditConfigDelta.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {google.iam.v1.IAuditConfigDelta} message AuditConfigDelta message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AuditConfigDelta.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.action != null && Object.hasOwnProperty.call(message, "action"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.action);
                        if (message.service != null && Object.hasOwnProperty.call(message, "service"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.service);
                        if (message.exemptedMember != null && Object.hasOwnProperty.call(message, "exemptedMember"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.exemptedMember);
                        if (message.logType != null && Object.hasOwnProperty.call(message, "logType"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.logType);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified AuditConfigDelta message, length delimited. Does not implicitly {@link google.iam.v1.AuditConfigDelta.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {google.iam.v1.IAuditConfigDelta} message AuditConfigDelta message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AuditConfigDelta.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an AuditConfigDelta message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.AuditConfigDelta} AuditConfigDelta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AuditConfigDelta.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.AuditConfigDelta();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.action = reader.int32();
                                break;
                            case 2:
                                message.service = reader.string();
                                break;
                            case 3:
                                message.exemptedMember = reader.string();
                                break;
                            case 4:
                                message.logType = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an AuditConfigDelta message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.AuditConfigDelta} AuditConfigDelta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AuditConfigDelta.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an AuditConfigDelta message.
                     * @function verify
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AuditConfigDelta.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.action != null && message.hasOwnProperty("action"))
                            switch (message.action) {
                            default:
                                return "action: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.service != null && message.hasOwnProperty("service"))
                            if (!$util.isString(message.service))
                                return "service: string expected";
                        if (message.exemptedMember != null && message.hasOwnProperty("exemptedMember"))
                            if (!$util.isString(message.exemptedMember))
                                return "exemptedMember: string expected";
                        if (message.logType != null && message.hasOwnProperty("logType"))
                            if (!$util.isString(message.logType))
                                return "logType: string expected";
                        return null;
                    };
    
                    /**
                     * Creates an AuditConfigDelta message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.AuditConfigDelta} AuditConfigDelta
                     */
                    AuditConfigDelta.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.AuditConfigDelta)
                            return object;
                        var message = new $root.google.iam.v1.AuditConfigDelta();
                        switch (object.action) {
                        case "ACTION_UNSPECIFIED":
                        case 0:
                            message.action = 0;
                            break;
                        case "ADD":
                        case 1:
                            message.action = 1;
                            break;
                        case "REMOVE":
                        case 2:
                            message.action = 2;
                            break;
                        }
                        if (object.service != null)
                            message.service = String(object.service);
                        if (object.exemptedMember != null)
                            message.exemptedMember = String(object.exemptedMember);
                        if (object.logType != null)
                            message.logType = String(object.logType);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an AuditConfigDelta message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {google.iam.v1.AuditConfigDelta} message AuditConfigDelta
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AuditConfigDelta.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.action = options.enums === String ? "ACTION_UNSPECIFIED" : 0;
                            object.service = "";
                            object.exemptedMember = "";
                            object.logType = "";
                        }
                        if (message.action != null && message.hasOwnProperty("action"))
                            object.action = options.enums === String ? $root.google.iam.v1.AuditConfigDelta.Action[message.action] : message.action;
                        if (message.service != null && message.hasOwnProperty("service"))
                            object.service = message.service;
                        if (message.exemptedMember != null && message.hasOwnProperty("exemptedMember"))
                            object.exemptedMember = message.exemptedMember;
                        if (message.logType != null && message.hasOwnProperty("logType"))
                            object.logType = message.logType;
                        return object;
                    };
    
                    /**
                     * Converts this AuditConfigDelta to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AuditConfigDelta.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Action enum.
                     * @name google.iam.v1.AuditConfigDelta.Action
                     * @enum {number}
                     * @property {number} ACTION_UNSPECIFIED=0 ACTION_UNSPECIFIED value
                     * @property {number} ADD=1 ADD value
                     * @property {number} REMOVE=2 REMOVE value
                     */
                    AuditConfigDelta.Action = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "ACTION_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "ADD"] = 1;
                        values[valuesById[2] = "REMOVE"] = 2;
                        return values;
                    })();
    
                    return AuditConfigDelta;
                })();
    
                return v1;
            })();
    
            return iam;
        })();
    
        google.type = (function() {
    
            /**
             * Namespace type.
             * @memberof google
             * @namespace
             */
            var type = {};
    
            type.Expr = (function() {
    
                /**
                 * Properties of an Expr.
                 * @memberof google.type
                 * @interface IExpr
                 * @property {string|null} [expression] Expr expression
                 * @property {string|null} [title] Expr title
                 * @property {string|null} [description] Expr description
                 * @property {string|null} [location] Expr location
                 */
    
                /**
                 * Constructs a new Expr.
                 * @memberof google.type
                 * @classdesc Represents an Expr.
                 * @implements IExpr
                 * @constructor
                 * @param {google.type.IExpr=} [properties] Properties to set
                 */
                function Expr(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Expr expression.
                 * @member {string} expression
                 * @memberof google.type.Expr
                 * @instance
                 */
                Expr.prototype.expression = "";
    
                /**
                 * Expr title.
                 * @member {string} title
                 * @memberof google.type.Expr
                 * @instance
                 */
                Expr.prototype.title = "";
    
                /**
                 * Expr description.
                 * @member {string} description
                 * @memberof google.type.Expr
                 * @instance
                 */
                Expr.prototype.description = "";
    
                /**
                 * Expr location.
                 * @member {string} location
                 * @memberof google.type.Expr
                 * @instance
                 */
                Expr.prototype.location = "";
    
                /**
                 * Creates a new Expr instance using the specified properties.
                 * @function create
                 * @memberof google.type.Expr
                 * @static
                 * @param {google.type.IExpr=} [properties] Properties to set
                 * @returns {google.type.Expr} Expr instance
                 */
                Expr.create = function create(properties) {
                    return new Expr(properties);
                };
    
                /**
                 * Encodes the specified Expr message. Does not implicitly {@link google.type.Expr.verify|verify} messages.
                 * @function encode
                 * @memberof google.type.Expr
                 * @static
                 * @param {google.type.IExpr} message Expr message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Expr.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.expression != null && Object.hasOwnProperty.call(message, "expression"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.expression);
                    if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.title);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);
                    if (message.location != null && Object.hasOwnProperty.call(message, "location"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.location);
                    return writer;
                };
    
                /**
                 * Encodes the specified Expr message, length delimited. Does not implicitly {@link google.type.Expr.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.type.Expr
                 * @static
                 * @param {google.type.IExpr} message Expr message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Expr.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Expr message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.type.Expr
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.type.Expr} Expr
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Expr.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.type.Expr();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.expression = reader.string();
                            break;
                        case 2:
                            message.title = reader.string();
                            break;
                        case 3:
                            message.description = reader.string();
                            break;
                        case 4:
                            message.location = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Expr message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.type.Expr
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.type.Expr} Expr
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Expr.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Expr message.
                 * @function verify
                 * @memberof google.type.Expr
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Expr.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.expression != null && message.hasOwnProperty("expression"))
                        if (!$util.isString(message.expression))
                            return "expression: string expected";
                    if (message.title != null && message.hasOwnProperty("title"))
                        if (!$util.isString(message.title))
                            return "title: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.location != null && message.hasOwnProperty("location"))
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    return null;
                };
    
                /**
                 * Creates an Expr message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.type.Expr
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.type.Expr} Expr
                 */
                Expr.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.type.Expr)
                        return object;
                    var message = new $root.google.type.Expr();
                    if (object.expression != null)
                        message.expression = String(object.expression);
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };
    
                /**
                 * Creates a plain object from an Expr message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.type.Expr
                 * @static
                 * @param {google.type.Expr} message Expr
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Expr.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.expression = "";
                        object.title = "";
                        object.description = "";
                        object.location = "";
                    }
                    if (message.expression != null && message.hasOwnProperty("expression"))
                        object.expression = message.expression;
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.location != null && message.hasOwnProperty("location"))
                        object.location = message.location;
                    return object;
                };
    
                /**
                 * Converts this Expr to JSON.
                 * @function toJSON
                 * @memberof google.type.Expr
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Expr.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Expr;
            })();
    
            return type;
        })();
    
        return google;
    })();

    return $root;
});
