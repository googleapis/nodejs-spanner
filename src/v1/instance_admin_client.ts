// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import * as path from 'path';

import {Transform} from 'stream';
import {RequestType} from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import * as gapicConfig from './instance_admin_client_config.json';
import {operationsProtos} from 'google-gax';
const version = require('../../../package.json').version;

/**
 *  Cloud Spanner Instance Admin API
 *
 *  The Cloud Spanner Instance Admin API can be used to create, delete,
 *  modify and list instances. Instances are dedicated Cloud Spanner serving
 *  and storage resources to be used by Cloud Spanner databases.
 *
 *  Each instance has a "configuration", which dictates where the
 *  serving resources for the Cloud Spanner instance are located (e.g.,
 *  US-central, Europe). Configurations are created by Google based on
 *  resource availability.
 *
 *  Cloud Spanner billing is based on the instances that exist and their
 *  sizes. After an instance exists, there are no additional
 *  per-database or per-operation charges for use of the instance
 *  (though there may be additional network bandwidth charges).
 *  Instances offer isolation: problems with databases in one instance
 *  will not affect other instances. However, within an instance
 *  databases can affect each other. For example, if one database in an
 *  instance receives a lot of requests and consumes most of the
 *  instance resources, fewer resources are available for other
 *  databases in that instance, and their performance may suffer.
 * @class
 * @memberof v1
 */
export class InstanceAdminClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  instanceAdminStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of InstanceAdminClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof InstanceAdminClient;
    const servicePath =
      opts && opts.servicePath
        ? opts.servicePath
        : opts && opts.apiEndpoint
        ? opts.apiEndpoint
        : staticMembers.servicePath;
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;

    // users can override the config from client side, like retry codes name.
    // The detailed structure of the clientConfig can be found here: https://github.com/googleapis/gax-nodejs/blob/master/src/gax.ts#L546
    // The way to override client config for Showcase API:
    //
    // const customConfig = {"interfaces": {"google.showcase.v1beta1.Echo": {"methods": {"Echo": {"retry_codes_name": "idempotent", "retry_params_name": "default"}}}}}
    // const showcaseClient = new showcaseClient({ projectId, customConfig });
    opts.clientConfig = opts.clientConfig || {};

    // If we're running in browser, it's OK to omit `fallback` since
    // google-gax has `browser` field in its `package.json`.
    // For Electron (which does not respect `browser` field),
    // pass `{fallback: true}` to the InstanceAdminClient constructor.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof InstanceAdminClient).scopes;
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(
      __dirname,
      '..',
      '..',
      'protos',
      'protos.json'
    );
    this._protos = this._gaxGrpc.loadProto(
      opts.fallback
        ? // eslint-disable-next-line @typescript-eslint/no-var-requires
          require('../../protos/protos.json')
        : nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      instancePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/instances/{instance}'
      ),
      instanceConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/instanceConfigs/{instance_config}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listInstanceConfigs: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'instanceConfigs'
      ),
      listInstances: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'instances'
      ),
    };

    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const protoFilesRoot = opts.fallback
      ? this._gaxModule.protobuf.Root.fromJSON(
          // eslint-disable-next-line @typescript-eslint/no-var-requires
          require('../../protos/protos.json')
        )
      : this._gaxModule.protobuf.loadSync(nodejsProtoPath);

    this.operationsClient = this._gaxModule
      .lro({
        auth: this.auth,
        grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
      })
      .operationsClient(opts);
    const createInstanceResponse = protoFilesRoot.lookup(
      '.google.spanner.admin.instance.v1.Instance'
    ) as gax.protobuf.Type;
    const createInstanceMetadata = protoFilesRoot.lookup(
      '.google.spanner.admin.instance.v1.CreateInstanceMetadata'
    ) as gax.protobuf.Type;
    const updateInstanceResponse = protoFilesRoot.lookup(
      '.google.spanner.admin.instance.v1.Instance'
    ) as gax.protobuf.Type;
    const updateInstanceMetadata = protoFilesRoot.lookup(
      '.google.spanner.admin.instance.v1.UpdateInstanceMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createInstance: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createInstanceResponse.decode.bind(createInstanceResponse),
        createInstanceMetadata.decode.bind(createInstanceMetadata)
      ),
      updateInstance: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateInstanceResponse.decode.bind(updateInstanceResponse),
        updateInstanceMetadata.decode.bind(updateInstanceMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.spanner.admin.instance.v1.InstanceAdmin',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.instanceAdminStub) {
      return this.instanceAdminStub;
    }

    // Put together the "service stub" for
    // google.spanner.admin.instance.v1.InstanceAdmin.
    this.instanceAdminStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.spanner.admin.instance.v1.InstanceAdmin'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.spanner.admin.instance.v1.InstanceAdmin,
      this._opts
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const instanceAdminStubMethods = [
      'listInstanceConfigs',
      'getInstanceConfig',
      'listInstances',
      'getInstance',
      'createInstance',
      'updateInstance',
      'deleteInstance',
      'setIamPolicy',
      'getIamPolicy',
      'testIamPermissions',
    ];
    for (const methodName of instanceAdminStubMethods) {
      const callPromise = this.instanceAdminStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.instanceAdminStub;
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'spanner.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'spanner.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/spanner.admin',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  getInstanceConfig(
    request: protos.google.spanner.admin.instance.v1.IGetInstanceConfigRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.spanner.admin.instance.v1.IInstanceConfig,
      (
        | protos.google.spanner.admin.instance.v1.IGetInstanceConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getInstanceConfig(
    request: protos.google.spanner.admin.instance.v1.IGetInstanceConfigRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.spanner.admin.instance.v1.IInstanceConfig,
      | protos.google.spanner.admin.instance.v1.IGetInstanceConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getInstanceConfig(
    request: protos.google.spanner.admin.instance.v1.IGetInstanceConfigRequest,
    callback: Callback<
      protos.google.spanner.admin.instance.v1.IInstanceConfig,
      | protos.google.spanner.admin.instance.v1.IGetInstanceConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Gets information about a particular instance configuration.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the requested instance configuration. Values are of
   *   the form `projects/<project>/instanceConfigs/<config>`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [InstanceConfig]{@link google.spanner.admin.instance.v1.InstanceConfig}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getInstanceConfig(
    request: protos.google.spanner.admin.instance.v1.IGetInstanceConfigRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.spanner.admin.instance.v1.IInstanceConfig,
          | protos.google.spanner.admin.instance.v1.IGetInstanceConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.spanner.admin.instance.v1.IInstanceConfig,
      | protos.google.spanner.admin.instance.v1.IGetInstanceConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.spanner.admin.instance.v1.IInstanceConfig,
      (
        | protos.google.spanner.admin.instance.v1.IGetInstanceConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getInstanceConfig(request, options, callback);
  }
  getInstance(
    request: protos.google.spanner.admin.instance.v1.IGetInstanceRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.spanner.admin.instance.v1.IInstance,
      protos.google.spanner.admin.instance.v1.IGetInstanceRequest | undefined,
      {} | undefined
    ]
  >;
  getInstance(
    request: protos.google.spanner.admin.instance.v1.IGetInstanceRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.spanner.admin.instance.v1.IInstance,
      | protos.google.spanner.admin.instance.v1.IGetInstanceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getInstance(
    request: protos.google.spanner.admin.instance.v1.IGetInstanceRequest,
    callback: Callback<
      protos.google.spanner.admin.instance.v1.IInstance,
      | protos.google.spanner.admin.instance.v1.IGetInstanceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Gets information about a particular instance.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the requested instance. Values are of the form
   *   `projects/<project>/instances/<instance>`.
   * @param {google.protobuf.FieldMask} request.fieldMask
   *   If field_mask is present, specifies the subset of {@link google.spanner.admin.instance.v1.Instance|Instance} fields that
   *   should be returned.
   *   If absent, all {@link google.spanner.admin.instance.v1.Instance|Instance} fields are returned.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Instance]{@link google.spanner.admin.instance.v1.Instance}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getInstance(
    request: protos.google.spanner.admin.instance.v1.IGetInstanceRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.spanner.admin.instance.v1.IInstance,
          | protos.google.spanner.admin.instance.v1.IGetInstanceRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.spanner.admin.instance.v1.IInstance,
      | protos.google.spanner.admin.instance.v1.IGetInstanceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.spanner.admin.instance.v1.IInstance,
      protos.google.spanner.admin.instance.v1.IGetInstanceRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getInstance(request, options, callback);
  }
  deleteInstance(
    request: protos.google.spanner.admin.instance.v1.IDeleteInstanceRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.spanner.admin.instance.v1.IDeleteInstanceRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteInstance(
    request: protos.google.spanner.admin.instance.v1.IDeleteInstanceRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.spanner.admin.instance.v1.IDeleteInstanceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteInstance(
    request: protos.google.spanner.admin.instance.v1.IDeleteInstanceRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.spanner.admin.instance.v1.IDeleteInstanceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Deletes an instance.
   *
   * Immediately upon completion of the request:
   *
   *   * Billing ceases for all of the instance's reserved resources.
   *
   * Soon afterward:
   *
   *   * The instance and *all of its databases* immediately and
   *     irrevocably disappear from the API. All data in the databases
   *     is permanently deleted.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the instance to be deleted. Values are of the form
   *   `projects/<project>/instances/<instance>`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteInstance(
    request: protos.google.spanner.admin.instance.v1.IDeleteInstanceRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.spanner.admin.instance.v1.IDeleteInstanceRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.spanner.admin.instance.v1.IDeleteInstanceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.spanner.admin.instance.v1.IDeleteInstanceRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteInstance(request, options, callback);
  }
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Sets the access control policy on an instance resource. Replaces any
   * existing policy.
   *
   * Authorization requires `spanner.instances.setIamPolicy` on
   * {@link google.iam.v1.SetIamPolicyRequest.resource|resource}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being specified.
   *   See the operation documentation for the appropriate value for this field.
   * @param {google.iam.v1.Policy} request.policy
   *   REQUIRED: The complete policy to be applied to the `resource`. The size of
   *   the policy is limited to a few 10s of KB. An empty policy is a
   *   valid policy but certain Cloud Platform services (such as Projects)
   *   might reject them.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      resource: request.resource || '',
    });
    this.initialize();
    return this.innerApiCalls.setIamPolicy(request, options, callback);
  }
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Gets the access control policy for an instance resource. Returns an empty
   * policy if an instance exists but does not have a policy set.
   *
   * Authorization requires `spanner.instances.getIamPolicy` on
   * {@link google.iam.v1.GetIamPolicyRequest.resource|resource}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {google.iam.v1.GetPolicyOptions} request.options
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`. This field is only used by Cloud IAM.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      resource: request.resource || '',
    });
    this.initialize();
    return this.innerApiCalls.getIamPolicy(request, options, callback);
  }
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    ]
  >;
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    callback: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Returns permissions that the caller has on the specified instance resource.
   *
   * Attempting this RPC on a non-existent Cloud Spanner instance resource will
   * result in a NOT_FOUND error if the user has `spanner.instances.list`
   * permission on the containing Google Cloud Project. Otherwise returns an
   * empty set of permissions.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see
   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      resource: request.resource || '',
    });
    this.initialize();
    return this.innerApiCalls.testIamPermissions(request, options, callback);
  }

  createInstance(
    request: protos.google.spanner.admin.instance.v1.ICreateInstanceRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.spanner.admin.instance.v1.IInstance,
        protos.google.spanner.admin.instance.v1.ICreateInstanceMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createInstance(
    request: protos.google.spanner.admin.instance.v1.ICreateInstanceRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.spanner.admin.instance.v1.IInstance,
        protos.google.spanner.admin.instance.v1.ICreateInstanceMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createInstance(
    request: protos.google.spanner.admin.instance.v1.ICreateInstanceRequest,
    callback: Callback<
      LROperation<
        protos.google.spanner.admin.instance.v1.IInstance,
        protos.google.spanner.admin.instance.v1.ICreateInstanceMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Creates an instance and begins preparing it to begin serving. The
   * returned {@link google.longrunning.Operation|long-running operation}
   * can be used to track the progress of preparing the new
   * instance. The instance name is assigned by the caller. If the
   * named instance already exists, `CreateInstance` returns
   * `ALREADY_EXISTS`.
   *
   * Immediately upon completion of this request:
   *
   *   * The instance is readable via the API, with all requested attributes
   *     but no allocated resources. Its state is `CREATING`.
   *
   * Until completion of the returned operation:
   *
   *   * Cancelling the operation renders the instance immediately unreadable
   *     via the API.
   *   * The instance can be deleted.
   *   * All other attempts to modify the instance are rejected.
   *
   * Upon completion of the returned operation:
   *
   *   * Billing for all successfully-allocated resources begins (some types
   *     may have lower than the requested levels).
   *   * Databases can be created in the instance.
   *   * The instance's allocated resource levels are readable via the API.
   *   * The instance's state becomes `READY`.
   *
   * The returned {@link google.longrunning.Operation|long-running operation} will
   * have a name of the format `<instance_name>/operations/<operation_id>` and
   * can be used to track creation of the instance.  The
   * {@link google.longrunning.Operation.metadata|metadata} field type is
   * {@link google.spanner.admin.instance.v1.CreateInstanceMetadata|CreateInstanceMetadata}.
   * The {@link google.longrunning.Operation.response|response} field type is
   * {@link google.spanner.admin.instance.v1.Instance|Instance}, if successful.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the project in which to create the instance. Values
   *   are of the form `projects/<project>`.
   * @param {string} request.instanceId
   *   Required. The ID of the instance to create.  Valid identifiers are of the
   *   form `{@link -a-z0-9|a-z}*[a-z0-9]` and must be between 2 and 64 characters in
   *   length.
   * @param {google.spanner.admin.instance.v1.Instance} request.instance
   *   Required. The instance to create.  The name may be omitted, but if
   *   specified must be `<parent>/instances/<instance_id>`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createInstance(
    request: protos.google.spanner.admin.instance.v1.ICreateInstanceRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.spanner.admin.instance.v1.IInstance,
            protos.google.spanner.admin.instance.v1.ICreateInstanceMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.spanner.admin.instance.v1.IInstance,
        protos.google.spanner.admin.instance.v1.ICreateInstanceMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.spanner.admin.instance.v1.IInstance,
        protos.google.spanner.admin.instance.v1.ICreateInstanceMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createInstance(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by the createInstance() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkCreateInstanceProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkCreateInstanceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.spanner.admin.instance.v1.Instance,
      protos.google.spanner.admin.instance.v1.CreateInstanceMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.createInstance,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.spanner.admin.instance.v1.Instance,
      protos.google.spanner.admin.instance.v1.CreateInstanceMetadata
    >;
  }
  updateInstance(
    request: protos.google.spanner.admin.instance.v1.IUpdateInstanceRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.spanner.admin.instance.v1.IInstance,
        protos.google.spanner.admin.instance.v1.IUpdateInstanceMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateInstance(
    request: protos.google.spanner.admin.instance.v1.IUpdateInstanceRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.spanner.admin.instance.v1.IInstance,
        protos.google.spanner.admin.instance.v1.IUpdateInstanceMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateInstance(
    request: protos.google.spanner.admin.instance.v1.IUpdateInstanceRequest,
    callback: Callback<
      LROperation<
        protos.google.spanner.admin.instance.v1.IInstance,
        protos.google.spanner.admin.instance.v1.IUpdateInstanceMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Updates an instance, and begins allocating or releasing resources
   * as requested. The returned [long-running
   * operation][google.longrunning.Operation] can be used to track the
   * progress of updating the instance. If the named instance does not
   * exist, returns `NOT_FOUND`.
   *
   * Immediately upon completion of this request:
   *
   *   * For resource types for which a decrease in the instance's allocation
   *     has been requested, billing is based on the newly-requested level.
   *
   * Until completion of the returned operation:
   *
   *   * Cancelling the operation sets its metadata's
   *     {@link google.spanner.admin.instance.v1.UpdateInstanceMetadata.cancel_time|cancel_time}, and begins
   *     restoring resources to their pre-request values. The operation
   *     is guaranteed to succeed at undoing all resource changes,
   *     after which point it terminates with a `CANCELLED` status.
   *   * All other attempts to modify the instance are rejected.
   *   * Reading the instance via the API continues to give the pre-request
   *     resource levels.
   *
   * Upon completion of the returned operation:
   *
   *   * Billing begins for all successfully-allocated resources (some types
   *     may have lower than the requested levels).
   *   * All newly-reserved resources are available for serving the instance's
   *     tables.
   *   * The instance's new resource levels are readable via the API.
   *
   * The returned {@link google.longrunning.Operation|long-running operation} will
   * have a name of the format `<instance_name>/operations/<operation_id>` and
   * can be used to track the instance modification.  The
   * {@link google.longrunning.Operation.metadata|metadata} field type is
   * {@link google.spanner.admin.instance.v1.UpdateInstanceMetadata|UpdateInstanceMetadata}.
   * The {@link google.longrunning.Operation.response|response} field type is
   * {@link google.spanner.admin.instance.v1.Instance|Instance}, if successful.
   *
   * Authorization requires `spanner.instances.update` permission on
   * resource {@link google.spanner.admin.instance.v1.Instance.name|name}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.spanner.admin.instance.v1.Instance} request.instance
   *   Required. The instance to update, which must always include the instance
   *   name.  Otherwise, only fields mentioned in {@link google.spanner.admin.instance.v1.UpdateInstanceRequest.field_mask|field_mask} need be included.
   * @param {google.protobuf.FieldMask} request.fieldMask
   *   Required. A mask specifying which fields in {@link google.spanner.admin.instance.v1.Instance|Instance} should be updated.
   *   The field mask must always be specified; this prevents any future fields in
   *   {@link google.spanner.admin.instance.v1.Instance|Instance} from being erased accidentally by clients that do not know
   *   about them.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  updateInstance(
    request: protos.google.spanner.admin.instance.v1.IUpdateInstanceRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.spanner.admin.instance.v1.IInstance,
            protos.google.spanner.admin.instance.v1.IUpdateInstanceMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.spanner.admin.instance.v1.IInstance,
        protos.google.spanner.admin.instance.v1.IUpdateInstanceMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.spanner.admin.instance.v1.IInstance,
        protos.google.spanner.admin.instance.v1.IUpdateInstanceMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'instance.name': request.instance!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateInstance(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by the updateInstance() method.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *
   * @example:
   *   const decodedOperation = await checkUpdateInstanceProgress(name);
   *   console.log(decodedOperation.result);
   *   console.log(decodedOperation.done);
   *   console.log(decodedOperation.metadata);
   *
   */
  async checkUpdateInstanceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.spanner.admin.instance.v1.Instance,
      protos.google.spanner.admin.instance.v1.UpdateInstanceMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.updateInstance,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.spanner.admin.instance.v1.Instance,
      protos.google.spanner.admin.instance.v1.UpdateInstanceMetadata
    >;
  }
  listInstanceConfigs(
    request: protos.google.spanner.admin.instance.v1.IListInstanceConfigsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.spanner.admin.instance.v1.IInstanceConfig[],
      protos.google.spanner.admin.instance.v1.IListInstanceConfigsRequest | null,
      protos.google.spanner.admin.instance.v1.IListInstanceConfigsResponse
    ]
  >;
  listInstanceConfigs(
    request: protos.google.spanner.admin.instance.v1.IListInstanceConfigsRequest,
    options: gax.CallOptions,
    callback: PaginationCallback<
      protos.google.spanner.admin.instance.v1.IListInstanceConfigsRequest,
      | protos.google.spanner.admin.instance.v1.IListInstanceConfigsResponse
      | null
      | undefined,
      protos.google.spanner.admin.instance.v1.IInstanceConfig
    >
  ): void;
  listInstanceConfigs(
    request: protos.google.spanner.admin.instance.v1.IListInstanceConfigsRequest,
    callback: PaginationCallback<
      protos.google.spanner.admin.instance.v1.IListInstanceConfigsRequest,
      | protos.google.spanner.admin.instance.v1.IListInstanceConfigsResponse
      | null
      | undefined,
      protos.google.spanner.admin.instance.v1.IInstanceConfig
    >
  ): void;
  /**
   * Lists the supported instance configurations for a given project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the project for which a list of supported instance
   *   configurations is requested. Values are of the form
   *   `projects/<project>`.
   * @param {number} request.pageSize
   *   Number of instance configurations to be returned in the response. If 0 or
   *   less, defaults to the server's maximum allowed page size.
   * @param {string} request.pageToken
   *   If non-empty, `page_token` should contain a
   *   {@link google.spanner.admin.instance.v1.ListInstanceConfigsResponse.next_page_token|next_page_token}
   *   from a previous {@link google.spanner.admin.instance.v1.ListInstanceConfigsResponse|ListInstanceConfigsResponse}.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [InstanceConfig]{@link google.spanner.admin.instance.v1.InstanceConfig}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [InstanceConfig]{@link google.spanner.admin.instance.v1.InstanceConfig} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListInstanceConfigsRequest]{@link google.spanner.admin.instance.v1.ListInstanceConfigsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListInstanceConfigsResponse]{@link google.spanner.admin.instance.v1.ListInstanceConfigsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listInstanceConfigs(
    request: protos.google.spanner.admin.instance.v1.IListInstanceConfigsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | PaginationCallback<
          protos.google.spanner.admin.instance.v1.IListInstanceConfigsRequest,
          | protos.google.spanner.admin.instance.v1.IListInstanceConfigsResponse
          | null
          | undefined,
          protos.google.spanner.admin.instance.v1.IInstanceConfig
        >,
    callback?: PaginationCallback<
      protos.google.spanner.admin.instance.v1.IListInstanceConfigsRequest,
      | protos.google.spanner.admin.instance.v1.IListInstanceConfigsResponse
      | null
      | undefined,
      protos.google.spanner.admin.instance.v1.IInstanceConfig
    >
  ): Promise<
    [
      protos.google.spanner.admin.instance.v1.IInstanceConfig[],
      protos.google.spanner.admin.instance.v1.IListInstanceConfigsRequest | null,
      protos.google.spanner.admin.instance.v1.IListInstanceConfigsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listInstanceConfigs(request, options, callback);
  }

  /**
   * Equivalent to {@link listInstanceConfigs}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listInstanceConfigs} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the project for which a list of supported instance
   *   configurations is requested. Values are of the form
   *   `projects/<project>`.
   * @param {number} request.pageSize
   *   Number of instance configurations to be returned in the response. If 0 or
   *   less, defaults to the server's maximum allowed page size.
   * @param {string} request.pageToken
   *   If non-empty, `page_token` should contain a
   *   {@link google.spanner.admin.instance.v1.ListInstanceConfigsResponse.next_page_token|next_page_token}
   *   from a previous {@link google.spanner.admin.instance.v1.ListInstanceConfigsResponse|ListInstanceConfigsResponse}.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [InstanceConfig]{@link google.spanner.admin.instance.v1.InstanceConfig} on 'data' event.
   */
  listInstanceConfigsStream(
    request?: protos.google.spanner.admin.instance.v1.IListInstanceConfigsRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listInstanceConfigs.createStream(
      this.innerApiCalls.listInstanceConfigs as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to {@link listInstanceConfigs}, but returns an iterable object.
   *
   * for-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the project for which a list of supported instance
   *   configurations is requested. Values are of the form
   *   `projects/<project>`.
   * @param {number} request.pageSize
   *   Number of instance configurations to be returned in the response. If 0 or
   *   less, defaults to the server's maximum allowed page size.
   * @param {string} request.pageToken
   *   If non-empty, `page_token` should contain a
   *   {@link google.spanner.admin.instance.v1.ListInstanceConfigsResponse.next_page_token|next_page_token}
   *   from a previous {@link google.spanner.admin.instance.v1.ListInstanceConfigsResponse|ListInstanceConfigsResponse}.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   */
  listInstanceConfigsAsync(
    request?: protos.google.spanner.admin.instance.v1.IListInstanceConfigsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.spanner.admin.instance.v1.IInstanceConfig> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listInstanceConfigs.asyncIterate(
      this.innerApiCalls['listInstanceConfigs'] as GaxCall,
      (request as unknown) as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.spanner.admin.instance.v1.IInstanceConfig>;
  }
  listInstances(
    request: protos.google.spanner.admin.instance.v1.IListInstancesRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.spanner.admin.instance.v1.IInstance[],
      protos.google.spanner.admin.instance.v1.IListInstancesRequest | null,
      protos.google.spanner.admin.instance.v1.IListInstancesResponse
    ]
  >;
  listInstances(
    request: protos.google.spanner.admin.instance.v1.IListInstancesRequest,
    options: gax.CallOptions,
    callback: PaginationCallback<
      protos.google.spanner.admin.instance.v1.IListInstancesRequest,
      | protos.google.spanner.admin.instance.v1.IListInstancesResponse
      | null
      | undefined,
      protos.google.spanner.admin.instance.v1.IInstance
    >
  ): void;
  listInstances(
    request: protos.google.spanner.admin.instance.v1.IListInstancesRequest,
    callback: PaginationCallback<
      protos.google.spanner.admin.instance.v1.IListInstancesRequest,
      | protos.google.spanner.admin.instance.v1.IListInstancesResponse
      | null
      | undefined,
      protos.google.spanner.admin.instance.v1.IInstance
    >
  ): void;
  /**
   * Lists all instances in the given project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the project for which a list of instances is
   *   requested. Values are of the form `projects/<project>`.
   * @param {number} request.pageSize
   *   Number of instances to be returned in the response. If 0 or less, defaults
   *   to the server's maximum allowed page size.
   * @param {string} request.pageToken
   *   If non-empty, `page_token` should contain a
   *   {@link google.spanner.admin.instance.v1.ListInstancesResponse.next_page_token|next_page_token} from a
   *   previous {@link google.spanner.admin.instance.v1.ListInstancesResponse|ListInstancesResponse}.
   * @param {string} request.filter
   *   An expression for filtering the results of the request. Filter rules are
   *   case insensitive. The fields eligible for filtering are:
   *
   *     * `name`
   *     * `display_name`
   *     * `labels.key` where key is the name of a label
   *
   *   Some examples of using filters are:
   *
   *     * `name:*` --> The instance has a name.
   *     * `name:Howl` --> The instance's name contains the string "howl".
   *     * `name:HOWL` --> Equivalent to above.
   *     * `NAME:howl` --> Equivalent to above.
   *     * `labels.env:*` --> The instance has the label "env".
   *     * `labels.env:dev` --> The instance has the label "env" and the value of
   *                          the label contains the string "dev".
   *     * `name:howl labels.env:dev` --> The instance's name contains "howl" and
   *                                    it has the label "env" with its value
   *                                    containing "dev".
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Instance]{@link google.spanner.admin.instance.v1.Instance}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Instance]{@link google.spanner.admin.instance.v1.Instance} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListInstancesRequest]{@link google.spanner.admin.instance.v1.ListInstancesRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListInstancesResponse]{@link google.spanner.admin.instance.v1.ListInstancesResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listInstances(
    request: protos.google.spanner.admin.instance.v1.IListInstancesRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | PaginationCallback<
          protos.google.spanner.admin.instance.v1.IListInstancesRequest,
          | protos.google.spanner.admin.instance.v1.IListInstancesResponse
          | null
          | undefined,
          protos.google.spanner.admin.instance.v1.IInstance
        >,
    callback?: PaginationCallback<
      protos.google.spanner.admin.instance.v1.IListInstancesRequest,
      | protos.google.spanner.admin.instance.v1.IListInstancesResponse
      | null
      | undefined,
      protos.google.spanner.admin.instance.v1.IInstance
    >
  ): Promise<
    [
      protos.google.spanner.admin.instance.v1.IInstance[],
      protos.google.spanner.admin.instance.v1.IListInstancesRequest | null,
      protos.google.spanner.admin.instance.v1.IListInstancesResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listInstances(request, options, callback);
  }

  /**
   * Equivalent to {@link listInstances}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listInstances} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the project for which a list of instances is
   *   requested. Values are of the form `projects/<project>`.
   * @param {number} request.pageSize
   *   Number of instances to be returned in the response. If 0 or less, defaults
   *   to the server's maximum allowed page size.
   * @param {string} request.pageToken
   *   If non-empty, `page_token` should contain a
   *   {@link google.spanner.admin.instance.v1.ListInstancesResponse.next_page_token|next_page_token} from a
   *   previous {@link google.spanner.admin.instance.v1.ListInstancesResponse|ListInstancesResponse}.
   * @param {string} request.filter
   *   An expression for filtering the results of the request. Filter rules are
   *   case insensitive. The fields eligible for filtering are:
   *
   *     * `name`
   *     * `display_name`
   *     * `labels.key` where key is the name of a label
   *
   *   Some examples of using filters are:
   *
   *     * `name:*` --> The instance has a name.
   *     * `name:Howl` --> The instance's name contains the string "howl".
   *     * `name:HOWL` --> Equivalent to above.
   *     * `NAME:howl` --> Equivalent to above.
   *     * `labels.env:*` --> The instance has the label "env".
   *     * `labels.env:dev` --> The instance has the label "env" and the value of
   *                          the label contains the string "dev".
   *     * `name:howl labels.env:dev` --> The instance's name contains "howl" and
   *                                    it has the label "env" with its value
   *                                    containing "dev".
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Instance]{@link google.spanner.admin.instance.v1.Instance} on 'data' event.
   */
  listInstancesStream(
    request?: protos.google.spanner.admin.instance.v1.IListInstancesRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listInstances.createStream(
      this.innerApiCalls.listInstances as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to {@link listInstances}, but returns an iterable object.
   *
   * for-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the project for which a list of instances is
   *   requested. Values are of the form `projects/<project>`.
   * @param {number} request.pageSize
   *   Number of instances to be returned in the response. If 0 or less, defaults
   *   to the server's maximum allowed page size.
   * @param {string} request.pageToken
   *   If non-empty, `page_token` should contain a
   *   {@link google.spanner.admin.instance.v1.ListInstancesResponse.next_page_token|next_page_token} from a
   *   previous {@link google.spanner.admin.instance.v1.ListInstancesResponse|ListInstancesResponse}.
   * @param {string} request.filter
   *   An expression for filtering the results of the request. Filter rules are
   *   case insensitive. The fields eligible for filtering are:
   *
   *     * `name`
   *     * `display_name`
   *     * `labels.key` where key is the name of a label
   *
   *   Some examples of using filters are:
   *
   *     * `name:*` --> The instance has a name.
   *     * `name:Howl` --> The instance's name contains the string "howl".
   *     * `name:HOWL` --> Equivalent to above.
   *     * `NAME:howl` --> Equivalent to above.
   *     * `labels.env:*` --> The instance has the label "env".
   *     * `labels.env:dev` --> The instance has the label "env" and the value of
   *                          the label contains the string "dev".
   *     * `name:howl labels.env:dev` --> The instance's name contains "howl" and
   *                                    it has the label "env" with its value
   *                                    containing "dev".
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   */
  listInstancesAsync(
    request?: protos.google.spanner.admin.instance.v1.IListInstancesRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.spanner.admin.instance.v1.IInstance> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listInstances.asyncIterate(
      this.innerApiCalls['listInstances'] as GaxCall,
      (request as unknown) as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.spanner.admin.instance.v1.IInstance>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified instance resource name string.
   *
   * @param {string} project
   * @param {string} instance
   * @returns {string} Resource name string.
   */
  instancePath(project: string, instance: string) {
    return this.pathTemplates.instancePathTemplate.render({
      project: project,
      instance: instance,
    });
  }

  /**
   * Parse the project from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).project;
  }

  /**
   * Parse the instance from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the instance.
   */
  matchInstanceFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).instance;
  }

  /**
   * Return a fully-qualified instanceConfig resource name string.
   *
   * @param {string} project
   * @param {string} instance_config
   * @returns {string} Resource name string.
   */
  instanceConfigPath(project: string, instanceConfig: string) {
    return this.pathTemplates.instanceConfigPathTemplate.render({
      project: project,
      instance_config: instanceConfig,
    });
  }

  /**
   * Parse the project from InstanceConfig resource.
   *
   * @param {string} instanceConfigName
   *   A fully-qualified path representing InstanceConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromInstanceConfigName(instanceConfigName: string) {
    return this.pathTemplates.instanceConfigPathTemplate.match(
      instanceConfigName
    ).project;
  }

  /**
   * Parse the instance_config from InstanceConfig resource.
   *
   * @param {string} instanceConfigName
   *   A fully-qualified path representing InstanceConfig resource.
   * @returns {string} A string representing the instance_config.
   */
  matchInstanceConfigFromInstanceConfigName(instanceConfigName: string) {
    return this.pathTemplates.instanceConfigPathTemplate.match(
      instanceConfigName
    ).instance_config;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.instanceAdminStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
